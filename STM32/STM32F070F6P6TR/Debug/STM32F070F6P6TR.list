
STM32F070F6P6TR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005264  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08005324  08005324  00006324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053d8  080053d8  00007060  2**0
                  CONTENTS
  4 .ARM          00000000  080053d8  080053d8  00007060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053d8  080053d8  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053d8  080053d8  000063d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053dc  080053dc  000063dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080053e0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000060  08005440  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08005440  00007270  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c72f  00000000  00000000  00007088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b7f  00000000  00000000  000137b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  00015338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000944  00000000  00000000  00015ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001067d  00000000  00000000  0001682c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ddd1  00000000  00000000  00026ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00065e8b  00000000  00000000  00034c7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009ab05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c2c  00000000  00000000  0009ab48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0009d774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800530c 	.word	0x0800530c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	0800530c 	.word	0x0800530c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0008      	movs	r0, r1
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 fb6d 	bl	8000908 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 faed 	bl	8000818 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 fb5f 	bl	8000908 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fb55 	bl	8000908 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			@ (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fafb 	bl	8000868 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			@ (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 faf1 	bl	8000868 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			@ (mov r8, r8)

08000294 <__aeabi_f2uiz>:
 8000294:	219e      	movs	r1, #158	@ 0x9e
 8000296:	b510      	push	{r4, lr}
 8000298:	05c9      	lsls	r1, r1, #23
 800029a:	1c04      	adds	r4, r0, #0
 800029c:	f7ff fff0 	bl	8000280 <__aeabi_fcmpge>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d103      	bne.n	80002ac <__aeabi_f2uiz+0x18>
 80002a4:	1c20      	adds	r0, r4, #0
 80002a6:	f000 fe5f 	bl	8000f68 <__aeabi_f2iz>
 80002aa:	bd10      	pop	{r4, pc}
 80002ac:	219e      	movs	r1, #158	@ 0x9e
 80002ae:	1c20      	adds	r0, r4, #0
 80002b0:	05c9      	lsls	r1, r1, #23
 80002b2:	f000 fcb5 	bl	8000c20 <__aeabi_fsub>
 80002b6:	f000 fe57 	bl	8000f68 <__aeabi_f2iz>
 80002ba:	2380      	movs	r3, #128	@ 0x80
 80002bc:	061b      	lsls	r3, r3, #24
 80002be:	469c      	mov	ip, r3
 80002c0:	4460      	add	r0, ip
 80002c2:	e7f2      	b.n	80002aa <__aeabi_f2uiz+0x16>

080002c4 <__aeabi_fadd>:
 80002c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002c6:	46ce      	mov	lr, r9
 80002c8:	4647      	mov	r7, r8
 80002ca:	0243      	lsls	r3, r0, #9
 80002cc:	0a5a      	lsrs	r2, r3, #9
 80002ce:	024e      	lsls	r6, r1, #9
 80002d0:	0045      	lsls	r5, r0, #1
 80002d2:	0fc4      	lsrs	r4, r0, #31
 80002d4:	0048      	lsls	r0, r1, #1
 80002d6:	4691      	mov	r9, r2
 80002d8:	0e2d      	lsrs	r5, r5, #24
 80002da:	0a72      	lsrs	r2, r6, #9
 80002dc:	0e00      	lsrs	r0, r0, #24
 80002de:	4694      	mov	ip, r2
 80002e0:	b580      	push	{r7, lr}
 80002e2:	099b      	lsrs	r3, r3, #6
 80002e4:	0fc9      	lsrs	r1, r1, #31
 80002e6:	09b6      	lsrs	r6, r6, #6
 80002e8:	1a2a      	subs	r2, r5, r0
 80002ea:	428c      	cmp	r4, r1
 80002ec:	d021      	beq.n	8000332 <__aeabi_fadd+0x6e>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	dd0d      	ble.n	800030e <__aeabi_fadd+0x4a>
 80002f2:	2800      	cmp	r0, #0
 80002f4:	d12d      	bne.n	8000352 <__aeabi_fadd+0x8e>
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d100      	bne.n	80002fc <__aeabi_fadd+0x38>
 80002fa:	e08d      	b.n	8000418 <__aeabi_fadd+0x154>
 80002fc:	1e51      	subs	r1, r2, #1
 80002fe:	2a01      	cmp	r2, #1
 8000300:	d100      	bne.n	8000304 <__aeabi_fadd+0x40>
 8000302:	e11d      	b.n	8000540 <__aeabi_fadd+0x27c>
 8000304:	2aff      	cmp	r2, #255	@ 0xff
 8000306:	d100      	bne.n	800030a <__aeabi_fadd+0x46>
 8000308:	e0ab      	b.n	8000462 <__aeabi_fadd+0x19e>
 800030a:	000a      	movs	r2, r1
 800030c:	e027      	b.n	800035e <__aeabi_fadd+0x9a>
 800030e:	2a00      	cmp	r2, #0
 8000310:	d04d      	beq.n	80003ae <__aeabi_fadd+0xea>
 8000312:	1b42      	subs	r2, r0, r5
 8000314:	2d00      	cmp	r5, #0
 8000316:	d000      	beq.n	800031a <__aeabi_fadd+0x56>
 8000318:	e0cc      	b.n	80004b4 <__aeabi_fadd+0x1f0>
 800031a:	2b00      	cmp	r3, #0
 800031c:	d100      	bne.n	8000320 <__aeabi_fadd+0x5c>
 800031e:	e079      	b.n	8000414 <__aeabi_fadd+0x150>
 8000320:	1e54      	subs	r4, r2, #1
 8000322:	2a01      	cmp	r2, #1
 8000324:	d100      	bne.n	8000328 <__aeabi_fadd+0x64>
 8000326:	e128      	b.n	800057a <__aeabi_fadd+0x2b6>
 8000328:	2aff      	cmp	r2, #255	@ 0xff
 800032a:	d100      	bne.n	800032e <__aeabi_fadd+0x6a>
 800032c:	e097      	b.n	800045e <__aeabi_fadd+0x19a>
 800032e:	0022      	movs	r2, r4
 8000330:	e0c5      	b.n	80004be <__aeabi_fadd+0x1fa>
 8000332:	2a00      	cmp	r2, #0
 8000334:	dc00      	bgt.n	8000338 <__aeabi_fadd+0x74>
 8000336:	e096      	b.n	8000466 <__aeabi_fadd+0x1a2>
 8000338:	2800      	cmp	r0, #0
 800033a:	d04f      	beq.n	80003dc <__aeabi_fadd+0x118>
 800033c:	2dff      	cmp	r5, #255	@ 0xff
 800033e:	d100      	bne.n	8000342 <__aeabi_fadd+0x7e>
 8000340:	e08f      	b.n	8000462 <__aeabi_fadd+0x19e>
 8000342:	2180      	movs	r1, #128	@ 0x80
 8000344:	04c9      	lsls	r1, r1, #19
 8000346:	430e      	orrs	r6, r1
 8000348:	2a1b      	cmp	r2, #27
 800034a:	dd51      	ble.n	80003f0 <__aeabi_fadd+0x12c>
 800034c:	002a      	movs	r2, r5
 800034e:	3301      	adds	r3, #1
 8000350:	e018      	b.n	8000384 <__aeabi_fadd+0xc0>
 8000352:	2dff      	cmp	r5, #255	@ 0xff
 8000354:	d100      	bne.n	8000358 <__aeabi_fadd+0x94>
 8000356:	e084      	b.n	8000462 <__aeabi_fadd+0x19e>
 8000358:	2180      	movs	r1, #128	@ 0x80
 800035a:	04c9      	lsls	r1, r1, #19
 800035c:	430e      	orrs	r6, r1
 800035e:	2101      	movs	r1, #1
 8000360:	2a1b      	cmp	r2, #27
 8000362:	dc08      	bgt.n	8000376 <__aeabi_fadd+0xb2>
 8000364:	0031      	movs	r1, r6
 8000366:	2020      	movs	r0, #32
 8000368:	40d1      	lsrs	r1, r2
 800036a:	1a82      	subs	r2, r0, r2
 800036c:	4096      	lsls	r6, r2
 800036e:	0032      	movs	r2, r6
 8000370:	1e50      	subs	r0, r2, #1
 8000372:	4182      	sbcs	r2, r0
 8000374:	4311      	orrs	r1, r2
 8000376:	1a5b      	subs	r3, r3, r1
 8000378:	015a      	lsls	r2, r3, #5
 800037a:	d459      	bmi.n	8000430 <__aeabi_fadd+0x16c>
 800037c:	2107      	movs	r1, #7
 800037e:	002a      	movs	r2, r5
 8000380:	4019      	ands	r1, r3
 8000382:	d049      	beq.n	8000418 <__aeabi_fadd+0x154>
 8000384:	210f      	movs	r1, #15
 8000386:	4019      	ands	r1, r3
 8000388:	2904      	cmp	r1, #4
 800038a:	d000      	beq.n	800038e <__aeabi_fadd+0xca>
 800038c:	3304      	adds	r3, #4
 800038e:	0159      	lsls	r1, r3, #5
 8000390:	d542      	bpl.n	8000418 <__aeabi_fadd+0x154>
 8000392:	1c50      	adds	r0, r2, #1
 8000394:	2afe      	cmp	r2, #254	@ 0xfe
 8000396:	d03a      	beq.n	800040e <__aeabi_fadd+0x14a>
 8000398:	019b      	lsls	r3, r3, #6
 800039a:	b2c0      	uxtb	r0, r0
 800039c:	0a5b      	lsrs	r3, r3, #9
 800039e:	05c0      	lsls	r0, r0, #23
 80003a0:	4318      	orrs	r0, r3
 80003a2:	07e4      	lsls	r4, r4, #31
 80003a4:	4320      	orrs	r0, r4
 80003a6:	bcc0      	pop	{r6, r7}
 80003a8:	46b9      	mov	r9, r7
 80003aa:	46b0      	mov	r8, r6
 80003ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80003ae:	20fe      	movs	r0, #254	@ 0xfe
 80003b0:	4680      	mov	r8, r0
 80003b2:	1c6f      	adds	r7, r5, #1
 80003b4:	0038      	movs	r0, r7
 80003b6:	4647      	mov	r7, r8
 80003b8:	4207      	tst	r7, r0
 80003ba:	d000      	beq.n	80003be <__aeabi_fadd+0xfa>
 80003bc:	e08e      	b.n	80004dc <__aeabi_fadd+0x218>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d000      	beq.n	80003c4 <__aeabi_fadd+0x100>
 80003c2:	e0b4      	b.n	800052e <__aeabi_fadd+0x26a>
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d100      	bne.n	80003ca <__aeabi_fadd+0x106>
 80003c8:	e0db      	b.n	8000582 <__aeabi_fadd+0x2be>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d06c      	beq.n	80004a8 <__aeabi_fadd+0x1e4>
 80003ce:	1b98      	subs	r0, r3, r6
 80003d0:	0145      	lsls	r5, r0, #5
 80003d2:	d400      	bmi.n	80003d6 <__aeabi_fadd+0x112>
 80003d4:	e0f7      	b.n	80005c6 <__aeabi_fadd+0x302>
 80003d6:	000c      	movs	r4, r1
 80003d8:	1af3      	subs	r3, r6, r3
 80003da:	e03d      	b.n	8000458 <__aeabi_fadd+0x194>
 80003dc:	2e00      	cmp	r6, #0
 80003de:	d01b      	beq.n	8000418 <__aeabi_fadd+0x154>
 80003e0:	1e51      	subs	r1, r2, #1
 80003e2:	2a01      	cmp	r2, #1
 80003e4:	d100      	bne.n	80003e8 <__aeabi_fadd+0x124>
 80003e6:	e082      	b.n	80004ee <__aeabi_fadd+0x22a>
 80003e8:	2aff      	cmp	r2, #255	@ 0xff
 80003ea:	d03a      	beq.n	8000462 <__aeabi_fadd+0x19e>
 80003ec:	000a      	movs	r2, r1
 80003ee:	e7ab      	b.n	8000348 <__aeabi_fadd+0x84>
 80003f0:	0031      	movs	r1, r6
 80003f2:	2020      	movs	r0, #32
 80003f4:	40d1      	lsrs	r1, r2
 80003f6:	1a82      	subs	r2, r0, r2
 80003f8:	4096      	lsls	r6, r2
 80003fa:	0032      	movs	r2, r6
 80003fc:	1e50      	subs	r0, r2, #1
 80003fe:	4182      	sbcs	r2, r0
 8000400:	430a      	orrs	r2, r1
 8000402:	189b      	adds	r3, r3, r2
 8000404:	015a      	lsls	r2, r3, #5
 8000406:	d5b9      	bpl.n	800037c <__aeabi_fadd+0xb8>
 8000408:	1c6a      	adds	r2, r5, #1
 800040a:	2dfe      	cmp	r5, #254	@ 0xfe
 800040c:	d175      	bne.n	80004fa <__aeabi_fadd+0x236>
 800040e:	20ff      	movs	r0, #255	@ 0xff
 8000410:	2300      	movs	r3, #0
 8000412:	e7c4      	b.n	800039e <__aeabi_fadd+0xda>
 8000414:	000c      	movs	r4, r1
 8000416:	0033      	movs	r3, r6
 8000418:	08db      	lsrs	r3, r3, #3
 800041a:	2aff      	cmp	r2, #255	@ 0xff
 800041c:	d146      	bne.n	80004ac <__aeabi_fadd+0x1e8>
 800041e:	2b00      	cmp	r3, #0
 8000420:	d0f5      	beq.n	800040e <__aeabi_fadd+0x14a>
 8000422:	2280      	movs	r2, #128	@ 0x80
 8000424:	03d2      	lsls	r2, r2, #15
 8000426:	4313      	orrs	r3, r2
 8000428:	025b      	lsls	r3, r3, #9
 800042a:	20ff      	movs	r0, #255	@ 0xff
 800042c:	0a5b      	lsrs	r3, r3, #9
 800042e:	e7b6      	b.n	800039e <__aeabi_fadd+0xda>
 8000430:	019f      	lsls	r7, r3, #6
 8000432:	09bf      	lsrs	r7, r7, #6
 8000434:	0038      	movs	r0, r7
 8000436:	f000 fdf9 	bl	800102c <__clzsi2>
 800043a:	3805      	subs	r0, #5
 800043c:	4087      	lsls	r7, r0
 800043e:	4285      	cmp	r5, r0
 8000440:	dc24      	bgt.n	800048c <__aeabi_fadd+0x1c8>
 8000442:	003b      	movs	r3, r7
 8000444:	2120      	movs	r1, #32
 8000446:	1b42      	subs	r2, r0, r5
 8000448:	3201      	adds	r2, #1
 800044a:	40d3      	lsrs	r3, r2
 800044c:	1a8a      	subs	r2, r1, r2
 800044e:	4097      	lsls	r7, r2
 8000450:	1e7a      	subs	r2, r7, #1
 8000452:	4197      	sbcs	r7, r2
 8000454:	2200      	movs	r2, #0
 8000456:	433b      	orrs	r3, r7
 8000458:	0759      	lsls	r1, r3, #29
 800045a:	d193      	bne.n	8000384 <__aeabi_fadd+0xc0>
 800045c:	e797      	b.n	800038e <__aeabi_fadd+0xca>
 800045e:	000c      	movs	r4, r1
 8000460:	0033      	movs	r3, r6
 8000462:	08db      	lsrs	r3, r3, #3
 8000464:	e7db      	b.n	800041e <__aeabi_fadd+0x15a>
 8000466:	2a00      	cmp	r2, #0
 8000468:	d014      	beq.n	8000494 <__aeabi_fadd+0x1d0>
 800046a:	1b42      	subs	r2, r0, r5
 800046c:	2d00      	cmp	r5, #0
 800046e:	d14b      	bne.n	8000508 <__aeabi_fadd+0x244>
 8000470:	2b00      	cmp	r3, #0
 8000472:	d0d0      	beq.n	8000416 <__aeabi_fadd+0x152>
 8000474:	1e51      	subs	r1, r2, #1
 8000476:	2a01      	cmp	r2, #1
 8000478:	d100      	bne.n	800047c <__aeabi_fadd+0x1b8>
 800047a:	e09e      	b.n	80005ba <__aeabi_fadd+0x2f6>
 800047c:	2aff      	cmp	r2, #255	@ 0xff
 800047e:	d0ef      	beq.n	8000460 <__aeabi_fadd+0x19c>
 8000480:	000a      	movs	r2, r1
 8000482:	2a1b      	cmp	r2, #27
 8000484:	dd5f      	ble.n	8000546 <__aeabi_fadd+0x282>
 8000486:	0002      	movs	r2, r0
 8000488:	1c73      	adds	r3, r6, #1
 800048a:	e77b      	b.n	8000384 <__aeabi_fadd+0xc0>
 800048c:	4b50      	ldr	r3, [pc, #320]	@ (80005d0 <__aeabi_fadd+0x30c>)
 800048e:	1a2a      	subs	r2, r5, r0
 8000490:	403b      	ands	r3, r7
 8000492:	e7e1      	b.n	8000458 <__aeabi_fadd+0x194>
 8000494:	21fe      	movs	r1, #254	@ 0xfe
 8000496:	1c6a      	adds	r2, r5, #1
 8000498:	4211      	tst	r1, r2
 800049a:	d13b      	bne.n	8000514 <__aeabi_fadd+0x250>
 800049c:	2d00      	cmp	r5, #0
 800049e:	d15d      	bne.n	800055c <__aeabi_fadd+0x298>
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d07f      	beq.n	80005a4 <__aeabi_fadd+0x2e0>
 80004a4:	2e00      	cmp	r6, #0
 80004a6:	d17f      	bne.n	80005a8 <__aeabi_fadd+0x2e4>
 80004a8:	2200      	movs	r2, #0
 80004aa:	08db      	lsrs	r3, r3, #3
 80004ac:	025b      	lsls	r3, r3, #9
 80004ae:	0a5b      	lsrs	r3, r3, #9
 80004b0:	b2d0      	uxtb	r0, r2
 80004b2:	e774      	b.n	800039e <__aeabi_fadd+0xda>
 80004b4:	28ff      	cmp	r0, #255	@ 0xff
 80004b6:	d0d2      	beq.n	800045e <__aeabi_fadd+0x19a>
 80004b8:	2480      	movs	r4, #128	@ 0x80
 80004ba:	04e4      	lsls	r4, r4, #19
 80004bc:	4323      	orrs	r3, r4
 80004be:	2401      	movs	r4, #1
 80004c0:	2a1b      	cmp	r2, #27
 80004c2:	dc07      	bgt.n	80004d4 <__aeabi_fadd+0x210>
 80004c4:	001c      	movs	r4, r3
 80004c6:	2520      	movs	r5, #32
 80004c8:	40d4      	lsrs	r4, r2
 80004ca:	1aaa      	subs	r2, r5, r2
 80004cc:	4093      	lsls	r3, r2
 80004ce:	1e5a      	subs	r2, r3, #1
 80004d0:	4193      	sbcs	r3, r2
 80004d2:	431c      	orrs	r4, r3
 80004d4:	1b33      	subs	r3, r6, r4
 80004d6:	0005      	movs	r5, r0
 80004d8:	000c      	movs	r4, r1
 80004da:	e74d      	b.n	8000378 <__aeabi_fadd+0xb4>
 80004dc:	1b9f      	subs	r7, r3, r6
 80004de:	017a      	lsls	r2, r7, #5
 80004e0:	d422      	bmi.n	8000528 <__aeabi_fadd+0x264>
 80004e2:	2f00      	cmp	r7, #0
 80004e4:	d1a6      	bne.n	8000434 <__aeabi_fadd+0x170>
 80004e6:	2400      	movs	r4, #0
 80004e8:	2000      	movs	r0, #0
 80004ea:	2300      	movs	r3, #0
 80004ec:	e757      	b.n	800039e <__aeabi_fadd+0xda>
 80004ee:	199b      	adds	r3, r3, r6
 80004f0:	2501      	movs	r5, #1
 80004f2:	3201      	adds	r2, #1
 80004f4:	0159      	lsls	r1, r3, #5
 80004f6:	d400      	bmi.n	80004fa <__aeabi_fadd+0x236>
 80004f8:	e740      	b.n	800037c <__aeabi_fadd+0xb8>
 80004fa:	2101      	movs	r1, #1
 80004fc:	4835      	ldr	r0, [pc, #212]	@ (80005d4 <__aeabi_fadd+0x310>)
 80004fe:	4019      	ands	r1, r3
 8000500:	085b      	lsrs	r3, r3, #1
 8000502:	4003      	ands	r3, r0
 8000504:	430b      	orrs	r3, r1
 8000506:	e7a7      	b.n	8000458 <__aeabi_fadd+0x194>
 8000508:	28ff      	cmp	r0, #255	@ 0xff
 800050a:	d0a9      	beq.n	8000460 <__aeabi_fadd+0x19c>
 800050c:	2180      	movs	r1, #128	@ 0x80
 800050e:	04c9      	lsls	r1, r1, #19
 8000510:	430b      	orrs	r3, r1
 8000512:	e7b6      	b.n	8000482 <__aeabi_fadd+0x1be>
 8000514:	2aff      	cmp	r2, #255	@ 0xff
 8000516:	d100      	bne.n	800051a <__aeabi_fadd+0x256>
 8000518:	e779      	b.n	800040e <__aeabi_fadd+0x14a>
 800051a:	199b      	adds	r3, r3, r6
 800051c:	085b      	lsrs	r3, r3, #1
 800051e:	0759      	lsls	r1, r3, #29
 8000520:	d000      	beq.n	8000524 <__aeabi_fadd+0x260>
 8000522:	e72f      	b.n	8000384 <__aeabi_fadd+0xc0>
 8000524:	08db      	lsrs	r3, r3, #3
 8000526:	e7c1      	b.n	80004ac <__aeabi_fadd+0x1e8>
 8000528:	000c      	movs	r4, r1
 800052a:	1af7      	subs	r7, r6, r3
 800052c:	e782      	b.n	8000434 <__aeabi_fadd+0x170>
 800052e:	2b00      	cmp	r3, #0
 8000530:	d12c      	bne.n	800058c <__aeabi_fadd+0x2c8>
 8000532:	2e00      	cmp	r6, #0
 8000534:	d193      	bne.n	800045e <__aeabi_fadd+0x19a>
 8000536:	2380      	movs	r3, #128	@ 0x80
 8000538:	2400      	movs	r4, #0
 800053a:	20ff      	movs	r0, #255	@ 0xff
 800053c:	03db      	lsls	r3, r3, #15
 800053e:	e72e      	b.n	800039e <__aeabi_fadd+0xda>
 8000540:	2501      	movs	r5, #1
 8000542:	1b9b      	subs	r3, r3, r6
 8000544:	e718      	b.n	8000378 <__aeabi_fadd+0xb4>
 8000546:	0019      	movs	r1, r3
 8000548:	2520      	movs	r5, #32
 800054a:	40d1      	lsrs	r1, r2
 800054c:	1aaa      	subs	r2, r5, r2
 800054e:	4093      	lsls	r3, r2
 8000550:	1e5a      	subs	r2, r3, #1
 8000552:	4193      	sbcs	r3, r2
 8000554:	430b      	orrs	r3, r1
 8000556:	0005      	movs	r5, r0
 8000558:	199b      	adds	r3, r3, r6
 800055a:	e753      	b.n	8000404 <__aeabi_fadd+0x140>
 800055c:	2b00      	cmp	r3, #0
 800055e:	d100      	bne.n	8000562 <__aeabi_fadd+0x29e>
 8000560:	e77e      	b.n	8000460 <__aeabi_fadd+0x19c>
 8000562:	2e00      	cmp	r6, #0
 8000564:	d100      	bne.n	8000568 <__aeabi_fadd+0x2a4>
 8000566:	e77c      	b.n	8000462 <__aeabi_fadd+0x19e>
 8000568:	2280      	movs	r2, #128	@ 0x80
 800056a:	03d2      	lsls	r2, r2, #15
 800056c:	4591      	cmp	r9, r2
 800056e:	d302      	bcc.n	8000576 <__aeabi_fadd+0x2b2>
 8000570:	4594      	cmp	ip, r2
 8000572:	d200      	bcs.n	8000576 <__aeabi_fadd+0x2b2>
 8000574:	0033      	movs	r3, r6
 8000576:	08db      	lsrs	r3, r3, #3
 8000578:	e753      	b.n	8000422 <__aeabi_fadd+0x15e>
 800057a:	000c      	movs	r4, r1
 800057c:	1af3      	subs	r3, r6, r3
 800057e:	3501      	adds	r5, #1
 8000580:	e6fa      	b.n	8000378 <__aeabi_fadd+0xb4>
 8000582:	2e00      	cmp	r6, #0
 8000584:	d0af      	beq.n	80004e6 <__aeabi_fadd+0x222>
 8000586:	000c      	movs	r4, r1
 8000588:	0033      	movs	r3, r6
 800058a:	e78d      	b.n	80004a8 <__aeabi_fadd+0x1e4>
 800058c:	2e00      	cmp	r6, #0
 800058e:	d100      	bne.n	8000592 <__aeabi_fadd+0x2ce>
 8000590:	e767      	b.n	8000462 <__aeabi_fadd+0x19e>
 8000592:	2280      	movs	r2, #128	@ 0x80
 8000594:	03d2      	lsls	r2, r2, #15
 8000596:	4591      	cmp	r9, r2
 8000598:	d3ed      	bcc.n	8000576 <__aeabi_fadd+0x2b2>
 800059a:	4594      	cmp	ip, r2
 800059c:	d2eb      	bcs.n	8000576 <__aeabi_fadd+0x2b2>
 800059e:	000c      	movs	r4, r1
 80005a0:	0033      	movs	r3, r6
 80005a2:	e7e8      	b.n	8000576 <__aeabi_fadd+0x2b2>
 80005a4:	0033      	movs	r3, r6
 80005a6:	e77f      	b.n	80004a8 <__aeabi_fadd+0x1e4>
 80005a8:	199b      	adds	r3, r3, r6
 80005aa:	2200      	movs	r2, #0
 80005ac:	0159      	lsls	r1, r3, #5
 80005ae:	d5b9      	bpl.n	8000524 <__aeabi_fadd+0x260>
 80005b0:	4a07      	ldr	r2, [pc, #28]	@ (80005d0 <__aeabi_fadd+0x30c>)
 80005b2:	4013      	ands	r3, r2
 80005b4:	08db      	lsrs	r3, r3, #3
 80005b6:	2201      	movs	r2, #1
 80005b8:	e778      	b.n	80004ac <__aeabi_fadd+0x1e8>
 80005ba:	199b      	adds	r3, r3, r6
 80005bc:	3201      	adds	r2, #1
 80005be:	3501      	adds	r5, #1
 80005c0:	0159      	lsls	r1, r3, #5
 80005c2:	d49a      	bmi.n	80004fa <__aeabi_fadd+0x236>
 80005c4:	e6da      	b.n	800037c <__aeabi_fadd+0xb8>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d08d      	beq.n	80004e6 <__aeabi_fadd+0x222>
 80005ca:	08db      	lsrs	r3, r3, #3
 80005cc:	e76e      	b.n	80004ac <__aeabi_fadd+0x1e8>
 80005ce:	46c0      	nop			@ (mov r8, r8)
 80005d0:	fbffffff 	.word	0xfbffffff
 80005d4:	7dffffff 	.word	0x7dffffff

080005d8 <__aeabi_fdiv>:
 80005d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005da:	464f      	mov	r7, r9
 80005dc:	4646      	mov	r6, r8
 80005de:	46d6      	mov	lr, sl
 80005e0:	0244      	lsls	r4, r0, #9
 80005e2:	b5c0      	push	{r6, r7, lr}
 80005e4:	0047      	lsls	r7, r0, #1
 80005e6:	1c0e      	adds	r6, r1, #0
 80005e8:	0a64      	lsrs	r4, r4, #9
 80005ea:	0e3f      	lsrs	r7, r7, #24
 80005ec:	0fc5      	lsrs	r5, r0, #31
 80005ee:	2f00      	cmp	r7, #0
 80005f0:	d03c      	beq.n	800066c <__aeabi_fdiv+0x94>
 80005f2:	2fff      	cmp	r7, #255	@ 0xff
 80005f4:	d042      	beq.n	800067c <__aeabi_fdiv+0xa4>
 80005f6:	2300      	movs	r3, #0
 80005f8:	2280      	movs	r2, #128	@ 0x80
 80005fa:	4699      	mov	r9, r3
 80005fc:	469a      	mov	sl, r3
 80005fe:	00e4      	lsls	r4, r4, #3
 8000600:	04d2      	lsls	r2, r2, #19
 8000602:	4314      	orrs	r4, r2
 8000604:	3f7f      	subs	r7, #127	@ 0x7f
 8000606:	0273      	lsls	r3, r6, #9
 8000608:	0a5b      	lsrs	r3, r3, #9
 800060a:	4698      	mov	r8, r3
 800060c:	0073      	lsls	r3, r6, #1
 800060e:	0e1b      	lsrs	r3, r3, #24
 8000610:	0ff6      	lsrs	r6, r6, #31
 8000612:	2b00      	cmp	r3, #0
 8000614:	d01b      	beq.n	800064e <__aeabi_fdiv+0x76>
 8000616:	2bff      	cmp	r3, #255	@ 0xff
 8000618:	d013      	beq.n	8000642 <__aeabi_fdiv+0x6a>
 800061a:	4642      	mov	r2, r8
 800061c:	2180      	movs	r1, #128	@ 0x80
 800061e:	00d2      	lsls	r2, r2, #3
 8000620:	04c9      	lsls	r1, r1, #19
 8000622:	4311      	orrs	r1, r2
 8000624:	4688      	mov	r8, r1
 8000626:	2000      	movs	r0, #0
 8000628:	3b7f      	subs	r3, #127	@ 0x7f
 800062a:	0029      	movs	r1, r5
 800062c:	1aff      	subs	r7, r7, r3
 800062e:	464b      	mov	r3, r9
 8000630:	4071      	eors	r1, r6
 8000632:	b2c9      	uxtb	r1, r1
 8000634:	2b0f      	cmp	r3, #15
 8000636:	d900      	bls.n	800063a <__aeabi_fdiv+0x62>
 8000638:	e0b5      	b.n	80007a6 <__aeabi_fdiv+0x1ce>
 800063a:	4a74      	ldr	r2, [pc, #464]	@ (800080c <__aeabi_fdiv+0x234>)
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	58d3      	ldr	r3, [r2, r3]
 8000640:	469f      	mov	pc, r3
 8000642:	4643      	mov	r3, r8
 8000644:	2b00      	cmp	r3, #0
 8000646:	d13f      	bne.n	80006c8 <__aeabi_fdiv+0xf0>
 8000648:	3fff      	subs	r7, #255	@ 0xff
 800064a:	3302      	adds	r3, #2
 800064c:	e003      	b.n	8000656 <__aeabi_fdiv+0x7e>
 800064e:	4643      	mov	r3, r8
 8000650:	2b00      	cmp	r3, #0
 8000652:	d12d      	bne.n	80006b0 <__aeabi_fdiv+0xd8>
 8000654:	2301      	movs	r3, #1
 8000656:	0029      	movs	r1, r5
 8000658:	464a      	mov	r2, r9
 800065a:	4071      	eors	r1, r6
 800065c:	b2c9      	uxtb	r1, r1
 800065e:	431a      	orrs	r2, r3
 8000660:	2a0e      	cmp	r2, #14
 8000662:	d838      	bhi.n	80006d6 <__aeabi_fdiv+0xfe>
 8000664:	486a      	ldr	r0, [pc, #424]	@ (8000810 <__aeabi_fdiv+0x238>)
 8000666:	0092      	lsls	r2, r2, #2
 8000668:	5882      	ldr	r2, [r0, r2]
 800066a:	4697      	mov	pc, r2
 800066c:	2c00      	cmp	r4, #0
 800066e:	d113      	bne.n	8000698 <__aeabi_fdiv+0xc0>
 8000670:	2304      	movs	r3, #4
 8000672:	4699      	mov	r9, r3
 8000674:	3b03      	subs	r3, #3
 8000676:	2700      	movs	r7, #0
 8000678:	469a      	mov	sl, r3
 800067a:	e7c4      	b.n	8000606 <__aeabi_fdiv+0x2e>
 800067c:	2c00      	cmp	r4, #0
 800067e:	d105      	bne.n	800068c <__aeabi_fdiv+0xb4>
 8000680:	2308      	movs	r3, #8
 8000682:	4699      	mov	r9, r3
 8000684:	3b06      	subs	r3, #6
 8000686:	27ff      	movs	r7, #255	@ 0xff
 8000688:	469a      	mov	sl, r3
 800068a:	e7bc      	b.n	8000606 <__aeabi_fdiv+0x2e>
 800068c:	230c      	movs	r3, #12
 800068e:	4699      	mov	r9, r3
 8000690:	3b09      	subs	r3, #9
 8000692:	27ff      	movs	r7, #255	@ 0xff
 8000694:	469a      	mov	sl, r3
 8000696:	e7b6      	b.n	8000606 <__aeabi_fdiv+0x2e>
 8000698:	0020      	movs	r0, r4
 800069a:	f000 fcc7 	bl	800102c <__clzsi2>
 800069e:	2776      	movs	r7, #118	@ 0x76
 80006a0:	1f43      	subs	r3, r0, #5
 80006a2:	409c      	lsls	r4, r3
 80006a4:	2300      	movs	r3, #0
 80006a6:	427f      	negs	r7, r7
 80006a8:	4699      	mov	r9, r3
 80006aa:	469a      	mov	sl, r3
 80006ac:	1a3f      	subs	r7, r7, r0
 80006ae:	e7aa      	b.n	8000606 <__aeabi_fdiv+0x2e>
 80006b0:	4640      	mov	r0, r8
 80006b2:	f000 fcbb 	bl	800102c <__clzsi2>
 80006b6:	4642      	mov	r2, r8
 80006b8:	1f43      	subs	r3, r0, #5
 80006ba:	409a      	lsls	r2, r3
 80006bc:	2376      	movs	r3, #118	@ 0x76
 80006be:	425b      	negs	r3, r3
 80006c0:	1a1b      	subs	r3, r3, r0
 80006c2:	4690      	mov	r8, r2
 80006c4:	2000      	movs	r0, #0
 80006c6:	e7b0      	b.n	800062a <__aeabi_fdiv+0x52>
 80006c8:	2303      	movs	r3, #3
 80006ca:	464a      	mov	r2, r9
 80006cc:	431a      	orrs	r2, r3
 80006ce:	4691      	mov	r9, r2
 80006d0:	2003      	movs	r0, #3
 80006d2:	33fc      	adds	r3, #252	@ 0xfc
 80006d4:	e7a9      	b.n	800062a <__aeabi_fdiv+0x52>
 80006d6:	000d      	movs	r5, r1
 80006d8:	20ff      	movs	r0, #255	@ 0xff
 80006da:	2200      	movs	r2, #0
 80006dc:	05c0      	lsls	r0, r0, #23
 80006de:	07ed      	lsls	r5, r5, #31
 80006e0:	4310      	orrs	r0, r2
 80006e2:	4328      	orrs	r0, r5
 80006e4:	bce0      	pop	{r5, r6, r7}
 80006e6:	46ba      	mov	sl, r7
 80006e8:	46b1      	mov	r9, r6
 80006ea:	46a8      	mov	r8, r5
 80006ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ee:	000d      	movs	r5, r1
 80006f0:	2000      	movs	r0, #0
 80006f2:	2200      	movs	r2, #0
 80006f4:	e7f2      	b.n	80006dc <__aeabi_fdiv+0x104>
 80006f6:	4653      	mov	r3, sl
 80006f8:	2b02      	cmp	r3, #2
 80006fa:	d0ed      	beq.n	80006d8 <__aeabi_fdiv+0x100>
 80006fc:	2b03      	cmp	r3, #3
 80006fe:	d033      	beq.n	8000768 <__aeabi_fdiv+0x190>
 8000700:	46a0      	mov	r8, r4
 8000702:	2b01      	cmp	r3, #1
 8000704:	d105      	bne.n	8000712 <__aeabi_fdiv+0x13a>
 8000706:	2000      	movs	r0, #0
 8000708:	2200      	movs	r2, #0
 800070a:	e7e7      	b.n	80006dc <__aeabi_fdiv+0x104>
 800070c:	0035      	movs	r5, r6
 800070e:	2803      	cmp	r0, #3
 8000710:	d07a      	beq.n	8000808 <__aeabi_fdiv+0x230>
 8000712:	003b      	movs	r3, r7
 8000714:	337f      	adds	r3, #127	@ 0x7f
 8000716:	2b00      	cmp	r3, #0
 8000718:	dd2d      	ble.n	8000776 <__aeabi_fdiv+0x19e>
 800071a:	4642      	mov	r2, r8
 800071c:	0752      	lsls	r2, r2, #29
 800071e:	d007      	beq.n	8000730 <__aeabi_fdiv+0x158>
 8000720:	220f      	movs	r2, #15
 8000722:	4641      	mov	r1, r8
 8000724:	400a      	ands	r2, r1
 8000726:	2a04      	cmp	r2, #4
 8000728:	d002      	beq.n	8000730 <__aeabi_fdiv+0x158>
 800072a:	2204      	movs	r2, #4
 800072c:	4694      	mov	ip, r2
 800072e:	44e0      	add	r8, ip
 8000730:	4642      	mov	r2, r8
 8000732:	0112      	lsls	r2, r2, #4
 8000734:	d505      	bpl.n	8000742 <__aeabi_fdiv+0x16a>
 8000736:	4642      	mov	r2, r8
 8000738:	4b36      	ldr	r3, [pc, #216]	@ (8000814 <__aeabi_fdiv+0x23c>)
 800073a:	401a      	ands	r2, r3
 800073c:	003b      	movs	r3, r7
 800073e:	4690      	mov	r8, r2
 8000740:	3380      	adds	r3, #128	@ 0x80
 8000742:	2bfe      	cmp	r3, #254	@ 0xfe
 8000744:	dcc8      	bgt.n	80006d8 <__aeabi_fdiv+0x100>
 8000746:	4642      	mov	r2, r8
 8000748:	0192      	lsls	r2, r2, #6
 800074a:	0a52      	lsrs	r2, r2, #9
 800074c:	b2d8      	uxtb	r0, r3
 800074e:	e7c5      	b.n	80006dc <__aeabi_fdiv+0x104>
 8000750:	2280      	movs	r2, #128	@ 0x80
 8000752:	2500      	movs	r5, #0
 8000754:	20ff      	movs	r0, #255	@ 0xff
 8000756:	03d2      	lsls	r2, r2, #15
 8000758:	e7c0      	b.n	80006dc <__aeabi_fdiv+0x104>
 800075a:	2280      	movs	r2, #128	@ 0x80
 800075c:	03d2      	lsls	r2, r2, #15
 800075e:	4214      	tst	r4, r2
 8000760:	d002      	beq.n	8000768 <__aeabi_fdiv+0x190>
 8000762:	4643      	mov	r3, r8
 8000764:	4213      	tst	r3, r2
 8000766:	d049      	beq.n	80007fc <__aeabi_fdiv+0x224>
 8000768:	2280      	movs	r2, #128	@ 0x80
 800076a:	03d2      	lsls	r2, r2, #15
 800076c:	4322      	orrs	r2, r4
 800076e:	0252      	lsls	r2, r2, #9
 8000770:	20ff      	movs	r0, #255	@ 0xff
 8000772:	0a52      	lsrs	r2, r2, #9
 8000774:	e7b2      	b.n	80006dc <__aeabi_fdiv+0x104>
 8000776:	2201      	movs	r2, #1
 8000778:	1ad3      	subs	r3, r2, r3
 800077a:	2b1b      	cmp	r3, #27
 800077c:	dcc3      	bgt.n	8000706 <__aeabi_fdiv+0x12e>
 800077e:	4642      	mov	r2, r8
 8000780:	40da      	lsrs	r2, r3
 8000782:	4643      	mov	r3, r8
 8000784:	379e      	adds	r7, #158	@ 0x9e
 8000786:	40bb      	lsls	r3, r7
 8000788:	1e59      	subs	r1, r3, #1
 800078a:	418b      	sbcs	r3, r1
 800078c:	431a      	orrs	r2, r3
 800078e:	0753      	lsls	r3, r2, #29
 8000790:	d004      	beq.n	800079c <__aeabi_fdiv+0x1c4>
 8000792:	230f      	movs	r3, #15
 8000794:	4013      	ands	r3, r2
 8000796:	2b04      	cmp	r3, #4
 8000798:	d000      	beq.n	800079c <__aeabi_fdiv+0x1c4>
 800079a:	3204      	adds	r2, #4
 800079c:	0153      	lsls	r3, r2, #5
 800079e:	d529      	bpl.n	80007f4 <__aeabi_fdiv+0x21c>
 80007a0:	2001      	movs	r0, #1
 80007a2:	2200      	movs	r2, #0
 80007a4:	e79a      	b.n	80006dc <__aeabi_fdiv+0x104>
 80007a6:	4642      	mov	r2, r8
 80007a8:	0163      	lsls	r3, r4, #5
 80007aa:	0155      	lsls	r5, r2, #5
 80007ac:	42ab      	cmp	r3, r5
 80007ae:	d215      	bcs.n	80007dc <__aeabi_fdiv+0x204>
 80007b0:	201b      	movs	r0, #27
 80007b2:	2200      	movs	r2, #0
 80007b4:	3f01      	subs	r7, #1
 80007b6:	2601      	movs	r6, #1
 80007b8:	001c      	movs	r4, r3
 80007ba:	0052      	lsls	r2, r2, #1
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	2c00      	cmp	r4, #0
 80007c0:	db01      	blt.n	80007c6 <__aeabi_fdiv+0x1ee>
 80007c2:	429d      	cmp	r5, r3
 80007c4:	d801      	bhi.n	80007ca <__aeabi_fdiv+0x1f2>
 80007c6:	1b5b      	subs	r3, r3, r5
 80007c8:	4332      	orrs	r2, r6
 80007ca:	3801      	subs	r0, #1
 80007cc:	2800      	cmp	r0, #0
 80007ce:	d1f3      	bne.n	80007b8 <__aeabi_fdiv+0x1e0>
 80007d0:	1e58      	subs	r0, r3, #1
 80007d2:	4183      	sbcs	r3, r0
 80007d4:	4313      	orrs	r3, r2
 80007d6:	4698      	mov	r8, r3
 80007d8:	000d      	movs	r5, r1
 80007da:	e79a      	b.n	8000712 <__aeabi_fdiv+0x13a>
 80007dc:	201a      	movs	r0, #26
 80007de:	2201      	movs	r2, #1
 80007e0:	1b5b      	subs	r3, r3, r5
 80007e2:	e7e8      	b.n	80007b6 <__aeabi_fdiv+0x1de>
 80007e4:	3b02      	subs	r3, #2
 80007e6:	425a      	negs	r2, r3
 80007e8:	4153      	adcs	r3, r2
 80007ea:	425b      	negs	r3, r3
 80007ec:	0035      	movs	r5, r6
 80007ee:	2200      	movs	r2, #0
 80007f0:	b2d8      	uxtb	r0, r3
 80007f2:	e773      	b.n	80006dc <__aeabi_fdiv+0x104>
 80007f4:	0192      	lsls	r2, r2, #6
 80007f6:	2000      	movs	r0, #0
 80007f8:	0a52      	lsrs	r2, r2, #9
 80007fa:	e76f      	b.n	80006dc <__aeabi_fdiv+0x104>
 80007fc:	431a      	orrs	r2, r3
 80007fe:	0252      	lsls	r2, r2, #9
 8000800:	0035      	movs	r5, r6
 8000802:	20ff      	movs	r0, #255	@ 0xff
 8000804:	0a52      	lsrs	r2, r2, #9
 8000806:	e769      	b.n	80006dc <__aeabi_fdiv+0x104>
 8000808:	4644      	mov	r4, r8
 800080a:	e7ad      	b.n	8000768 <__aeabi_fdiv+0x190>
 800080c:	08005324 	.word	0x08005324
 8000810:	08005364 	.word	0x08005364
 8000814:	f7ffffff 	.word	0xf7ffffff

08000818 <__eqsf2>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	0042      	lsls	r2, r0, #1
 800081c:	024e      	lsls	r6, r1, #9
 800081e:	004c      	lsls	r4, r1, #1
 8000820:	0245      	lsls	r5, r0, #9
 8000822:	0a6d      	lsrs	r5, r5, #9
 8000824:	0e12      	lsrs	r2, r2, #24
 8000826:	0fc3      	lsrs	r3, r0, #31
 8000828:	0a76      	lsrs	r6, r6, #9
 800082a:	0e24      	lsrs	r4, r4, #24
 800082c:	0fc9      	lsrs	r1, r1, #31
 800082e:	2aff      	cmp	r2, #255	@ 0xff
 8000830:	d010      	beq.n	8000854 <__eqsf2+0x3c>
 8000832:	2cff      	cmp	r4, #255	@ 0xff
 8000834:	d00c      	beq.n	8000850 <__eqsf2+0x38>
 8000836:	2001      	movs	r0, #1
 8000838:	42a2      	cmp	r2, r4
 800083a:	d10a      	bne.n	8000852 <__eqsf2+0x3a>
 800083c:	42b5      	cmp	r5, r6
 800083e:	d108      	bne.n	8000852 <__eqsf2+0x3a>
 8000840:	428b      	cmp	r3, r1
 8000842:	d00f      	beq.n	8000864 <__eqsf2+0x4c>
 8000844:	2a00      	cmp	r2, #0
 8000846:	d104      	bne.n	8000852 <__eqsf2+0x3a>
 8000848:	0028      	movs	r0, r5
 800084a:	1e43      	subs	r3, r0, #1
 800084c:	4198      	sbcs	r0, r3
 800084e:	e000      	b.n	8000852 <__eqsf2+0x3a>
 8000850:	2001      	movs	r0, #1
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	2001      	movs	r0, #1
 8000856:	2cff      	cmp	r4, #255	@ 0xff
 8000858:	d1fb      	bne.n	8000852 <__eqsf2+0x3a>
 800085a:	4335      	orrs	r5, r6
 800085c:	d1f9      	bne.n	8000852 <__eqsf2+0x3a>
 800085e:	404b      	eors	r3, r1
 8000860:	0018      	movs	r0, r3
 8000862:	e7f6      	b.n	8000852 <__eqsf2+0x3a>
 8000864:	2000      	movs	r0, #0
 8000866:	e7f4      	b.n	8000852 <__eqsf2+0x3a>

08000868 <__gesf2>:
 8000868:	b530      	push	{r4, r5, lr}
 800086a:	0042      	lsls	r2, r0, #1
 800086c:	0244      	lsls	r4, r0, #9
 800086e:	024d      	lsls	r5, r1, #9
 8000870:	0fc3      	lsrs	r3, r0, #31
 8000872:	0048      	lsls	r0, r1, #1
 8000874:	0a64      	lsrs	r4, r4, #9
 8000876:	0e12      	lsrs	r2, r2, #24
 8000878:	0a6d      	lsrs	r5, r5, #9
 800087a:	0e00      	lsrs	r0, r0, #24
 800087c:	0fc9      	lsrs	r1, r1, #31
 800087e:	2aff      	cmp	r2, #255	@ 0xff
 8000880:	d019      	beq.n	80008b6 <__gesf2+0x4e>
 8000882:	28ff      	cmp	r0, #255	@ 0xff
 8000884:	d00b      	beq.n	800089e <__gesf2+0x36>
 8000886:	2a00      	cmp	r2, #0
 8000888:	d11e      	bne.n	80008c8 <__gesf2+0x60>
 800088a:	2800      	cmp	r0, #0
 800088c:	d10b      	bne.n	80008a6 <__gesf2+0x3e>
 800088e:	2d00      	cmp	r5, #0
 8000890:	d027      	beq.n	80008e2 <__gesf2+0x7a>
 8000892:	2c00      	cmp	r4, #0
 8000894:	d134      	bne.n	8000900 <__gesf2+0x98>
 8000896:	2900      	cmp	r1, #0
 8000898:	d02f      	beq.n	80008fa <__gesf2+0x92>
 800089a:	0008      	movs	r0, r1
 800089c:	bd30      	pop	{r4, r5, pc}
 800089e:	2d00      	cmp	r5, #0
 80008a0:	d128      	bne.n	80008f4 <__gesf2+0x8c>
 80008a2:	2a00      	cmp	r2, #0
 80008a4:	d101      	bne.n	80008aa <__gesf2+0x42>
 80008a6:	2c00      	cmp	r4, #0
 80008a8:	d0f5      	beq.n	8000896 <__gesf2+0x2e>
 80008aa:	428b      	cmp	r3, r1
 80008ac:	d107      	bne.n	80008be <__gesf2+0x56>
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d023      	beq.n	80008fa <__gesf2+0x92>
 80008b2:	0018      	movs	r0, r3
 80008b4:	e7f2      	b.n	800089c <__gesf2+0x34>
 80008b6:	2c00      	cmp	r4, #0
 80008b8:	d11c      	bne.n	80008f4 <__gesf2+0x8c>
 80008ba:	28ff      	cmp	r0, #255	@ 0xff
 80008bc:	d014      	beq.n	80008e8 <__gesf2+0x80>
 80008be:	1e58      	subs	r0, r3, #1
 80008c0:	2302      	movs	r3, #2
 80008c2:	4018      	ands	r0, r3
 80008c4:	3801      	subs	r0, #1
 80008c6:	e7e9      	b.n	800089c <__gesf2+0x34>
 80008c8:	2800      	cmp	r0, #0
 80008ca:	d0f8      	beq.n	80008be <__gesf2+0x56>
 80008cc:	428b      	cmp	r3, r1
 80008ce:	d1f6      	bne.n	80008be <__gesf2+0x56>
 80008d0:	4282      	cmp	r2, r0
 80008d2:	dcf4      	bgt.n	80008be <__gesf2+0x56>
 80008d4:	dbeb      	blt.n	80008ae <__gesf2+0x46>
 80008d6:	42ac      	cmp	r4, r5
 80008d8:	d8f1      	bhi.n	80008be <__gesf2+0x56>
 80008da:	2000      	movs	r0, #0
 80008dc:	42ac      	cmp	r4, r5
 80008de:	d2dd      	bcs.n	800089c <__gesf2+0x34>
 80008e0:	e7e5      	b.n	80008ae <__gesf2+0x46>
 80008e2:	2c00      	cmp	r4, #0
 80008e4:	d0da      	beq.n	800089c <__gesf2+0x34>
 80008e6:	e7ea      	b.n	80008be <__gesf2+0x56>
 80008e8:	2d00      	cmp	r5, #0
 80008ea:	d103      	bne.n	80008f4 <__gesf2+0x8c>
 80008ec:	428b      	cmp	r3, r1
 80008ee:	d1e6      	bne.n	80008be <__gesf2+0x56>
 80008f0:	2000      	movs	r0, #0
 80008f2:	e7d3      	b.n	800089c <__gesf2+0x34>
 80008f4:	2002      	movs	r0, #2
 80008f6:	4240      	negs	r0, r0
 80008f8:	e7d0      	b.n	800089c <__gesf2+0x34>
 80008fa:	2001      	movs	r0, #1
 80008fc:	4240      	negs	r0, r0
 80008fe:	e7cd      	b.n	800089c <__gesf2+0x34>
 8000900:	428b      	cmp	r3, r1
 8000902:	d0e8      	beq.n	80008d6 <__gesf2+0x6e>
 8000904:	e7db      	b.n	80008be <__gesf2+0x56>
 8000906:	46c0      	nop			@ (mov r8, r8)

08000908 <__lesf2>:
 8000908:	b530      	push	{r4, r5, lr}
 800090a:	0042      	lsls	r2, r0, #1
 800090c:	0244      	lsls	r4, r0, #9
 800090e:	024d      	lsls	r5, r1, #9
 8000910:	0fc3      	lsrs	r3, r0, #31
 8000912:	0048      	lsls	r0, r1, #1
 8000914:	0a64      	lsrs	r4, r4, #9
 8000916:	0e12      	lsrs	r2, r2, #24
 8000918:	0a6d      	lsrs	r5, r5, #9
 800091a:	0e00      	lsrs	r0, r0, #24
 800091c:	0fc9      	lsrs	r1, r1, #31
 800091e:	2aff      	cmp	r2, #255	@ 0xff
 8000920:	d01a      	beq.n	8000958 <__lesf2+0x50>
 8000922:	28ff      	cmp	r0, #255	@ 0xff
 8000924:	d00e      	beq.n	8000944 <__lesf2+0x3c>
 8000926:	2a00      	cmp	r2, #0
 8000928:	d11e      	bne.n	8000968 <__lesf2+0x60>
 800092a:	2800      	cmp	r0, #0
 800092c:	d10e      	bne.n	800094c <__lesf2+0x44>
 800092e:	2d00      	cmp	r5, #0
 8000930:	d02a      	beq.n	8000988 <__lesf2+0x80>
 8000932:	2c00      	cmp	r4, #0
 8000934:	d00c      	beq.n	8000950 <__lesf2+0x48>
 8000936:	428b      	cmp	r3, r1
 8000938:	d01d      	beq.n	8000976 <__lesf2+0x6e>
 800093a:	1e58      	subs	r0, r3, #1
 800093c:	2302      	movs	r3, #2
 800093e:	4018      	ands	r0, r3
 8000940:	3801      	subs	r0, #1
 8000942:	e010      	b.n	8000966 <__lesf2+0x5e>
 8000944:	2d00      	cmp	r5, #0
 8000946:	d10d      	bne.n	8000964 <__lesf2+0x5c>
 8000948:	2a00      	cmp	r2, #0
 800094a:	d120      	bne.n	800098e <__lesf2+0x86>
 800094c:	2c00      	cmp	r4, #0
 800094e:	d11e      	bne.n	800098e <__lesf2+0x86>
 8000950:	2900      	cmp	r1, #0
 8000952:	d023      	beq.n	800099c <__lesf2+0x94>
 8000954:	0008      	movs	r0, r1
 8000956:	e006      	b.n	8000966 <__lesf2+0x5e>
 8000958:	2c00      	cmp	r4, #0
 800095a:	d103      	bne.n	8000964 <__lesf2+0x5c>
 800095c:	28ff      	cmp	r0, #255	@ 0xff
 800095e:	d1ec      	bne.n	800093a <__lesf2+0x32>
 8000960:	2d00      	cmp	r5, #0
 8000962:	d017      	beq.n	8000994 <__lesf2+0x8c>
 8000964:	2002      	movs	r0, #2
 8000966:	bd30      	pop	{r4, r5, pc}
 8000968:	2800      	cmp	r0, #0
 800096a:	d0e6      	beq.n	800093a <__lesf2+0x32>
 800096c:	428b      	cmp	r3, r1
 800096e:	d1e4      	bne.n	800093a <__lesf2+0x32>
 8000970:	4282      	cmp	r2, r0
 8000972:	dce2      	bgt.n	800093a <__lesf2+0x32>
 8000974:	db04      	blt.n	8000980 <__lesf2+0x78>
 8000976:	42ac      	cmp	r4, r5
 8000978:	d8df      	bhi.n	800093a <__lesf2+0x32>
 800097a:	2000      	movs	r0, #0
 800097c:	42ac      	cmp	r4, r5
 800097e:	d2f2      	bcs.n	8000966 <__lesf2+0x5e>
 8000980:	2b00      	cmp	r3, #0
 8000982:	d00b      	beq.n	800099c <__lesf2+0x94>
 8000984:	0018      	movs	r0, r3
 8000986:	e7ee      	b.n	8000966 <__lesf2+0x5e>
 8000988:	2c00      	cmp	r4, #0
 800098a:	d0ec      	beq.n	8000966 <__lesf2+0x5e>
 800098c:	e7d5      	b.n	800093a <__lesf2+0x32>
 800098e:	428b      	cmp	r3, r1
 8000990:	d1d3      	bne.n	800093a <__lesf2+0x32>
 8000992:	e7f5      	b.n	8000980 <__lesf2+0x78>
 8000994:	2000      	movs	r0, #0
 8000996:	428b      	cmp	r3, r1
 8000998:	d0e5      	beq.n	8000966 <__lesf2+0x5e>
 800099a:	e7ce      	b.n	800093a <__lesf2+0x32>
 800099c:	2001      	movs	r0, #1
 800099e:	4240      	negs	r0, r0
 80009a0:	e7e1      	b.n	8000966 <__lesf2+0x5e>
 80009a2:	46c0      	nop			@ (mov r8, r8)

080009a4 <__aeabi_fmul>:
 80009a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009a6:	464f      	mov	r7, r9
 80009a8:	4646      	mov	r6, r8
 80009aa:	46d6      	mov	lr, sl
 80009ac:	0243      	lsls	r3, r0, #9
 80009ae:	0a5b      	lsrs	r3, r3, #9
 80009b0:	0045      	lsls	r5, r0, #1
 80009b2:	b5c0      	push	{r6, r7, lr}
 80009b4:	4699      	mov	r9, r3
 80009b6:	1c0f      	adds	r7, r1, #0
 80009b8:	0e2d      	lsrs	r5, r5, #24
 80009ba:	0fc6      	lsrs	r6, r0, #31
 80009bc:	2d00      	cmp	r5, #0
 80009be:	d100      	bne.n	80009c2 <__aeabi_fmul+0x1e>
 80009c0:	e088      	b.n	8000ad4 <__aeabi_fmul+0x130>
 80009c2:	2dff      	cmp	r5, #255	@ 0xff
 80009c4:	d100      	bne.n	80009c8 <__aeabi_fmul+0x24>
 80009c6:	e08d      	b.n	8000ae4 <__aeabi_fmul+0x140>
 80009c8:	2280      	movs	r2, #128	@ 0x80
 80009ca:	00db      	lsls	r3, r3, #3
 80009cc:	04d2      	lsls	r2, r2, #19
 80009ce:	431a      	orrs	r2, r3
 80009d0:	2300      	movs	r3, #0
 80009d2:	4691      	mov	r9, r2
 80009d4:	4698      	mov	r8, r3
 80009d6:	469a      	mov	sl, r3
 80009d8:	3d7f      	subs	r5, #127	@ 0x7f
 80009da:	027c      	lsls	r4, r7, #9
 80009dc:	007b      	lsls	r3, r7, #1
 80009de:	0a64      	lsrs	r4, r4, #9
 80009e0:	0e1b      	lsrs	r3, r3, #24
 80009e2:	0fff      	lsrs	r7, r7, #31
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d068      	beq.n	8000aba <__aeabi_fmul+0x116>
 80009e8:	2bff      	cmp	r3, #255	@ 0xff
 80009ea:	d021      	beq.n	8000a30 <__aeabi_fmul+0x8c>
 80009ec:	2280      	movs	r2, #128	@ 0x80
 80009ee:	00e4      	lsls	r4, r4, #3
 80009f0:	04d2      	lsls	r2, r2, #19
 80009f2:	4314      	orrs	r4, r2
 80009f4:	4642      	mov	r2, r8
 80009f6:	3b7f      	subs	r3, #127	@ 0x7f
 80009f8:	195b      	adds	r3, r3, r5
 80009fa:	2100      	movs	r1, #0
 80009fc:	1c5d      	adds	r5, r3, #1
 80009fe:	2a0a      	cmp	r2, #10
 8000a00:	dc2e      	bgt.n	8000a60 <__aeabi_fmul+0xbc>
 8000a02:	407e      	eors	r6, r7
 8000a04:	4642      	mov	r2, r8
 8000a06:	2a02      	cmp	r2, #2
 8000a08:	dc23      	bgt.n	8000a52 <__aeabi_fmul+0xae>
 8000a0a:	3a01      	subs	r2, #1
 8000a0c:	2a01      	cmp	r2, #1
 8000a0e:	d900      	bls.n	8000a12 <__aeabi_fmul+0x6e>
 8000a10:	e0bd      	b.n	8000b8e <__aeabi_fmul+0x1ea>
 8000a12:	2902      	cmp	r1, #2
 8000a14:	d06e      	beq.n	8000af4 <__aeabi_fmul+0x150>
 8000a16:	2901      	cmp	r1, #1
 8000a18:	d12c      	bne.n	8000a74 <__aeabi_fmul+0xd0>
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	05c0      	lsls	r0, r0, #23
 8000a20:	07f6      	lsls	r6, r6, #31
 8000a22:	4310      	orrs	r0, r2
 8000a24:	4330      	orrs	r0, r6
 8000a26:	bce0      	pop	{r5, r6, r7}
 8000a28:	46ba      	mov	sl, r7
 8000a2a:	46b1      	mov	r9, r6
 8000a2c:	46a8      	mov	r8, r5
 8000a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a30:	002b      	movs	r3, r5
 8000a32:	33ff      	adds	r3, #255	@ 0xff
 8000a34:	2c00      	cmp	r4, #0
 8000a36:	d065      	beq.n	8000b04 <__aeabi_fmul+0x160>
 8000a38:	2203      	movs	r2, #3
 8000a3a:	4641      	mov	r1, r8
 8000a3c:	4311      	orrs	r1, r2
 8000a3e:	0032      	movs	r2, r6
 8000a40:	3501      	adds	r5, #1
 8000a42:	4688      	mov	r8, r1
 8000a44:	407a      	eors	r2, r7
 8000a46:	35ff      	adds	r5, #255	@ 0xff
 8000a48:	290a      	cmp	r1, #10
 8000a4a:	dd00      	ble.n	8000a4e <__aeabi_fmul+0xaa>
 8000a4c:	e0d8      	b.n	8000c00 <__aeabi_fmul+0x25c>
 8000a4e:	0016      	movs	r6, r2
 8000a50:	2103      	movs	r1, #3
 8000a52:	4640      	mov	r0, r8
 8000a54:	2201      	movs	r2, #1
 8000a56:	4082      	lsls	r2, r0
 8000a58:	20a6      	movs	r0, #166	@ 0xa6
 8000a5a:	00c0      	lsls	r0, r0, #3
 8000a5c:	4202      	tst	r2, r0
 8000a5e:	d020      	beq.n	8000aa2 <__aeabi_fmul+0xfe>
 8000a60:	4653      	mov	r3, sl
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d046      	beq.n	8000af4 <__aeabi_fmul+0x150>
 8000a66:	2b03      	cmp	r3, #3
 8000a68:	d100      	bne.n	8000a6c <__aeabi_fmul+0xc8>
 8000a6a:	e0bb      	b.n	8000be4 <__aeabi_fmul+0x240>
 8000a6c:	4651      	mov	r1, sl
 8000a6e:	464c      	mov	r4, r9
 8000a70:	2901      	cmp	r1, #1
 8000a72:	d0d2      	beq.n	8000a1a <__aeabi_fmul+0x76>
 8000a74:	002b      	movs	r3, r5
 8000a76:	337f      	adds	r3, #127	@ 0x7f
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	dd70      	ble.n	8000b5e <__aeabi_fmul+0x1ba>
 8000a7c:	0762      	lsls	r2, r4, #29
 8000a7e:	d004      	beq.n	8000a8a <__aeabi_fmul+0xe6>
 8000a80:	220f      	movs	r2, #15
 8000a82:	4022      	ands	r2, r4
 8000a84:	2a04      	cmp	r2, #4
 8000a86:	d000      	beq.n	8000a8a <__aeabi_fmul+0xe6>
 8000a88:	3404      	adds	r4, #4
 8000a8a:	0122      	lsls	r2, r4, #4
 8000a8c:	d503      	bpl.n	8000a96 <__aeabi_fmul+0xf2>
 8000a8e:	4b63      	ldr	r3, [pc, #396]	@ (8000c1c <__aeabi_fmul+0x278>)
 8000a90:	401c      	ands	r4, r3
 8000a92:	002b      	movs	r3, r5
 8000a94:	3380      	adds	r3, #128	@ 0x80
 8000a96:	2bfe      	cmp	r3, #254	@ 0xfe
 8000a98:	dc2c      	bgt.n	8000af4 <__aeabi_fmul+0x150>
 8000a9a:	01a2      	lsls	r2, r4, #6
 8000a9c:	0a52      	lsrs	r2, r2, #9
 8000a9e:	b2d8      	uxtb	r0, r3
 8000aa0:	e7bd      	b.n	8000a1e <__aeabi_fmul+0x7a>
 8000aa2:	2090      	movs	r0, #144	@ 0x90
 8000aa4:	0080      	lsls	r0, r0, #2
 8000aa6:	4202      	tst	r2, r0
 8000aa8:	d127      	bne.n	8000afa <__aeabi_fmul+0x156>
 8000aaa:	38b9      	subs	r0, #185	@ 0xb9
 8000aac:	38ff      	subs	r0, #255	@ 0xff
 8000aae:	4210      	tst	r0, r2
 8000ab0:	d06d      	beq.n	8000b8e <__aeabi_fmul+0x1ea>
 8000ab2:	003e      	movs	r6, r7
 8000ab4:	46a1      	mov	r9, r4
 8000ab6:	468a      	mov	sl, r1
 8000ab8:	e7d2      	b.n	8000a60 <__aeabi_fmul+0xbc>
 8000aba:	2c00      	cmp	r4, #0
 8000abc:	d141      	bne.n	8000b42 <__aeabi_fmul+0x19e>
 8000abe:	2301      	movs	r3, #1
 8000ac0:	4642      	mov	r2, r8
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	4690      	mov	r8, r2
 8000ac6:	002b      	movs	r3, r5
 8000ac8:	4642      	mov	r2, r8
 8000aca:	2101      	movs	r1, #1
 8000acc:	1c5d      	adds	r5, r3, #1
 8000ace:	2a0a      	cmp	r2, #10
 8000ad0:	dd97      	ble.n	8000a02 <__aeabi_fmul+0x5e>
 8000ad2:	e7c5      	b.n	8000a60 <__aeabi_fmul+0xbc>
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d126      	bne.n	8000b26 <__aeabi_fmul+0x182>
 8000ad8:	2304      	movs	r3, #4
 8000ada:	4698      	mov	r8, r3
 8000adc:	3b03      	subs	r3, #3
 8000ade:	2500      	movs	r5, #0
 8000ae0:	469a      	mov	sl, r3
 8000ae2:	e77a      	b.n	80009da <__aeabi_fmul+0x36>
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d118      	bne.n	8000b1a <__aeabi_fmul+0x176>
 8000ae8:	2308      	movs	r3, #8
 8000aea:	4698      	mov	r8, r3
 8000aec:	3b06      	subs	r3, #6
 8000aee:	25ff      	movs	r5, #255	@ 0xff
 8000af0:	469a      	mov	sl, r3
 8000af2:	e772      	b.n	80009da <__aeabi_fmul+0x36>
 8000af4:	20ff      	movs	r0, #255	@ 0xff
 8000af6:	2200      	movs	r2, #0
 8000af8:	e791      	b.n	8000a1e <__aeabi_fmul+0x7a>
 8000afa:	2280      	movs	r2, #128	@ 0x80
 8000afc:	2600      	movs	r6, #0
 8000afe:	20ff      	movs	r0, #255	@ 0xff
 8000b00:	03d2      	lsls	r2, r2, #15
 8000b02:	e78c      	b.n	8000a1e <__aeabi_fmul+0x7a>
 8000b04:	4641      	mov	r1, r8
 8000b06:	2202      	movs	r2, #2
 8000b08:	3501      	adds	r5, #1
 8000b0a:	4311      	orrs	r1, r2
 8000b0c:	4688      	mov	r8, r1
 8000b0e:	35ff      	adds	r5, #255	@ 0xff
 8000b10:	290a      	cmp	r1, #10
 8000b12:	dca5      	bgt.n	8000a60 <__aeabi_fmul+0xbc>
 8000b14:	2102      	movs	r1, #2
 8000b16:	407e      	eors	r6, r7
 8000b18:	e774      	b.n	8000a04 <__aeabi_fmul+0x60>
 8000b1a:	230c      	movs	r3, #12
 8000b1c:	4698      	mov	r8, r3
 8000b1e:	3b09      	subs	r3, #9
 8000b20:	25ff      	movs	r5, #255	@ 0xff
 8000b22:	469a      	mov	sl, r3
 8000b24:	e759      	b.n	80009da <__aeabi_fmul+0x36>
 8000b26:	0018      	movs	r0, r3
 8000b28:	f000 fa80 	bl	800102c <__clzsi2>
 8000b2c:	464a      	mov	r2, r9
 8000b2e:	1f43      	subs	r3, r0, #5
 8000b30:	2576      	movs	r5, #118	@ 0x76
 8000b32:	409a      	lsls	r2, r3
 8000b34:	2300      	movs	r3, #0
 8000b36:	426d      	negs	r5, r5
 8000b38:	4691      	mov	r9, r2
 8000b3a:	4698      	mov	r8, r3
 8000b3c:	469a      	mov	sl, r3
 8000b3e:	1a2d      	subs	r5, r5, r0
 8000b40:	e74b      	b.n	80009da <__aeabi_fmul+0x36>
 8000b42:	0020      	movs	r0, r4
 8000b44:	f000 fa72 	bl	800102c <__clzsi2>
 8000b48:	4642      	mov	r2, r8
 8000b4a:	1f43      	subs	r3, r0, #5
 8000b4c:	409c      	lsls	r4, r3
 8000b4e:	1a2b      	subs	r3, r5, r0
 8000b50:	3b76      	subs	r3, #118	@ 0x76
 8000b52:	2100      	movs	r1, #0
 8000b54:	1c5d      	adds	r5, r3, #1
 8000b56:	2a0a      	cmp	r2, #10
 8000b58:	dc00      	bgt.n	8000b5c <__aeabi_fmul+0x1b8>
 8000b5a:	e752      	b.n	8000a02 <__aeabi_fmul+0x5e>
 8000b5c:	e780      	b.n	8000a60 <__aeabi_fmul+0xbc>
 8000b5e:	2201      	movs	r2, #1
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	2b1b      	cmp	r3, #27
 8000b64:	dd00      	ble.n	8000b68 <__aeabi_fmul+0x1c4>
 8000b66:	e758      	b.n	8000a1a <__aeabi_fmul+0x76>
 8000b68:	359e      	adds	r5, #158	@ 0x9e
 8000b6a:	0022      	movs	r2, r4
 8000b6c:	40ac      	lsls	r4, r5
 8000b6e:	40da      	lsrs	r2, r3
 8000b70:	1e63      	subs	r3, r4, #1
 8000b72:	419c      	sbcs	r4, r3
 8000b74:	4322      	orrs	r2, r4
 8000b76:	0753      	lsls	r3, r2, #29
 8000b78:	d004      	beq.n	8000b84 <__aeabi_fmul+0x1e0>
 8000b7a:	230f      	movs	r3, #15
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	2b04      	cmp	r3, #4
 8000b80:	d000      	beq.n	8000b84 <__aeabi_fmul+0x1e0>
 8000b82:	3204      	adds	r2, #4
 8000b84:	0153      	lsls	r3, r2, #5
 8000b86:	d537      	bpl.n	8000bf8 <__aeabi_fmul+0x254>
 8000b88:	2001      	movs	r0, #1
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	e747      	b.n	8000a1e <__aeabi_fmul+0x7a>
 8000b8e:	0c21      	lsrs	r1, r4, #16
 8000b90:	464a      	mov	r2, r9
 8000b92:	0424      	lsls	r4, r4, #16
 8000b94:	0c24      	lsrs	r4, r4, #16
 8000b96:	0027      	movs	r7, r4
 8000b98:	0c10      	lsrs	r0, r2, #16
 8000b9a:	0412      	lsls	r2, r2, #16
 8000b9c:	0c12      	lsrs	r2, r2, #16
 8000b9e:	4344      	muls	r4, r0
 8000ba0:	4357      	muls	r7, r2
 8000ba2:	4348      	muls	r0, r1
 8000ba4:	4351      	muls	r1, r2
 8000ba6:	0c3a      	lsrs	r2, r7, #16
 8000ba8:	1909      	adds	r1, r1, r4
 8000baa:	1852      	adds	r2, r2, r1
 8000bac:	4294      	cmp	r4, r2
 8000bae:	d903      	bls.n	8000bb8 <__aeabi_fmul+0x214>
 8000bb0:	2180      	movs	r1, #128	@ 0x80
 8000bb2:	0249      	lsls	r1, r1, #9
 8000bb4:	468c      	mov	ip, r1
 8000bb6:	4460      	add	r0, ip
 8000bb8:	043f      	lsls	r7, r7, #16
 8000bba:	0411      	lsls	r1, r2, #16
 8000bbc:	0c3f      	lsrs	r7, r7, #16
 8000bbe:	19c9      	adds	r1, r1, r7
 8000bc0:	018c      	lsls	r4, r1, #6
 8000bc2:	1e67      	subs	r7, r4, #1
 8000bc4:	41bc      	sbcs	r4, r7
 8000bc6:	0c12      	lsrs	r2, r2, #16
 8000bc8:	0e89      	lsrs	r1, r1, #26
 8000bca:	1812      	adds	r2, r2, r0
 8000bcc:	430c      	orrs	r4, r1
 8000bce:	0192      	lsls	r2, r2, #6
 8000bd0:	4314      	orrs	r4, r2
 8000bd2:	0112      	lsls	r2, r2, #4
 8000bd4:	d50e      	bpl.n	8000bf4 <__aeabi_fmul+0x250>
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	0862      	lsrs	r2, r4, #1
 8000bda:	401c      	ands	r4, r3
 8000bdc:	4314      	orrs	r4, r2
 8000bde:	e749      	b.n	8000a74 <__aeabi_fmul+0xd0>
 8000be0:	003e      	movs	r6, r7
 8000be2:	46a1      	mov	r9, r4
 8000be4:	2280      	movs	r2, #128	@ 0x80
 8000be6:	464b      	mov	r3, r9
 8000be8:	03d2      	lsls	r2, r2, #15
 8000bea:	431a      	orrs	r2, r3
 8000bec:	0252      	lsls	r2, r2, #9
 8000bee:	20ff      	movs	r0, #255	@ 0xff
 8000bf0:	0a52      	lsrs	r2, r2, #9
 8000bf2:	e714      	b.n	8000a1e <__aeabi_fmul+0x7a>
 8000bf4:	001d      	movs	r5, r3
 8000bf6:	e73d      	b.n	8000a74 <__aeabi_fmul+0xd0>
 8000bf8:	0192      	lsls	r2, r2, #6
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	0a52      	lsrs	r2, r2, #9
 8000bfe:	e70e      	b.n	8000a1e <__aeabi_fmul+0x7a>
 8000c00:	290f      	cmp	r1, #15
 8000c02:	d1ed      	bne.n	8000be0 <__aeabi_fmul+0x23c>
 8000c04:	2280      	movs	r2, #128	@ 0x80
 8000c06:	464b      	mov	r3, r9
 8000c08:	03d2      	lsls	r2, r2, #15
 8000c0a:	4213      	tst	r3, r2
 8000c0c:	d0ea      	beq.n	8000be4 <__aeabi_fmul+0x240>
 8000c0e:	4214      	tst	r4, r2
 8000c10:	d1e8      	bne.n	8000be4 <__aeabi_fmul+0x240>
 8000c12:	003e      	movs	r6, r7
 8000c14:	20ff      	movs	r0, #255	@ 0xff
 8000c16:	4322      	orrs	r2, r4
 8000c18:	e701      	b.n	8000a1e <__aeabi_fmul+0x7a>
 8000c1a:	46c0      	nop			@ (mov r8, r8)
 8000c1c:	f7ffffff 	.word	0xf7ffffff

08000c20 <__aeabi_fsub>:
 8000c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c22:	4647      	mov	r7, r8
 8000c24:	46ce      	mov	lr, r9
 8000c26:	024e      	lsls	r6, r1, #9
 8000c28:	0243      	lsls	r3, r0, #9
 8000c2a:	0045      	lsls	r5, r0, #1
 8000c2c:	0a72      	lsrs	r2, r6, #9
 8000c2e:	0fc4      	lsrs	r4, r0, #31
 8000c30:	0048      	lsls	r0, r1, #1
 8000c32:	b580      	push	{r7, lr}
 8000c34:	4694      	mov	ip, r2
 8000c36:	0a5f      	lsrs	r7, r3, #9
 8000c38:	0e2d      	lsrs	r5, r5, #24
 8000c3a:	099b      	lsrs	r3, r3, #6
 8000c3c:	0e00      	lsrs	r0, r0, #24
 8000c3e:	0fc9      	lsrs	r1, r1, #31
 8000c40:	09b6      	lsrs	r6, r6, #6
 8000c42:	28ff      	cmp	r0, #255	@ 0xff
 8000c44:	d024      	beq.n	8000c90 <__aeabi_fsub+0x70>
 8000c46:	2201      	movs	r2, #1
 8000c48:	4051      	eors	r1, r2
 8000c4a:	1a2a      	subs	r2, r5, r0
 8000c4c:	428c      	cmp	r4, r1
 8000c4e:	d00f      	beq.n	8000c70 <__aeabi_fsub+0x50>
 8000c50:	2a00      	cmp	r2, #0
 8000c52:	dc00      	bgt.n	8000c56 <__aeabi_fsub+0x36>
 8000c54:	e16a      	b.n	8000f2c <__aeabi_fsub+0x30c>
 8000c56:	2800      	cmp	r0, #0
 8000c58:	d135      	bne.n	8000cc6 <__aeabi_fsub+0xa6>
 8000c5a:	2e00      	cmp	r6, #0
 8000c5c:	d100      	bne.n	8000c60 <__aeabi_fsub+0x40>
 8000c5e:	e0a2      	b.n	8000da6 <__aeabi_fsub+0x186>
 8000c60:	1e51      	subs	r1, r2, #1
 8000c62:	2a01      	cmp	r2, #1
 8000c64:	d100      	bne.n	8000c68 <__aeabi_fsub+0x48>
 8000c66:	e124      	b.n	8000eb2 <__aeabi_fsub+0x292>
 8000c68:	2aff      	cmp	r2, #255	@ 0xff
 8000c6a:	d021      	beq.n	8000cb0 <__aeabi_fsub+0x90>
 8000c6c:	000a      	movs	r2, r1
 8000c6e:	e02f      	b.n	8000cd0 <__aeabi_fsub+0xb0>
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	dc00      	bgt.n	8000c76 <__aeabi_fsub+0x56>
 8000c74:	e167      	b.n	8000f46 <__aeabi_fsub+0x326>
 8000c76:	2800      	cmp	r0, #0
 8000c78:	d05e      	beq.n	8000d38 <__aeabi_fsub+0x118>
 8000c7a:	2dff      	cmp	r5, #255	@ 0xff
 8000c7c:	d018      	beq.n	8000cb0 <__aeabi_fsub+0x90>
 8000c7e:	2180      	movs	r1, #128	@ 0x80
 8000c80:	04c9      	lsls	r1, r1, #19
 8000c82:	430e      	orrs	r6, r1
 8000c84:	2a1b      	cmp	r2, #27
 8000c86:	dc00      	bgt.n	8000c8a <__aeabi_fsub+0x6a>
 8000c88:	e076      	b.n	8000d78 <__aeabi_fsub+0x158>
 8000c8a:	002a      	movs	r2, r5
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	e032      	b.n	8000cf6 <__aeabi_fsub+0xd6>
 8000c90:	002a      	movs	r2, r5
 8000c92:	3aff      	subs	r2, #255	@ 0xff
 8000c94:	4691      	mov	r9, r2
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d042      	beq.n	8000d20 <__aeabi_fsub+0x100>
 8000c9a:	428c      	cmp	r4, r1
 8000c9c:	d055      	beq.n	8000d4a <__aeabi_fsub+0x12a>
 8000c9e:	464a      	mov	r2, r9
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	d100      	bne.n	8000ca6 <__aeabi_fsub+0x86>
 8000ca4:	e09c      	b.n	8000de0 <__aeabi_fsub+0x1c0>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	d100      	bne.n	8000cac <__aeabi_fsub+0x8c>
 8000caa:	e077      	b.n	8000d9c <__aeabi_fsub+0x17c>
 8000cac:	000c      	movs	r4, r1
 8000cae:	0033      	movs	r3, r6
 8000cb0:	08db      	lsrs	r3, r3, #3
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d100      	bne.n	8000cb8 <__aeabi_fsub+0x98>
 8000cb6:	e06e      	b.n	8000d96 <__aeabi_fsub+0x176>
 8000cb8:	2280      	movs	r2, #128	@ 0x80
 8000cba:	03d2      	lsls	r2, r2, #15
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	025b      	lsls	r3, r3, #9
 8000cc0:	20ff      	movs	r0, #255	@ 0xff
 8000cc2:	0a5b      	lsrs	r3, r3, #9
 8000cc4:	e024      	b.n	8000d10 <__aeabi_fsub+0xf0>
 8000cc6:	2dff      	cmp	r5, #255	@ 0xff
 8000cc8:	d0f2      	beq.n	8000cb0 <__aeabi_fsub+0x90>
 8000cca:	2180      	movs	r1, #128	@ 0x80
 8000ccc:	04c9      	lsls	r1, r1, #19
 8000cce:	430e      	orrs	r6, r1
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	2a1b      	cmp	r2, #27
 8000cd4:	dc08      	bgt.n	8000ce8 <__aeabi_fsub+0xc8>
 8000cd6:	0031      	movs	r1, r6
 8000cd8:	2020      	movs	r0, #32
 8000cda:	40d1      	lsrs	r1, r2
 8000cdc:	1a82      	subs	r2, r0, r2
 8000cde:	4096      	lsls	r6, r2
 8000ce0:	0032      	movs	r2, r6
 8000ce2:	1e50      	subs	r0, r2, #1
 8000ce4:	4182      	sbcs	r2, r0
 8000ce6:	4311      	orrs	r1, r2
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	015a      	lsls	r2, r3, #5
 8000cec:	d460      	bmi.n	8000db0 <__aeabi_fsub+0x190>
 8000cee:	2107      	movs	r1, #7
 8000cf0:	002a      	movs	r2, r5
 8000cf2:	4019      	ands	r1, r3
 8000cf4:	d057      	beq.n	8000da6 <__aeabi_fsub+0x186>
 8000cf6:	210f      	movs	r1, #15
 8000cf8:	4019      	ands	r1, r3
 8000cfa:	2904      	cmp	r1, #4
 8000cfc:	d000      	beq.n	8000d00 <__aeabi_fsub+0xe0>
 8000cfe:	3304      	adds	r3, #4
 8000d00:	0159      	lsls	r1, r3, #5
 8000d02:	d550      	bpl.n	8000da6 <__aeabi_fsub+0x186>
 8000d04:	1c50      	adds	r0, r2, #1
 8000d06:	2afe      	cmp	r2, #254	@ 0xfe
 8000d08:	d045      	beq.n	8000d96 <__aeabi_fsub+0x176>
 8000d0a:	019b      	lsls	r3, r3, #6
 8000d0c:	b2c0      	uxtb	r0, r0
 8000d0e:	0a5b      	lsrs	r3, r3, #9
 8000d10:	05c0      	lsls	r0, r0, #23
 8000d12:	4318      	orrs	r0, r3
 8000d14:	07e4      	lsls	r4, r4, #31
 8000d16:	4320      	orrs	r0, r4
 8000d18:	bcc0      	pop	{r6, r7}
 8000d1a:	46b9      	mov	r9, r7
 8000d1c:	46b0      	mov	r8, r6
 8000d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d20:	2201      	movs	r2, #1
 8000d22:	4051      	eors	r1, r2
 8000d24:	428c      	cmp	r4, r1
 8000d26:	d1ba      	bne.n	8000c9e <__aeabi_fsub+0x7e>
 8000d28:	464a      	mov	r2, r9
 8000d2a:	2a00      	cmp	r2, #0
 8000d2c:	d010      	beq.n	8000d50 <__aeabi_fsub+0x130>
 8000d2e:	2d00      	cmp	r5, #0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_fsub+0x114>
 8000d32:	e098      	b.n	8000e66 <__aeabi_fsub+0x246>
 8000d34:	2300      	movs	r3, #0
 8000d36:	e7bb      	b.n	8000cb0 <__aeabi_fsub+0x90>
 8000d38:	2e00      	cmp	r6, #0
 8000d3a:	d034      	beq.n	8000da6 <__aeabi_fsub+0x186>
 8000d3c:	1e51      	subs	r1, r2, #1
 8000d3e:	2a01      	cmp	r2, #1
 8000d40:	d06e      	beq.n	8000e20 <__aeabi_fsub+0x200>
 8000d42:	2aff      	cmp	r2, #255	@ 0xff
 8000d44:	d0b4      	beq.n	8000cb0 <__aeabi_fsub+0x90>
 8000d46:	000a      	movs	r2, r1
 8000d48:	e79c      	b.n	8000c84 <__aeabi_fsub+0x64>
 8000d4a:	2a00      	cmp	r2, #0
 8000d4c:	d000      	beq.n	8000d50 <__aeabi_fsub+0x130>
 8000d4e:	e088      	b.n	8000e62 <__aeabi_fsub+0x242>
 8000d50:	20fe      	movs	r0, #254	@ 0xfe
 8000d52:	1c6a      	adds	r2, r5, #1
 8000d54:	4210      	tst	r0, r2
 8000d56:	d000      	beq.n	8000d5a <__aeabi_fsub+0x13a>
 8000d58:	e092      	b.n	8000e80 <__aeabi_fsub+0x260>
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d000      	beq.n	8000d60 <__aeabi_fsub+0x140>
 8000d5e:	e0a4      	b.n	8000eaa <__aeabi_fsub+0x28a>
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d100      	bne.n	8000d66 <__aeabi_fsub+0x146>
 8000d64:	e0cb      	b.n	8000efe <__aeabi_fsub+0x2de>
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d000      	beq.n	8000d6c <__aeabi_fsub+0x14c>
 8000d6a:	e0ca      	b.n	8000f02 <__aeabi_fsub+0x2e2>
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	08db      	lsrs	r3, r3, #3
 8000d70:	025b      	lsls	r3, r3, #9
 8000d72:	0a5b      	lsrs	r3, r3, #9
 8000d74:	b2d0      	uxtb	r0, r2
 8000d76:	e7cb      	b.n	8000d10 <__aeabi_fsub+0xf0>
 8000d78:	0031      	movs	r1, r6
 8000d7a:	2020      	movs	r0, #32
 8000d7c:	40d1      	lsrs	r1, r2
 8000d7e:	1a82      	subs	r2, r0, r2
 8000d80:	4096      	lsls	r6, r2
 8000d82:	0032      	movs	r2, r6
 8000d84:	1e50      	subs	r0, r2, #1
 8000d86:	4182      	sbcs	r2, r0
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	189b      	adds	r3, r3, r2
 8000d8c:	015a      	lsls	r2, r3, #5
 8000d8e:	d5ae      	bpl.n	8000cee <__aeabi_fsub+0xce>
 8000d90:	1c6a      	adds	r2, r5, #1
 8000d92:	2dfe      	cmp	r5, #254	@ 0xfe
 8000d94:	d14a      	bne.n	8000e2c <__aeabi_fsub+0x20c>
 8000d96:	20ff      	movs	r0, #255	@ 0xff
 8000d98:	2300      	movs	r3, #0
 8000d9a:	e7b9      	b.n	8000d10 <__aeabi_fsub+0xf0>
 8000d9c:	22ff      	movs	r2, #255	@ 0xff
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d14b      	bne.n	8000e3a <__aeabi_fsub+0x21a>
 8000da2:	000c      	movs	r4, r1
 8000da4:	0033      	movs	r3, r6
 8000da6:	08db      	lsrs	r3, r3, #3
 8000da8:	2aff      	cmp	r2, #255	@ 0xff
 8000daa:	d100      	bne.n	8000dae <__aeabi_fsub+0x18e>
 8000dac:	e781      	b.n	8000cb2 <__aeabi_fsub+0x92>
 8000dae:	e7df      	b.n	8000d70 <__aeabi_fsub+0x150>
 8000db0:	019f      	lsls	r7, r3, #6
 8000db2:	09bf      	lsrs	r7, r7, #6
 8000db4:	0038      	movs	r0, r7
 8000db6:	f000 f939 	bl	800102c <__clzsi2>
 8000dba:	3805      	subs	r0, #5
 8000dbc:	4087      	lsls	r7, r0
 8000dbe:	4285      	cmp	r5, r0
 8000dc0:	dc21      	bgt.n	8000e06 <__aeabi_fsub+0x1e6>
 8000dc2:	003b      	movs	r3, r7
 8000dc4:	2120      	movs	r1, #32
 8000dc6:	1b42      	subs	r2, r0, r5
 8000dc8:	3201      	adds	r2, #1
 8000dca:	40d3      	lsrs	r3, r2
 8000dcc:	1a8a      	subs	r2, r1, r2
 8000dce:	4097      	lsls	r7, r2
 8000dd0:	1e7a      	subs	r2, r7, #1
 8000dd2:	4197      	sbcs	r7, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	433b      	orrs	r3, r7
 8000dd8:	0759      	lsls	r1, r3, #29
 8000dda:	d000      	beq.n	8000dde <__aeabi_fsub+0x1be>
 8000ddc:	e78b      	b.n	8000cf6 <__aeabi_fsub+0xd6>
 8000dde:	e78f      	b.n	8000d00 <__aeabi_fsub+0xe0>
 8000de0:	20fe      	movs	r0, #254	@ 0xfe
 8000de2:	1c6a      	adds	r2, r5, #1
 8000de4:	4210      	tst	r0, r2
 8000de6:	d112      	bne.n	8000e0e <__aeabi_fsub+0x1ee>
 8000de8:	2d00      	cmp	r5, #0
 8000dea:	d152      	bne.n	8000e92 <__aeabi_fsub+0x272>
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d07c      	beq.n	8000eea <__aeabi_fsub+0x2ca>
 8000df0:	2e00      	cmp	r6, #0
 8000df2:	d0bb      	beq.n	8000d6c <__aeabi_fsub+0x14c>
 8000df4:	1b9a      	subs	r2, r3, r6
 8000df6:	0150      	lsls	r0, r2, #5
 8000df8:	d400      	bmi.n	8000dfc <__aeabi_fsub+0x1dc>
 8000dfa:	e08b      	b.n	8000f14 <__aeabi_fsub+0x2f4>
 8000dfc:	2401      	movs	r4, #1
 8000dfe:	2200      	movs	r2, #0
 8000e00:	1af3      	subs	r3, r6, r3
 8000e02:	400c      	ands	r4, r1
 8000e04:	e7e8      	b.n	8000dd8 <__aeabi_fsub+0x1b8>
 8000e06:	4b56      	ldr	r3, [pc, #344]	@ (8000f60 <__aeabi_fsub+0x340>)
 8000e08:	1a2a      	subs	r2, r5, r0
 8000e0a:	403b      	ands	r3, r7
 8000e0c:	e7e4      	b.n	8000dd8 <__aeabi_fsub+0x1b8>
 8000e0e:	1b9f      	subs	r7, r3, r6
 8000e10:	017a      	lsls	r2, r7, #5
 8000e12:	d446      	bmi.n	8000ea2 <__aeabi_fsub+0x282>
 8000e14:	2f00      	cmp	r7, #0
 8000e16:	d1cd      	bne.n	8000db4 <__aeabi_fsub+0x194>
 8000e18:	2400      	movs	r4, #0
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	e777      	b.n	8000d10 <__aeabi_fsub+0xf0>
 8000e20:	199b      	adds	r3, r3, r6
 8000e22:	2501      	movs	r5, #1
 8000e24:	3201      	adds	r2, #1
 8000e26:	0159      	lsls	r1, r3, #5
 8000e28:	d400      	bmi.n	8000e2c <__aeabi_fsub+0x20c>
 8000e2a:	e760      	b.n	8000cee <__aeabi_fsub+0xce>
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	484d      	ldr	r0, [pc, #308]	@ (8000f64 <__aeabi_fsub+0x344>)
 8000e30:	4019      	ands	r1, r3
 8000e32:	085b      	lsrs	r3, r3, #1
 8000e34:	4003      	ands	r3, r0
 8000e36:	430b      	orrs	r3, r1
 8000e38:	e7ce      	b.n	8000dd8 <__aeabi_fsub+0x1b8>
 8000e3a:	1e57      	subs	r7, r2, #1
 8000e3c:	2a01      	cmp	r2, #1
 8000e3e:	d05a      	beq.n	8000ef6 <__aeabi_fsub+0x2d6>
 8000e40:	000c      	movs	r4, r1
 8000e42:	2aff      	cmp	r2, #255	@ 0xff
 8000e44:	d033      	beq.n	8000eae <__aeabi_fsub+0x28e>
 8000e46:	2201      	movs	r2, #1
 8000e48:	2f1b      	cmp	r7, #27
 8000e4a:	dc07      	bgt.n	8000e5c <__aeabi_fsub+0x23c>
 8000e4c:	2120      	movs	r1, #32
 8000e4e:	1bc9      	subs	r1, r1, r7
 8000e50:	001a      	movs	r2, r3
 8000e52:	408b      	lsls	r3, r1
 8000e54:	40fa      	lsrs	r2, r7
 8000e56:	1e59      	subs	r1, r3, #1
 8000e58:	418b      	sbcs	r3, r1
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	0005      	movs	r5, r0
 8000e5e:	1ab3      	subs	r3, r6, r2
 8000e60:	e743      	b.n	8000cea <__aeabi_fsub+0xca>
 8000e62:	2d00      	cmp	r5, #0
 8000e64:	d123      	bne.n	8000eae <__aeabi_fsub+0x28e>
 8000e66:	22ff      	movs	r2, #255	@ 0xff
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d09b      	beq.n	8000da4 <__aeabi_fsub+0x184>
 8000e6c:	1e51      	subs	r1, r2, #1
 8000e6e:	2a01      	cmp	r2, #1
 8000e70:	d0d6      	beq.n	8000e20 <__aeabi_fsub+0x200>
 8000e72:	2aff      	cmp	r2, #255	@ 0xff
 8000e74:	d01b      	beq.n	8000eae <__aeabi_fsub+0x28e>
 8000e76:	291b      	cmp	r1, #27
 8000e78:	dd2c      	ble.n	8000ed4 <__aeabi_fsub+0x2b4>
 8000e7a:	0002      	movs	r2, r0
 8000e7c:	1c73      	adds	r3, r6, #1
 8000e7e:	e73a      	b.n	8000cf6 <__aeabi_fsub+0xd6>
 8000e80:	2aff      	cmp	r2, #255	@ 0xff
 8000e82:	d088      	beq.n	8000d96 <__aeabi_fsub+0x176>
 8000e84:	199b      	adds	r3, r3, r6
 8000e86:	085b      	lsrs	r3, r3, #1
 8000e88:	0759      	lsls	r1, r3, #29
 8000e8a:	d000      	beq.n	8000e8e <__aeabi_fsub+0x26e>
 8000e8c:	e733      	b.n	8000cf6 <__aeabi_fsub+0xd6>
 8000e8e:	08db      	lsrs	r3, r3, #3
 8000e90:	e76e      	b.n	8000d70 <__aeabi_fsub+0x150>
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d110      	bne.n	8000eb8 <__aeabi_fsub+0x298>
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d043      	beq.n	8000f22 <__aeabi_fsub+0x302>
 8000e9a:	2401      	movs	r4, #1
 8000e9c:	0033      	movs	r3, r6
 8000e9e:	400c      	ands	r4, r1
 8000ea0:	e706      	b.n	8000cb0 <__aeabi_fsub+0x90>
 8000ea2:	2401      	movs	r4, #1
 8000ea4:	1af7      	subs	r7, r6, r3
 8000ea6:	400c      	ands	r4, r1
 8000ea8:	e784      	b.n	8000db4 <__aeabi_fsub+0x194>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d104      	bne.n	8000eb8 <__aeabi_fsub+0x298>
 8000eae:	0033      	movs	r3, r6
 8000eb0:	e6fe      	b.n	8000cb0 <__aeabi_fsub+0x90>
 8000eb2:	2501      	movs	r5, #1
 8000eb4:	1b9b      	subs	r3, r3, r6
 8000eb6:	e718      	b.n	8000cea <__aeabi_fsub+0xca>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d100      	bne.n	8000ebe <__aeabi_fsub+0x29e>
 8000ebc:	e6f8      	b.n	8000cb0 <__aeabi_fsub+0x90>
 8000ebe:	2280      	movs	r2, #128	@ 0x80
 8000ec0:	03d2      	lsls	r2, r2, #15
 8000ec2:	4297      	cmp	r7, r2
 8000ec4:	d304      	bcc.n	8000ed0 <__aeabi_fsub+0x2b0>
 8000ec6:	4594      	cmp	ip, r2
 8000ec8:	d202      	bcs.n	8000ed0 <__aeabi_fsub+0x2b0>
 8000eca:	2401      	movs	r4, #1
 8000ecc:	0033      	movs	r3, r6
 8000ece:	400c      	ands	r4, r1
 8000ed0:	08db      	lsrs	r3, r3, #3
 8000ed2:	e6f1      	b.n	8000cb8 <__aeabi_fsub+0x98>
 8000ed4:	001a      	movs	r2, r3
 8000ed6:	2520      	movs	r5, #32
 8000ed8:	40ca      	lsrs	r2, r1
 8000eda:	1a69      	subs	r1, r5, r1
 8000edc:	408b      	lsls	r3, r1
 8000ede:	1e59      	subs	r1, r3, #1
 8000ee0:	418b      	sbcs	r3, r1
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	0005      	movs	r5, r0
 8000ee6:	199b      	adds	r3, r3, r6
 8000ee8:	e750      	b.n	8000d8c <__aeabi_fsub+0x16c>
 8000eea:	2e00      	cmp	r6, #0
 8000eec:	d094      	beq.n	8000e18 <__aeabi_fsub+0x1f8>
 8000eee:	2401      	movs	r4, #1
 8000ef0:	0033      	movs	r3, r6
 8000ef2:	400c      	ands	r4, r1
 8000ef4:	e73a      	b.n	8000d6c <__aeabi_fsub+0x14c>
 8000ef6:	000c      	movs	r4, r1
 8000ef8:	2501      	movs	r5, #1
 8000efa:	1af3      	subs	r3, r6, r3
 8000efc:	e6f5      	b.n	8000cea <__aeabi_fsub+0xca>
 8000efe:	0033      	movs	r3, r6
 8000f00:	e734      	b.n	8000d6c <__aeabi_fsub+0x14c>
 8000f02:	199b      	adds	r3, r3, r6
 8000f04:	2200      	movs	r2, #0
 8000f06:	0159      	lsls	r1, r3, #5
 8000f08:	d5c1      	bpl.n	8000e8e <__aeabi_fsub+0x26e>
 8000f0a:	4a15      	ldr	r2, [pc, #84]	@ (8000f60 <__aeabi_fsub+0x340>)
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	08db      	lsrs	r3, r3, #3
 8000f10:	2201      	movs	r2, #1
 8000f12:	e72d      	b.n	8000d70 <__aeabi_fsub+0x150>
 8000f14:	2a00      	cmp	r2, #0
 8000f16:	d100      	bne.n	8000f1a <__aeabi_fsub+0x2fa>
 8000f18:	e77e      	b.n	8000e18 <__aeabi_fsub+0x1f8>
 8000f1a:	0013      	movs	r3, r2
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	08db      	lsrs	r3, r3, #3
 8000f20:	e726      	b.n	8000d70 <__aeabi_fsub+0x150>
 8000f22:	2380      	movs	r3, #128	@ 0x80
 8000f24:	2400      	movs	r4, #0
 8000f26:	20ff      	movs	r0, #255	@ 0xff
 8000f28:	03db      	lsls	r3, r3, #15
 8000f2a:	e6f1      	b.n	8000d10 <__aeabi_fsub+0xf0>
 8000f2c:	2a00      	cmp	r2, #0
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_fsub+0x312>
 8000f30:	e756      	b.n	8000de0 <__aeabi_fsub+0x1c0>
 8000f32:	1b47      	subs	r7, r0, r5
 8000f34:	003a      	movs	r2, r7
 8000f36:	2d00      	cmp	r5, #0
 8000f38:	d100      	bne.n	8000f3c <__aeabi_fsub+0x31c>
 8000f3a:	e730      	b.n	8000d9e <__aeabi_fsub+0x17e>
 8000f3c:	2280      	movs	r2, #128	@ 0x80
 8000f3e:	04d2      	lsls	r2, r2, #19
 8000f40:	000c      	movs	r4, r1
 8000f42:	4313      	orrs	r3, r2
 8000f44:	e77f      	b.n	8000e46 <__aeabi_fsub+0x226>
 8000f46:	2a00      	cmp	r2, #0
 8000f48:	d100      	bne.n	8000f4c <__aeabi_fsub+0x32c>
 8000f4a:	e701      	b.n	8000d50 <__aeabi_fsub+0x130>
 8000f4c:	1b41      	subs	r1, r0, r5
 8000f4e:	2d00      	cmp	r5, #0
 8000f50:	d101      	bne.n	8000f56 <__aeabi_fsub+0x336>
 8000f52:	000a      	movs	r2, r1
 8000f54:	e788      	b.n	8000e68 <__aeabi_fsub+0x248>
 8000f56:	2280      	movs	r2, #128	@ 0x80
 8000f58:	04d2      	lsls	r2, r2, #19
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	e78b      	b.n	8000e76 <__aeabi_fsub+0x256>
 8000f5e:	46c0      	nop			@ (mov r8, r8)
 8000f60:	fbffffff 	.word	0xfbffffff
 8000f64:	7dffffff 	.word	0x7dffffff

08000f68 <__aeabi_f2iz>:
 8000f68:	0241      	lsls	r1, r0, #9
 8000f6a:	0042      	lsls	r2, r0, #1
 8000f6c:	0fc3      	lsrs	r3, r0, #31
 8000f6e:	0a49      	lsrs	r1, r1, #9
 8000f70:	2000      	movs	r0, #0
 8000f72:	0e12      	lsrs	r2, r2, #24
 8000f74:	2a7e      	cmp	r2, #126	@ 0x7e
 8000f76:	dd03      	ble.n	8000f80 <__aeabi_f2iz+0x18>
 8000f78:	2a9d      	cmp	r2, #157	@ 0x9d
 8000f7a:	dd02      	ble.n	8000f82 <__aeabi_f2iz+0x1a>
 8000f7c:	4a09      	ldr	r2, [pc, #36]	@ (8000fa4 <__aeabi_f2iz+0x3c>)
 8000f7e:	1898      	adds	r0, r3, r2
 8000f80:	4770      	bx	lr
 8000f82:	2080      	movs	r0, #128	@ 0x80
 8000f84:	0400      	lsls	r0, r0, #16
 8000f86:	4301      	orrs	r1, r0
 8000f88:	2a95      	cmp	r2, #149	@ 0x95
 8000f8a:	dc07      	bgt.n	8000f9c <__aeabi_f2iz+0x34>
 8000f8c:	2096      	movs	r0, #150	@ 0x96
 8000f8e:	1a82      	subs	r2, r0, r2
 8000f90:	40d1      	lsrs	r1, r2
 8000f92:	4248      	negs	r0, r1
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d1f3      	bne.n	8000f80 <__aeabi_f2iz+0x18>
 8000f98:	0008      	movs	r0, r1
 8000f9a:	e7f1      	b.n	8000f80 <__aeabi_f2iz+0x18>
 8000f9c:	3a96      	subs	r2, #150	@ 0x96
 8000f9e:	4091      	lsls	r1, r2
 8000fa0:	e7f7      	b.n	8000f92 <__aeabi_f2iz+0x2a>
 8000fa2:	46c0      	nop			@ (mov r8, r8)
 8000fa4:	7fffffff 	.word	0x7fffffff

08000fa8 <__aeabi_ui2f>:
 8000fa8:	b570      	push	{r4, r5, r6, lr}
 8000faa:	1e04      	subs	r4, r0, #0
 8000fac:	d00e      	beq.n	8000fcc <__aeabi_ui2f+0x24>
 8000fae:	f000 f83d 	bl	800102c <__clzsi2>
 8000fb2:	239e      	movs	r3, #158	@ 0x9e
 8000fb4:	0001      	movs	r1, r0
 8000fb6:	1a1b      	subs	r3, r3, r0
 8000fb8:	2b96      	cmp	r3, #150	@ 0x96
 8000fba:	dc0c      	bgt.n	8000fd6 <__aeabi_ui2f+0x2e>
 8000fbc:	2808      	cmp	r0, #8
 8000fbe:	d02f      	beq.n	8001020 <__aeabi_ui2f+0x78>
 8000fc0:	3908      	subs	r1, #8
 8000fc2:	408c      	lsls	r4, r1
 8000fc4:	0264      	lsls	r4, r4, #9
 8000fc6:	0a64      	lsrs	r4, r4, #9
 8000fc8:	b2d8      	uxtb	r0, r3
 8000fca:	e001      	b.n	8000fd0 <__aeabi_ui2f+0x28>
 8000fcc:	2000      	movs	r0, #0
 8000fce:	2400      	movs	r4, #0
 8000fd0:	05c0      	lsls	r0, r0, #23
 8000fd2:	4320      	orrs	r0, r4
 8000fd4:	bd70      	pop	{r4, r5, r6, pc}
 8000fd6:	2b99      	cmp	r3, #153	@ 0x99
 8000fd8:	dc16      	bgt.n	8001008 <__aeabi_ui2f+0x60>
 8000fda:	1f42      	subs	r2, r0, #5
 8000fdc:	2805      	cmp	r0, #5
 8000fde:	d000      	beq.n	8000fe2 <__aeabi_ui2f+0x3a>
 8000fe0:	4094      	lsls	r4, r2
 8000fe2:	0022      	movs	r2, r4
 8000fe4:	4810      	ldr	r0, [pc, #64]	@ (8001028 <__aeabi_ui2f+0x80>)
 8000fe6:	4002      	ands	r2, r0
 8000fe8:	0765      	lsls	r5, r4, #29
 8000fea:	d009      	beq.n	8001000 <__aeabi_ui2f+0x58>
 8000fec:	250f      	movs	r5, #15
 8000fee:	402c      	ands	r4, r5
 8000ff0:	2c04      	cmp	r4, #4
 8000ff2:	d005      	beq.n	8001000 <__aeabi_ui2f+0x58>
 8000ff4:	3204      	adds	r2, #4
 8000ff6:	0154      	lsls	r4, r2, #5
 8000ff8:	d502      	bpl.n	8001000 <__aeabi_ui2f+0x58>
 8000ffa:	239f      	movs	r3, #159	@ 0x9f
 8000ffc:	4002      	ands	r2, r0
 8000ffe:	1a5b      	subs	r3, r3, r1
 8001000:	0192      	lsls	r2, r2, #6
 8001002:	0a54      	lsrs	r4, r2, #9
 8001004:	b2d8      	uxtb	r0, r3
 8001006:	e7e3      	b.n	8000fd0 <__aeabi_ui2f+0x28>
 8001008:	0002      	movs	r2, r0
 800100a:	0020      	movs	r0, r4
 800100c:	321b      	adds	r2, #27
 800100e:	4090      	lsls	r0, r2
 8001010:	0002      	movs	r2, r0
 8001012:	1e50      	subs	r0, r2, #1
 8001014:	4182      	sbcs	r2, r0
 8001016:	2005      	movs	r0, #5
 8001018:	1a40      	subs	r0, r0, r1
 800101a:	40c4      	lsrs	r4, r0
 800101c:	4314      	orrs	r4, r2
 800101e:	e7e0      	b.n	8000fe2 <__aeabi_ui2f+0x3a>
 8001020:	0264      	lsls	r4, r4, #9
 8001022:	2096      	movs	r0, #150	@ 0x96
 8001024:	0a64      	lsrs	r4, r4, #9
 8001026:	e7d3      	b.n	8000fd0 <__aeabi_ui2f+0x28>
 8001028:	fbffffff 	.word	0xfbffffff

0800102c <__clzsi2>:
 800102c:	211c      	movs	r1, #28
 800102e:	2301      	movs	r3, #1
 8001030:	041b      	lsls	r3, r3, #16
 8001032:	4298      	cmp	r0, r3
 8001034:	d301      	bcc.n	800103a <__clzsi2+0xe>
 8001036:	0c00      	lsrs	r0, r0, #16
 8001038:	3910      	subs	r1, #16
 800103a:	0a1b      	lsrs	r3, r3, #8
 800103c:	4298      	cmp	r0, r3
 800103e:	d301      	bcc.n	8001044 <__clzsi2+0x18>
 8001040:	0a00      	lsrs	r0, r0, #8
 8001042:	3908      	subs	r1, #8
 8001044:	091b      	lsrs	r3, r3, #4
 8001046:	4298      	cmp	r0, r3
 8001048:	d301      	bcc.n	800104e <__clzsi2+0x22>
 800104a:	0900      	lsrs	r0, r0, #4
 800104c:	3904      	subs	r1, #4
 800104e:	a202      	add	r2, pc, #8	@ (adr r2, 8001058 <__clzsi2+0x2c>)
 8001050:	5c10      	ldrb	r0, [r2, r0]
 8001052:	1840      	adds	r0, r0, r1
 8001054:	4770      	bx	lr
 8001056:	46c0      	nop			@ (mov r8, r8)
 8001058:	02020304 	.word	0x02020304
 800105c:	01010101 	.word	0x01010101
	...

08001068 <updateMotorAngles>:

float velIncrBase = 0.03, velBase = 0.1;



void updateMotorAngles() {
 8001068:	b5b0      	push	{r4, r5, r7, lr}
 800106a:	af00      	add	r7, sp, #0
	TIM3->CCR1 = currentMotorAngles[0];
 800106c:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <updateMotorAngles+0x5c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4c15      	ldr	r4, [pc, #84]	@ (80010c8 <updateMotorAngles+0x60>)
 8001072:	1c18      	adds	r0, r3, #0
 8001074:	f7ff f90e 	bl	8000294 <__aeabi_f2uiz>
 8001078:	0003      	movs	r3, r0
 800107a:	6363      	str	r3, [r4, #52]	@ 0x34
	TIM3->CCR2 = currentMotorAngles[1];
 800107c:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <updateMotorAngles+0x5c>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	4c11      	ldr	r4, [pc, #68]	@ (80010c8 <updateMotorAngles+0x60>)
 8001082:	1c18      	adds	r0, r3, #0
 8001084:	f7ff f906 	bl	8000294 <__aeabi_f2uiz>
 8001088:	0003      	movs	r3, r0
 800108a:	63a3      	str	r3, [r4, #56]	@ 0x38
	TIM3->CCR4 = currentMotorAngles[2];
 800108c:	4b0d      	ldr	r3, [pc, #52]	@ (80010c4 <updateMotorAngles+0x5c>)
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	4c0d      	ldr	r4, [pc, #52]	@ (80010c8 <updateMotorAngles+0x60>)
 8001092:	1c18      	adds	r0, r3, #0
 8001094:	f7ff f8fe 	bl	8000294 <__aeabi_f2uiz>
 8001098:	0003      	movs	r3, r0
 800109a:	6423      	str	r3, [r4, #64]	@ 0x40
	TIM14->CCR1 = currentMotorAngles[3];
 800109c:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <updateMotorAngles+0x5c>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	4c0a      	ldr	r4, [pc, #40]	@ (80010cc <updateMotorAngles+0x64>)
 80010a2:	1c18      	adds	r0, r3, #0
 80010a4:	f7ff f8f6 	bl	8000294 <__aeabi_f2uiz>
 80010a8:	0003      	movs	r3, r0
 80010aa:	6363      	str	r3, [r4, #52]	@ 0x34
	TIM1->CCR2 = currentMotorAngles[4];
 80010ac:	4b05      	ldr	r3, [pc, #20]	@ (80010c4 <updateMotorAngles+0x5c>)
 80010ae:	691b      	ldr	r3, [r3, #16]
 80010b0:	4c07      	ldr	r4, [pc, #28]	@ (80010d0 <updateMotorAngles+0x68>)
 80010b2:	1c18      	adds	r0, r3, #0
 80010b4:	f7ff f8ee 	bl	8000294 <__aeabi_f2uiz>
 80010b8:	0003      	movs	r3, r0
 80010ba:	63a3      	str	r3, [r4, #56]	@ 0x38
}
 80010bc:	46c0      	nop			@ (mov r8, r8)
 80010be:	46bd      	mov	sp, r7
 80010c0:	bdb0      	pop	{r4, r5, r7, pc}
 80010c2:	46c0      	nop			@ (mov r8, r8)
 80010c4:	20000244 	.word	0x20000244
 80010c8:	40000400 	.word	0x40000400
 80010cc:	40002000 	.word	0x40002000
 80010d0:	40012c00 	.word	0x40012c00

080010d4 <moveMotorAngles>:

void moveMotorAngles() {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
	for(int i=0; i<numMotors; i++) {
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	e013      	b.n	8001108 <moveMotorAngles+0x34>
		currentMotorAngles[i] += currentMotorVelocities[i];
 80010e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001118 <moveMotorAngles+0x44>)
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	0092      	lsls	r2, r2, #2
 80010e6:	58d0      	ldr	r0, [r2, r3]
 80010e8:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <moveMotorAngles+0x48>)
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	0092      	lsls	r2, r2, #2
 80010ee:	58d3      	ldr	r3, [r2, r3]
 80010f0:	1c19      	adds	r1, r3, #0
 80010f2:	f7ff f8e7 	bl	80002c4 <__aeabi_fadd>
 80010f6:	1c03      	adds	r3, r0, #0
 80010f8:	1c19      	adds	r1, r3, #0
 80010fa:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <moveMotorAngles+0x44>)
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	0092      	lsls	r2, r2, #2
 8001100:	50d1      	str	r1, [r2, r3]
	for(int i=0; i<numMotors; i++) {
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3301      	adds	r3, #1
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b04      	cmp	r3, #4
 800110c:	dde8      	ble.n	80010e0 <moveMotorAngles+0xc>
	}
}
 800110e:	46c0      	nop			@ (mov r8, r8)
 8001110:	46c0      	nop			@ (mov r8, r8)
 8001112:	46bd      	mov	sp, r7
 8001114:	b002      	add	sp, #8
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000244 	.word	0x20000244
 800111c:	20000258 	.word	0x20000258

08001120 <newVelocity>:


float newVelocity(int32_t motorIdx) {
 8001120:	b5b0      	push	{r4, r5, r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]

	float a = 300, b = motorMaxVel[motorIdx];
 8001128:	4bdc      	ldr	r3, [pc, #880]	@ (800149c <newVelocity+0x37c>)
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	4bdc      	ldr	r3, [pc, #880]	@ (80014a0 <newVelocity+0x380>)
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	0092      	lsls	r2, r2, #2
 8001132:	58d3      	ldr	r3, [r2, r3]
 8001134:	613b      	str	r3, [r7, #16]
	float dist = desiredMotorAngles[motorIdx] - currentMotorAngles[motorIdx];
 8001136:	4bdb      	ldr	r3, [pc, #876]	@ (80014a4 <newVelocity+0x384>)
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	0092      	lsls	r2, r2, #2
 800113c:	58d0      	ldr	r0, [r2, r3]
 800113e:	4bda      	ldr	r3, [pc, #872]	@ (80014a8 <newVelocity+0x388>)
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	0092      	lsls	r2, r2, #2
 8001144:	58d3      	ldr	r3, [r2, r3]
 8001146:	1c19      	adds	r1, r3, #0
 8001148:	f7ff fd6a 	bl	8000c20 <__aeabi_fsub>
 800114c:	1c03      	adds	r3, r0, #0
 800114e:	60fb      	str	r3, [r7, #12]

	// Close enough, snap to angle
	if (abs(dist) < 1) {
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	f7ff ff09 	bl	8000f68 <__aeabi_f2iz>
 8001156:	1e03      	subs	r3, r0, #0
 8001158:	db0e      	blt.n	8001178 <newVelocity+0x58>
 800115a:	68f8      	ldr	r0, [r7, #12]
 800115c:	f7ff ff04 	bl	8000f68 <__aeabi_f2iz>
 8001160:	1e03      	subs	r3, r0, #0
 8001162:	dc09      	bgt.n	8001178 <newVelocity+0x58>
		currentMotorAngles[motorIdx] = desiredMotorAngles[motorIdx];
 8001164:	4bcf      	ldr	r3, [pc, #828]	@ (80014a4 <newVelocity+0x384>)
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	0092      	lsls	r2, r2, #2
 800116a:	58d1      	ldr	r1, [r2, r3]
 800116c:	4bce      	ldr	r3, [pc, #824]	@ (80014a8 <newVelocity+0x388>)
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	0092      	lsls	r2, r2, #2
 8001172:	50d1      	str	r1, [r2, r3]
		return 0;
 8001174:	2300      	movs	r3, #0
 8001176:	e1b8      	b.n	80014ea <newVelocity+0x3ca>
	}


	if (dist > 0) {
 8001178:	2100      	movs	r1, #0
 800117a:	68f8      	ldr	r0, [r7, #12]
 800117c:	f7ff f876 	bl	800026c <__aeabi_fcmpgt>
 8001180:	1e03      	subs	r3, r0, #0
 8001182:	d100      	bne.n	8001186 <newVelocity+0x66>
 8001184:	e0bb      	b.n	80012fe <newVelocity+0x1de>

		return max(velBase, min( currentMotorVelocities[motorIdx] + motorVelIncr[motorIdx], (min(b, b*dist/a)) ) );
 8001186:	4bc9      	ldr	r3, [pc, #804]	@ (80014ac <newVelocity+0x38c>)
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	0092      	lsls	r2, r2, #2
 800118c:	58d0      	ldr	r0, [r2, r3]
 800118e:	4bc8      	ldr	r3, [pc, #800]	@ (80014b0 <newVelocity+0x390>)
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	0092      	lsls	r2, r2, #2
 8001194:	58d3      	ldr	r3, [r2, r3]
 8001196:	1c19      	adds	r1, r3, #0
 8001198:	f7ff f894 	bl	80002c4 <__aeabi_fadd>
 800119c:	1c03      	adds	r3, r0, #0
 800119e:	1c1c      	adds	r4, r3, #0
 80011a0:	68f9      	ldr	r1, [r7, #12]
 80011a2:	6938      	ldr	r0, [r7, #16]
 80011a4:	f7ff fbfe 	bl	80009a4 <__aeabi_fmul>
 80011a8:	1c03      	adds	r3, r0, #0
 80011aa:	6979      	ldr	r1, [r7, #20]
 80011ac:	1c18      	adds	r0, r3, #0
 80011ae:	f7ff fa13 	bl	80005d8 <__aeabi_fdiv>
 80011b2:	1c03      	adds	r3, r0, #0
 80011b4:	1c19      	adds	r1, r3, #0
 80011b6:	6938      	ldr	r0, [r7, #16]
 80011b8:	f7ff f858 	bl	800026c <__aeabi_fcmpgt>
 80011bc:	1e03      	subs	r3, r0, #0
 80011be:	d00a      	beq.n	80011d6 <newVelocity+0xb6>
 80011c0:	68f9      	ldr	r1, [r7, #12]
 80011c2:	6938      	ldr	r0, [r7, #16]
 80011c4:	f7ff fbee 	bl	80009a4 <__aeabi_fmul>
 80011c8:	1c03      	adds	r3, r0, #0
 80011ca:	6979      	ldr	r1, [r7, #20]
 80011cc:	1c18      	adds	r0, r3, #0
 80011ce:	f7ff fa03 	bl	80005d8 <__aeabi_fdiv>
 80011d2:	1c03      	adds	r3, r0, #0
 80011d4:	e000      	b.n	80011d8 <newVelocity+0xb8>
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1c21      	adds	r1, r4, #0
 80011da:	1c18      	adds	r0, r3, #0
 80011dc:	f7ff f832 	bl	8000244 <__aeabi_fcmplt>
 80011e0:	1e03      	subs	r3, r0, #0
 80011e2:	d01c      	beq.n	800121e <newVelocity+0xfe>
 80011e4:	68f9      	ldr	r1, [r7, #12]
 80011e6:	6938      	ldr	r0, [r7, #16]
 80011e8:	f7ff fbdc 	bl	80009a4 <__aeabi_fmul>
 80011ec:	1c03      	adds	r3, r0, #0
 80011ee:	6979      	ldr	r1, [r7, #20]
 80011f0:	1c18      	adds	r0, r3, #0
 80011f2:	f7ff f9f1 	bl	80005d8 <__aeabi_fdiv>
 80011f6:	1c03      	adds	r3, r0, #0
 80011f8:	1c19      	adds	r1, r3, #0
 80011fa:	6938      	ldr	r0, [r7, #16]
 80011fc:	f7ff f836 	bl	800026c <__aeabi_fcmpgt>
 8001200:	1e03      	subs	r3, r0, #0
 8001202:	d00a      	beq.n	800121a <newVelocity+0xfa>
 8001204:	68f9      	ldr	r1, [r7, #12]
 8001206:	6938      	ldr	r0, [r7, #16]
 8001208:	f7ff fbcc 	bl	80009a4 <__aeabi_fmul>
 800120c:	1c03      	adds	r3, r0, #0
 800120e:	6979      	ldr	r1, [r7, #20]
 8001210:	1c18      	adds	r0, r3, #0
 8001212:	f7ff f9e1 	bl	80005d8 <__aeabi_fdiv>
 8001216:	1c03      	adds	r3, r0, #0
 8001218:	e00d      	b.n	8001236 <newVelocity+0x116>
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	e00b      	b.n	8001236 <newVelocity+0x116>
 800121e:	4ba3      	ldr	r3, [pc, #652]	@ (80014ac <newVelocity+0x38c>)
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	0092      	lsls	r2, r2, #2
 8001224:	58d0      	ldr	r0, [r2, r3]
 8001226:	4ba2      	ldr	r3, [pc, #648]	@ (80014b0 <newVelocity+0x390>)
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	0092      	lsls	r2, r2, #2
 800122c:	58d3      	ldr	r3, [r2, r3]
 800122e:	1c19      	adds	r1, r3, #0
 8001230:	f7ff f848 	bl	80002c4 <__aeabi_fadd>
 8001234:	1c03      	adds	r3, r0, #0
 8001236:	4a9f      	ldr	r2, [pc, #636]	@ (80014b4 <newVelocity+0x394>)
 8001238:	6812      	ldr	r2, [r2, #0]
 800123a:	1c11      	adds	r1, r2, #0
 800123c:	1c18      	adds	r0, r3, #0
 800123e:	f7ff f815 	bl	800026c <__aeabi_fcmpgt>
 8001242:	1e03      	subs	r3, r0, #0
 8001244:	d058      	beq.n	80012f8 <newVelocity+0x1d8>
 8001246:	4b99      	ldr	r3, [pc, #612]	@ (80014ac <newVelocity+0x38c>)
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	0092      	lsls	r2, r2, #2
 800124c:	58d0      	ldr	r0, [r2, r3]
 800124e:	4b98      	ldr	r3, [pc, #608]	@ (80014b0 <newVelocity+0x390>)
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	0092      	lsls	r2, r2, #2
 8001254:	58d3      	ldr	r3, [r2, r3]
 8001256:	1c19      	adds	r1, r3, #0
 8001258:	f7ff f834 	bl	80002c4 <__aeabi_fadd>
 800125c:	1c03      	adds	r3, r0, #0
 800125e:	1c1c      	adds	r4, r3, #0
 8001260:	68f9      	ldr	r1, [r7, #12]
 8001262:	6938      	ldr	r0, [r7, #16]
 8001264:	f7ff fb9e 	bl	80009a4 <__aeabi_fmul>
 8001268:	1c03      	adds	r3, r0, #0
 800126a:	6979      	ldr	r1, [r7, #20]
 800126c:	1c18      	adds	r0, r3, #0
 800126e:	f7ff f9b3 	bl	80005d8 <__aeabi_fdiv>
 8001272:	1c03      	adds	r3, r0, #0
 8001274:	1c19      	adds	r1, r3, #0
 8001276:	6938      	ldr	r0, [r7, #16]
 8001278:	f7fe fff8 	bl	800026c <__aeabi_fcmpgt>
 800127c:	1e03      	subs	r3, r0, #0
 800127e:	d00a      	beq.n	8001296 <newVelocity+0x176>
 8001280:	68f9      	ldr	r1, [r7, #12]
 8001282:	6938      	ldr	r0, [r7, #16]
 8001284:	f7ff fb8e 	bl	80009a4 <__aeabi_fmul>
 8001288:	1c03      	adds	r3, r0, #0
 800128a:	6979      	ldr	r1, [r7, #20]
 800128c:	1c18      	adds	r0, r3, #0
 800128e:	f7ff f9a3 	bl	80005d8 <__aeabi_fdiv>
 8001292:	1c03      	adds	r3, r0, #0
 8001294:	e000      	b.n	8001298 <newVelocity+0x178>
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1c21      	adds	r1, r4, #0
 800129a:	1c18      	adds	r0, r3, #0
 800129c:	f7fe ffd2 	bl	8000244 <__aeabi_fcmplt>
 80012a0:	1e03      	subs	r3, r0, #0
 80012a2:	d01c      	beq.n	80012de <newVelocity+0x1be>
 80012a4:	68f9      	ldr	r1, [r7, #12]
 80012a6:	6938      	ldr	r0, [r7, #16]
 80012a8:	f7ff fb7c 	bl	80009a4 <__aeabi_fmul>
 80012ac:	1c03      	adds	r3, r0, #0
 80012ae:	6979      	ldr	r1, [r7, #20]
 80012b0:	1c18      	adds	r0, r3, #0
 80012b2:	f7ff f991 	bl	80005d8 <__aeabi_fdiv>
 80012b6:	1c03      	adds	r3, r0, #0
 80012b8:	1c19      	adds	r1, r3, #0
 80012ba:	6938      	ldr	r0, [r7, #16]
 80012bc:	f7fe ffd6 	bl	800026c <__aeabi_fcmpgt>
 80012c0:	1e03      	subs	r3, r0, #0
 80012c2:	d00a      	beq.n	80012da <newVelocity+0x1ba>
 80012c4:	68f9      	ldr	r1, [r7, #12]
 80012c6:	6938      	ldr	r0, [r7, #16]
 80012c8:	f7ff fb6c 	bl	80009a4 <__aeabi_fmul>
 80012cc:	1c03      	adds	r3, r0, #0
 80012ce:	6979      	ldr	r1, [r7, #20]
 80012d0:	1c18      	adds	r0, r3, #0
 80012d2:	f7ff f981 	bl	80005d8 <__aeabi_fdiv>
 80012d6:	1c03      	adds	r3, r0, #0
 80012d8:	e107      	b.n	80014ea <newVelocity+0x3ca>
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	e105      	b.n	80014ea <newVelocity+0x3ca>
 80012de:	4b73      	ldr	r3, [pc, #460]	@ (80014ac <newVelocity+0x38c>)
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	0092      	lsls	r2, r2, #2
 80012e4:	58d0      	ldr	r0, [r2, r3]
 80012e6:	4b72      	ldr	r3, [pc, #456]	@ (80014b0 <newVelocity+0x390>)
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	0092      	lsls	r2, r2, #2
 80012ec:	58d3      	ldr	r3, [r2, r3]
 80012ee:	1c19      	adds	r1, r3, #0
 80012f0:	f7fe ffe8 	bl	80002c4 <__aeabi_fadd>
 80012f4:	1c03      	adds	r3, r0, #0
 80012f6:	e0f8      	b.n	80014ea <newVelocity+0x3ca>
 80012f8:	4b6e      	ldr	r3, [pc, #440]	@ (80014b4 <newVelocity+0x394>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	e0f5      	b.n	80014ea <newVelocity+0x3ca>

	} else if (dist < 0) {
 80012fe:	2100      	movs	r1, #0
 8001300:	68f8      	ldr	r0, [r7, #12]
 8001302:	f7fe ff9f 	bl	8000244 <__aeabi_fcmplt>
 8001306:	1e03      	subs	r3, r0, #0
 8001308:	d100      	bne.n	800130c <newVelocity+0x1ec>
 800130a:	e0ed      	b.n	80014e8 <newVelocity+0x3c8>
		return min(-velBase, max( currentMotorVelocities[motorIdx] - motorVelIncr[motorIdx], - (min(b, b*(-dist)/a)) ) );
 800130c:	4b69      	ldr	r3, [pc, #420]	@ (80014b4 <newVelocity+0x394>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2280      	movs	r2, #128	@ 0x80
 8001312:	0612      	lsls	r2, r2, #24
 8001314:	405a      	eors	r2, r3
 8001316:	0014      	movs	r4, r2
 8001318:	4b64      	ldr	r3, [pc, #400]	@ (80014ac <newVelocity+0x38c>)
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	0092      	lsls	r2, r2, #2
 800131e:	58d0      	ldr	r0, [r2, r3]
 8001320:	4b63      	ldr	r3, [pc, #396]	@ (80014b0 <newVelocity+0x390>)
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	0092      	lsls	r2, r2, #2
 8001326:	58d3      	ldr	r3, [r2, r3]
 8001328:	1c19      	adds	r1, r3, #0
 800132a:	f7ff fc79 	bl	8000c20 <__aeabi_fsub>
 800132e:	1c03      	adds	r3, r0, #0
 8001330:	1c1d      	adds	r5, r3, #0
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2280      	movs	r2, #128	@ 0x80
 8001336:	0612      	lsls	r2, r2, #24
 8001338:	4053      	eors	r3, r2
 800133a:	6939      	ldr	r1, [r7, #16]
 800133c:	1c18      	adds	r0, r3, #0
 800133e:	f7ff fb31 	bl	80009a4 <__aeabi_fmul>
 8001342:	1c03      	adds	r3, r0, #0
 8001344:	6979      	ldr	r1, [r7, #20]
 8001346:	1c18      	adds	r0, r3, #0
 8001348:	f7ff f946 	bl	80005d8 <__aeabi_fdiv>
 800134c:	1c03      	adds	r3, r0, #0
 800134e:	1c19      	adds	r1, r3, #0
 8001350:	6938      	ldr	r0, [r7, #16]
 8001352:	f7fe ff8b 	bl	800026c <__aeabi_fcmpgt>
 8001356:	1e03      	subs	r3, r0, #0
 8001358:	d00a      	beq.n	8001370 <newVelocity+0x250>
 800135a:	6939      	ldr	r1, [r7, #16]
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f7ff fb21 	bl	80009a4 <__aeabi_fmul>
 8001362:	1c03      	adds	r3, r0, #0
 8001364:	6979      	ldr	r1, [r7, #20]
 8001366:	1c18      	adds	r0, r3, #0
 8001368:	f7ff f936 	bl	80005d8 <__aeabi_fdiv>
 800136c:	1c03      	adds	r3, r0, #0
 800136e:	e003      	b.n	8001378 <newVelocity+0x258>
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	2280      	movs	r2, #128	@ 0x80
 8001374:	0612      	lsls	r2, r2, #24
 8001376:	4053      	eors	r3, r2
 8001378:	1c29      	adds	r1, r5, #0
 800137a:	1c18      	adds	r0, r3, #0
 800137c:	f7fe ff76 	bl	800026c <__aeabi_fcmpgt>
 8001380:	1e03      	subs	r3, r0, #0
 8001382:	d023      	beq.n	80013cc <newVelocity+0x2ac>
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2280      	movs	r2, #128	@ 0x80
 8001388:	0612      	lsls	r2, r2, #24
 800138a:	4053      	eors	r3, r2
 800138c:	6939      	ldr	r1, [r7, #16]
 800138e:	1c18      	adds	r0, r3, #0
 8001390:	f7ff fb08 	bl	80009a4 <__aeabi_fmul>
 8001394:	1c03      	adds	r3, r0, #0
 8001396:	6979      	ldr	r1, [r7, #20]
 8001398:	1c18      	adds	r0, r3, #0
 800139a:	f7ff f91d 	bl	80005d8 <__aeabi_fdiv>
 800139e:	1c03      	adds	r3, r0, #0
 80013a0:	1c19      	adds	r1, r3, #0
 80013a2:	6938      	ldr	r0, [r7, #16]
 80013a4:	f7fe ff62 	bl	800026c <__aeabi_fcmpgt>
 80013a8:	1e03      	subs	r3, r0, #0
 80013aa:	d00a      	beq.n	80013c2 <newVelocity+0x2a2>
 80013ac:	6939      	ldr	r1, [r7, #16]
 80013ae:	68f8      	ldr	r0, [r7, #12]
 80013b0:	f7ff faf8 	bl	80009a4 <__aeabi_fmul>
 80013b4:	1c03      	adds	r3, r0, #0
 80013b6:	6979      	ldr	r1, [r7, #20]
 80013b8:	1c18      	adds	r0, r3, #0
 80013ba:	f7ff f90d 	bl	80005d8 <__aeabi_fdiv>
 80013be:	1c03      	adds	r3, r0, #0
 80013c0:	e010      	b.n	80013e4 <newVelocity+0x2c4>
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	2280      	movs	r2, #128	@ 0x80
 80013c6:	0612      	lsls	r2, r2, #24
 80013c8:	4053      	eors	r3, r2
 80013ca:	e00b      	b.n	80013e4 <newVelocity+0x2c4>
 80013cc:	4b37      	ldr	r3, [pc, #220]	@ (80014ac <newVelocity+0x38c>)
 80013ce:	687a      	ldr	r2, [r7, #4]
 80013d0:	0092      	lsls	r2, r2, #2
 80013d2:	58d0      	ldr	r0, [r2, r3]
 80013d4:	4b36      	ldr	r3, [pc, #216]	@ (80014b0 <newVelocity+0x390>)
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	0092      	lsls	r2, r2, #2
 80013da:	58d3      	ldr	r3, [r2, r3]
 80013dc:	1c19      	adds	r1, r3, #0
 80013de:	f7ff fc1f 	bl	8000c20 <__aeabi_fsub>
 80013e2:	1c03      	adds	r3, r0, #0
 80013e4:	1c21      	adds	r1, r4, #0
 80013e6:	1c18      	adds	r0, r3, #0
 80013e8:	f7fe ff2c 	bl	8000244 <__aeabi_fcmplt>
 80013ec:	1e03      	subs	r3, r0, #0
 80013ee:	d100      	bne.n	80013f2 <newVelocity+0x2d2>
 80013f0:	e074      	b.n	80014dc <newVelocity+0x3bc>
 80013f2:	4b2e      	ldr	r3, [pc, #184]	@ (80014ac <newVelocity+0x38c>)
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	0092      	lsls	r2, r2, #2
 80013f8:	58d0      	ldr	r0, [r2, r3]
 80013fa:	4b2d      	ldr	r3, [pc, #180]	@ (80014b0 <newVelocity+0x390>)
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	0092      	lsls	r2, r2, #2
 8001400:	58d3      	ldr	r3, [r2, r3]
 8001402:	1c19      	adds	r1, r3, #0
 8001404:	f7ff fc0c 	bl	8000c20 <__aeabi_fsub>
 8001408:	1c03      	adds	r3, r0, #0
 800140a:	1c1c      	adds	r4, r3, #0
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2280      	movs	r2, #128	@ 0x80
 8001410:	0612      	lsls	r2, r2, #24
 8001412:	4053      	eors	r3, r2
 8001414:	6939      	ldr	r1, [r7, #16]
 8001416:	1c18      	adds	r0, r3, #0
 8001418:	f7ff fac4 	bl	80009a4 <__aeabi_fmul>
 800141c:	1c03      	adds	r3, r0, #0
 800141e:	6979      	ldr	r1, [r7, #20]
 8001420:	1c18      	adds	r0, r3, #0
 8001422:	f7ff f8d9 	bl	80005d8 <__aeabi_fdiv>
 8001426:	1c03      	adds	r3, r0, #0
 8001428:	1c19      	adds	r1, r3, #0
 800142a:	6938      	ldr	r0, [r7, #16]
 800142c:	f7fe ff1e 	bl	800026c <__aeabi_fcmpgt>
 8001430:	1e03      	subs	r3, r0, #0
 8001432:	d00a      	beq.n	800144a <newVelocity+0x32a>
 8001434:	6939      	ldr	r1, [r7, #16]
 8001436:	68f8      	ldr	r0, [r7, #12]
 8001438:	f7ff fab4 	bl	80009a4 <__aeabi_fmul>
 800143c:	1c03      	adds	r3, r0, #0
 800143e:	6979      	ldr	r1, [r7, #20]
 8001440:	1c18      	adds	r0, r3, #0
 8001442:	f7ff f8c9 	bl	80005d8 <__aeabi_fdiv>
 8001446:	1c03      	adds	r3, r0, #0
 8001448:	e003      	b.n	8001452 <newVelocity+0x332>
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	2280      	movs	r2, #128	@ 0x80
 800144e:	0612      	lsls	r2, r2, #24
 8001450:	4053      	eors	r3, r2
 8001452:	1c21      	adds	r1, r4, #0
 8001454:	1c18      	adds	r0, r3, #0
 8001456:	f7fe ff09 	bl	800026c <__aeabi_fcmpgt>
 800145a:	1e03      	subs	r3, r0, #0
 800145c:	d031      	beq.n	80014c2 <newVelocity+0x3a2>
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2280      	movs	r2, #128	@ 0x80
 8001462:	0612      	lsls	r2, r2, #24
 8001464:	4053      	eors	r3, r2
 8001466:	6939      	ldr	r1, [r7, #16]
 8001468:	1c18      	adds	r0, r3, #0
 800146a:	f7ff fa9b 	bl	80009a4 <__aeabi_fmul>
 800146e:	1c03      	adds	r3, r0, #0
 8001470:	6979      	ldr	r1, [r7, #20]
 8001472:	1c18      	adds	r0, r3, #0
 8001474:	f7ff f8b0 	bl	80005d8 <__aeabi_fdiv>
 8001478:	1c03      	adds	r3, r0, #0
 800147a:	1c19      	adds	r1, r3, #0
 800147c:	6938      	ldr	r0, [r7, #16]
 800147e:	f7fe fef5 	bl	800026c <__aeabi_fcmpgt>
 8001482:	1e03      	subs	r3, r0, #0
 8001484:	d018      	beq.n	80014b8 <newVelocity+0x398>
 8001486:	6939      	ldr	r1, [r7, #16]
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	f7ff fa8b 	bl	80009a4 <__aeabi_fmul>
 800148e:	1c03      	adds	r3, r0, #0
 8001490:	6979      	ldr	r1, [r7, #20]
 8001492:	1c18      	adds	r0, r3, #0
 8001494:	f7ff f8a0 	bl	80005d8 <__aeabi_fdiv>
 8001498:	1c03      	adds	r3, r0, #0
 800149a:	e026      	b.n	80014ea <newVelocity+0x3ca>
 800149c:	43960000 	.word	0x43960000
 80014a0:	20000028 	.word	0x20000028
 80014a4:	20000230 	.word	0x20000230
 80014a8:	20000244 	.word	0x20000244
 80014ac:	20000258 	.word	0x20000258
 80014b0:	2000003c 	.word	0x2000003c
 80014b4:	20000050 	.word	0x20000050
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	0612      	lsls	r2, r2, #24
 80014be:	4053      	eors	r3, r2
 80014c0:	e013      	b.n	80014ea <newVelocity+0x3ca>
 80014c2:	4b0c      	ldr	r3, [pc, #48]	@ (80014f4 <newVelocity+0x3d4>)
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	0092      	lsls	r2, r2, #2
 80014c8:	58d0      	ldr	r0, [r2, r3]
 80014ca:	4b0b      	ldr	r3, [pc, #44]	@ (80014f8 <newVelocity+0x3d8>)
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	0092      	lsls	r2, r2, #2
 80014d0:	58d3      	ldr	r3, [r2, r3]
 80014d2:	1c19      	adds	r1, r3, #0
 80014d4:	f7ff fba4 	bl	8000c20 <__aeabi_fsub>
 80014d8:	1c03      	adds	r3, r0, #0
 80014da:	e006      	b.n	80014ea <newVelocity+0x3ca>
 80014dc:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <newVelocity+0x3dc>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2280      	movs	r2, #128	@ 0x80
 80014e2:	0612      	lsls	r2, r2, #24
 80014e4:	4053      	eors	r3, r2
 80014e6:	e000      	b.n	80014ea <newVelocity+0x3ca>

	}
	return 0;
 80014e8:	2300      	movs	r3, #0

}
 80014ea:	1c18      	adds	r0, r3, #0
 80014ec:	46bd      	mov	sp, r7
 80014ee:	b006      	add	sp, #24
 80014f0:	bdb0      	pop	{r4, r5, r7, pc}
 80014f2:	46c0      	nop			@ (mov r8, r8)
 80014f4:	20000258 	.word	0x20000258
 80014f8:	2000003c 	.word	0x2000003c
 80014fc:	20000050 	.word	0x20000050

08001500 <approachMotorAngles>:


void approachMotorAngles() {
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0

	for(int i=0; i<numMotors; i++) {
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	e00b      	b.n	8001524 <approachMotorAngles+0x24>
		currentMotorVelocities[i] = newVelocity(i);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	0018      	movs	r0, r3
 8001510:	f7ff fe06 	bl	8001120 <newVelocity>
 8001514:	1c01      	adds	r1, r0, #0
 8001516:	4b09      	ldr	r3, [pc, #36]	@ (800153c <approachMotorAngles+0x3c>)
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	0092      	lsls	r2, r2, #2
 800151c:	50d1      	str	r1, [r2, r3]
	for(int i=0; i<numMotors; i++) {
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3301      	adds	r3, #1
 8001522:	607b      	str	r3, [r7, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b04      	cmp	r3, #4
 8001528:	ddf0      	ble.n	800150c <approachMotorAngles+0xc>
	}
	moveMotorAngles();
 800152a:	f7ff fdd3 	bl	80010d4 <moveMotorAngles>
	updateMotorAngles();
 800152e:	f7ff fd9b 	bl	8001068 <updateMotorAngles>
}
 8001532:	46c0      	nop			@ (mov r8, r8)
 8001534:	46bd      	mov	sp, r7
 8001536:	b002      	add	sp, #8
 8001538:	bd80      	pop	{r7, pc}
 800153a:	46c0      	nop			@ (mov r8, r8)
 800153c:	20000258 	.word	0x20000258

08001540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001546:	f000 fd8f 	bl	8002068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800154a:	f000 f887 	bl	800165c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800154e:	f000 fab9 	bl	8001ac4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001552:	f000 fa99 	bl	8001a88 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001556:	f000 fa67 	bl	8001a28 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800155a:	f000 f985 	bl	8001868 <MX_TIM3_Init>
  MX_TIM1_Init();
 800155e:	f000 f8c5 	bl	80016ec <MX_TIM1_Init>
  MX_TIM14_Init();
 8001562:	f000 fa13 	bl	800198c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */


  // Init motor positions
  TIM3->ARR = 60000;	// 12MHz / 10 (prescaler) / 60000 (ARR) = 20 Hz
 8001566:	4b2f      	ldr	r3, [pc, #188]	@ (8001624 <main+0xe4>)
 8001568:	4a2f      	ldr	r2, [pc, #188]	@ (8001628 <main+0xe8>)
 800156a:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM14->ARR = 60000;	// 12MHz / 10 (prescaler) / 60000 (ARR) = 20 Hz
 800156c:	4b2f      	ldr	r3, [pc, #188]	@ (800162c <main+0xec>)
 800156e:	4a2e      	ldr	r2, [pc, #184]	@ (8001628 <main+0xe8>)
 8001570:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM1->ARR = 60000;	// 12MHz / 10 (prescaler) / 60000 (ARR) = 20 Hz
 8001572:	4b2f      	ldr	r3, [pc, #188]	@ (8001630 <main+0xf0>)
 8001574:	4a2c      	ldr	r2, [pc, #176]	@ (8001628 <main+0xe8>)
 8001576:	62da      	str	r2, [r3, #44]	@ 0x2c
  for(int i=0; i<numMotors; i++) {
 8001578:	2300      	movs	r3, #0
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	e026      	b.n	80015cc <main+0x8c>
	  desiredMotorAngles[i] = (motorLo[i] + motorHi[i]) / 2.0;
 800157e:	4b2d      	ldr	r3, [pc, #180]	@ (8001634 <main+0xf4>)
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	0092      	lsls	r2, r2, #2
 8001584:	58d0      	ldr	r0, [r2, r3]
 8001586:	4b2c      	ldr	r3, [pc, #176]	@ (8001638 <main+0xf8>)
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	0092      	lsls	r2, r2, #2
 800158c:	58d3      	ldr	r3, [r2, r3]
 800158e:	1c19      	adds	r1, r3, #0
 8001590:	f7fe fe98 	bl	80002c4 <__aeabi_fadd>
 8001594:	1c03      	adds	r3, r0, #0
 8001596:	2180      	movs	r1, #128	@ 0x80
 8001598:	05c9      	lsls	r1, r1, #23
 800159a:	1c18      	adds	r0, r3, #0
 800159c:	f7ff f81c 	bl	80005d8 <__aeabi_fdiv>
 80015a0:	1c03      	adds	r3, r0, #0
 80015a2:	1c19      	adds	r1, r3, #0
 80015a4:	4b25      	ldr	r3, [pc, #148]	@ (800163c <main+0xfc>)
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	0092      	lsls	r2, r2, #2
 80015aa:	50d1      	str	r1, [r2, r3]
	  currentMotorAngles[i] = desiredMotorAngles[i];
 80015ac:	4b23      	ldr	r3, [pc, #140]	@ (800163c <main+0xfc>)
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	0092      	lsls	r2, r2, #2
 80015b2:	58d1      	ldr	r1, [r2, r3]
 80015b4:	4b22      	ldr	r3, [pc, #136]	@ (8001640 <main+0x100>)
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	0092      	lsls	r2, r2, #2
 80015ba:	50d1      	str	r1, [r2, r3]
	  currentMotorVelocities[i] = 0;
 80015bc:	4b21      	ldr	r3, [pc, #132]	@ (8001644 <main+0x104>)
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	0092      	lsls	r2, r2, #2
 80015c2:	2100      	movs	r1, #0
 80015c4:	50d1      	str	r1, [r2, r3]
  for(int i=0; i<numMotors; i++) {
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3301      	adds	r3, #1
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	ddd5      	ble.n	800157e <main+0x3e>
  }
  updateMotorAngles();
 80015d2:	f7ff fd49 	bl	8001068 <updateMotorAngles>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80015d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001648 <main+0x108>)
 80015d8:	2100      	movs	r1, #0
 80015da:	0018      	movs	r0, r3
 80015dc:	f001 ff5a 	bl	8003494 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80015e0:	4b19      	ldr	r3, [pc, #100]	@ (8001648 <main+0x108>)
 80015e2:	2104      	movs	r1, #4
 80015e4:	0018      	movs	r0, r3
 80015e6:	f001 ff55 	bl	8003494 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80015ea:	4b17      	ldr	r3, [pc, #92]	@ (8001648 <main+0x108>)
 80015ec:	210c      	movs	r1, #12
 80015ee:	0018      	movs	r0, r3
 80015f0:	f001 ff50 	bl	8003494 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80015f4:	4b15      	ldr	r3, [pc, #84]	@ (800164c <main+0x10c>)
 80015f6:	2100      	movs	r1, #0
 80015f8:	0018      	movs	r0, r3
 80015fa:	f001 ff4b 	bl	8003494 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80015fe:	4b14      	ldr	r3, [pc, #80]	@ (8001650 <main+0x110>)
 8001600:	2104      	movs	r1, #4
 8001602:	0018      	movs	r0, r3
 8001604:	f001 ff46 	bl	8003494 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_DMA(&huart2, UART2_rxBuffer, numMotors);
 8001608:	4912      	ldr	r1, [pc, #72]	@ (8001654 <main+0x114>)
 800160a:	4b13      	ldr	r3, [pc, #76]	@ (8001658 <main+0x118>)
 800160c:	2205      	movs	r2, #5
 800160e:	0018      	movs	r0, r3
 8001610:	f002 fd9c 	bl	800414c <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(1);
 8001614:	2001      	movs	r0, #1
 8001616:	f000 fd8b 	bl	8002130 <HAL_Delay>
	  approachMotorAngles();
 800161a:	f7ff ff71 	bl	8001500 <approachMotorAngles>
	  HAL_Delay(1);
 800161e:	46c0      	nop			@ (mov r8, r8)
 8001620:	e7f8      	b.n	8001614 <main+0xd4>
 8001622:	46c0      	nop			@ (mov r8, r8)
 8001624:	40000400 	.word	0x40000400
 8001628:	0000ea60 	.word	0x0000ea60
 800162c:	40002000 	.word	0x40002000
 8001630:	40012c00 	.word	0x40012c00
 8001634:	20000000 	.word	0x20000000
 8001638:	20000014 	.word	0x20000014
 800163c:	20000230 	.word	0x20000230
 8001640:	20000244 	.word	0x20000244
 8001644:	20000258 	.word	0x20000258
 8001648:	200000c4 	.word	0x200000c4
 800164c:	2000010c 	.word	0x2000010c
 8001650:	2000007c 	.word	0x2000007c
 8001654:	20000220 	.word	0x20000220
 8001658:	20000154 	.word	0x20000154

0800165c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800165c:	b590      	push	{r4, r7, lr}
 800165e:	b091      	sub	sp, #68	@ 0x44
 8001660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001662:	2410      	movs	r4, #16
 8001664:	193b      	adds	r3, r7, r4
 8001666:	0018      	movs	r0, r3
 8001668:	2330      	movs	r3, #48	@ 0x30
 800166a:	001a      	movs	r2, r3
 800166c:	2100      	movs	r1, #0
 800166e:	f003 fe20 	bl	80052b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001672:	003b      	movs	r3, r7
 8001674:	0018      	movs	r0, r3
 8001676:	2310      	movs	r3, #16
 8001678:	001a      	movs	r2, r3
 800167a:	2100      	movs	r1, #0
 800167c:	f003 fe19 	bl	80052b2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001680:	0021      	movs	r1, r4
 8001682:	187b      	adds	r3, r7, r1
 8001684:	2201      	movs	r2, #1
 8001686:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001688:	187b      	adds	r3, r7, r1
 800168a:	2201      	movs	r2, #1
 800168c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800168e:	187b      	adds	r3, r7, r1
 8001690:	2202      	movs	r2, #2
 8001692:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001694:	187b      	adds	r3, r7, r1
 8001696:	2280      	movs	r2, #128	@ 0x80
 8001698:	0252      	lsls	r2, r2, #9
 800169a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800169c:	187b      	adds	r3, r7, r1
 800169e:	2280      	movs	r2, #128	@ 0x80
 80016a0:	0352      	lsls	r2, r2, #13
 80016a2:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80016a4:	187b      	adds	r3, r7, r1
 80016a6:	2200      	movs	r2, #0
 80016a8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016aa:	187b      	adds	r3, r7, r1
 80016ac:	0018      	movs	r0, r3
 80016ae:	f001 f9e5 	bl	8002a7c <HAL_RCC_OscConfig>
 80016b2:	1e03      	subs	r3, r0, #0
 80016b4:	d001      	beq.n	80016ba <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80016b6:	f000 faab 	bl	8001c10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ba:	003b      	movs	r3, r7
 80016bc:	2207      	movs	r2, #7
 80016be:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016c0:	003b      	movs	r3, r7
 80016c2:	2202      	movs	r2, #2
 80016c4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80016c6:	003b      	movs	r3, r7
 80016c8:	2290      	movs	r2, #144	@ 0x90
 80016ca:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016cc:	003b      	movs	r3, r7
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80016d2:	003b      	movs	r3, r7
 80016d4:	2101      	movs	r1, #1
 80016d6:	0018      	movs	r0, r3
 80016d8:	f001 fcee 	bl	80030b8 <HAL_RCC_ClockConfig>
 80016dc:	1e03      	subs	r3, r0, #0
 80016de:	d001      	beq.n	80016e4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80016e0:	f000 fa96 	bl	8001c10 <Error_Handler>
  }
}
 80016e4:	46c0      	nop			@ (mov r8, r8)
 80016e6:	46bd      	mov	sp, r7
 80016e8:	b011      	add	sp, #68	@ 0x44
 80016ea:	bd90      	pop	{r4, r7, pc}

080016ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b096      	sub	sp, #88	@ 0x58
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016f2:	2348      	movs	r3, #72	@ 0x48
 80016f4:	18fb      	adds	r3, r7, r3
 80016f6:	0018      	movs	r0, r3
 80016f8:	2310      	movs	r3, #16
 80016fa:	001a      	movs	r2, r3
 80016fc:	2100      	movs	r1, #0
 80016fe:	f003 fdd8 	bl	80052b2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001702:	2340      	movs	r3, #64	@ 0x40
 8001704:	18fb      	adds	r3, r7, r3
 8001706:	0018      	movs	r0, r3
 8001708:	2308      	movs	r3, #8
 800170a:	001a      	movs	r2, r3
 800170c:	2100      	movs	r1, #0
 800170e:	f003 fdd0 	bl	80052b2 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001712:	2324      	movs	r3, #36	@ 0x24
 8001714:	18fb      	adds	r3, r7, r3
 8001716:	0018      	movs	r0, r3
 8001718:	231c      	movs	r3, #28
 800171a:	001a      	movs	r2, r3
 800171c:	2100      	movs	r1, #0
 800171e:	f003 fdc8 	bl	80052b2 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	0018      	movs	r0, r3
 8001726:	2320      	movs	r3, #32
 8001728:	001a      	movs	r2, r3
 800172a:	2100      	movs	r1, #0
 800172c:	f003 fdc1 	bl	80052b2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001730:	4b4b      	ldr	r3, [pc, #300]	@ (8001860 <MX_TIM1_Init+0x174>)
 8001732:	4a4c      	ldr	r2, [pc, #304]	@ (8001864 <MX_TIM1_Init+0x178>)
 8001734:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10-1;
 8001736:	4b4a      	ldr	r3, [pc, #296]	@ (8001860 <MX_TIM1_Init+0x174>)
 8001738:	2209      	movs	r2, #9
 800173a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173c:	4b48      	ldr	r3, [pc, #288]	@ (8001860 <MX_TIM1_Init+0x174>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1;
 8001742:	4b47      	ldr	r3, [pc, #284]	@ (8001860 <MX_TIM1_Init+0x174>)
 8001744:	2201      	movs	r2, #1
 8001746:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001748:	4b45      	ldr	r3, [pc, #276]	@ (8001860 <MX_TIM1_Init+0x174>)
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 800174e:	4b44      	ldr	r3, [pc, #272]	@ (8001860 <MX_TIM1_Init+0x174>)
 8001750:	2201      	movs	r2, #1
 8001752:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001754:	4b42      	ldr	r3, [pc, #264]	@ (8001860 <MX_TIM1_Init+0x174>)
 8001756:	2280      	movs	r2, #128	@ 0x80
 8001758:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800175a:	4b41      	ldr	r3, [pc, #260]	@ (8001860 <MX_TIM1_Init+0x174>)
 800175c:	0018      	movs	r0, r3
 800175e:	f001 fdf1 	bl	8003344 <HAL_TIM_Base_Init>
 8001762:	1e03      	subs	r3, r0, #0
 8001764:	d001      	beq.n	800176a <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8001766:	f000 fa53 	bl	8001c10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800176a:	2148      	movs	r1, #72	@ 0x48
 800176c:	187b      	adds	r3, r7, r1
 800176e:	2280      	movs	r2, #128	@ 0x80
 8001770:	0152      	lsls	r2, r2, #5
 8001772:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001774:	187a      	adds	r2, r7, r1
 8001776:	4b3a      	ldr	r3, [pc, #232]	@ (8001860 <MX_TIM1_Init+0x174>)
 8001778:	0011      	movs	r1, r2
 800177a:	0018      	movs	r0, r3
 800177c:	f001 fff6 	bl	800376c <HAL_TIM_ConfigClockSource>
 8001780:	1e03      	subs	r3, r0, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8001784:	f000 fa44 	bl	8001c10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001788:	4b35      	ldr	r3, [pc, #212]	@ (8001860 <MX_TIM1_Init+0x174>)
 800178a:	0018      	movs	r0, r3
 800178c:	f001 fe2a 	bl	80033e4 <HAL_TIM_PWM_Init>
 8001790:	1e03      	subs	r3, r0, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8001794:	f000 fa3c 	bl	8001c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001798:	2140      	movs	r1, #64	@ 0x40
 800179a:	187b      	adds	r3, r7, r1
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a0:	187b      	adds	r3, r7, r1
 80017a2:	2200      	movs	r2, #0
 80017a4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017a6:	187a      	adds	r2, r7, r1
 80017a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001860 <MX_TIM1_Init+0x174>)
 80017aa:	0011      	movs	r1, r2
 80017ac:	0018      	movs	r0, r3
 80017ae:	f002 fbc9 	bl	8003f44 <HAL_TIMEx_MasterConfigSynchronization>
 80017b2:	1e03      	subs	r3, r0, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80017b6:	f000 fa2b 	bl	8001c10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ba:	2124      	movs	r1, #36	@ 0x24
 80017bc:	187b      	adds	r3, r7, r1
 80017be:	2260      	movs	r2, #96	@ 0x60
 80017c0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80017c2:	187b      	adds	r3, r7, r1
 80017c4:	2200      	movs	r2, #0
 80017c6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017c8:	187b      	adds	r3, r7, r1
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017ce:	187b      	adds	r3, r7, r1
 80017d0:	2200      	movs	r2, #0
 80017d2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017d4:	187b      	adds	r3, r7, r1
 80017d6:	2200      	movs	r2, #0
 80017d8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017da:	187b      	adds	r3, r7, r1
 80017dc:	2200      	movs	r2, #0
 80017de:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017e0:	187b      	adds	r3, r7, r1
 80017e2:	2200      	movs	r2, #0
 80017e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017e6:	1879      	adds	r1, r7, r1
 80017e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001860 <MX_TIM1_Init+0x174>)
 80017ea:	2204      	movs	r2, #4
 80017ec:	0018      	movs	r0, r3
 80017ee:	f001 fef7 	bl	80035e0 <HAL_TIM_PWM_ConfigChannel>
 80017f2:	1e03      	subs	r3, r0, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80017f6:	f000 fa0b 	bl	8001c10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017fa:	2324      	movs	r3, #36	@ 0x24
 80017fc:	18f9      	adds	r1, r7, r3
 80017fe:	4b18      	ldr	r3, [pc, #96]	@ (8001860 <MX_TIM1_Init+0x174>)
 8001800:	2208      	movs	r2, #8
 8001802:	0018      	movs	r0, r3
 8001804:	f001 feec 	bl	80035e0 <HAL_TIM_PWM_ConfigChannel>
 8001808:	1e03      	subs	r3, r0, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 800180c:	f000 fa00 	bl	8001c10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001816:	1d3b      	adds	r3, r7, #4
 8001818:	2200      	movs	r2, #0
 800181a:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800181c:	1d3b      	adds	r3, r7, #4
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	2200      	movs	r2, #0
 8001826:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	2200      	movs	r2, #0
 800182c:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	2280      	movs	r2, #128	@ 0x80
 8001832:	0192      	lsls	r2, r2, #6
 8001834:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	2200      	movs	r2, #0
 800183a:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800183c:	1d3a      	adds	r2, r7, #4
 800183e:	4b08      	ldr	r3, [pc, #32]	@ (8001860 <MX_TIM1_Init+0x174>)
 8001840:	0011      	movs	r1, r2
 8001842:	0018      	movs	r0, r3
 8001844:	f002 fbd0 	bl	8003fe8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001848:	1e03      	subs	r3, r0, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 800184c:	f000 f9e0 	bl	8001c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001850:	4b03      	ldr	r3, [pc, #12]	@ (8001860 <MX_TIM1_Init+0x174>)
 8001852:	0018      	movs	r0, r3
 8001854:	f000 fa50 	bl	8001cf8 <HAL_TIM_MspPostInit>

}
 8001858:	46c0      	nop			@ (mov r8, r8)
 800185a:	46bd      	mov	sp, r7
 800185c:	b016      	add	sp, #88	@ 0x58
 800185e:	bd80      	pop	{r7, pc}
 8001860:	2000007c 	.word	0x2000007c
 8001864:	40012c00 	.word	0x40012c00

08001868 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08e      	sub	sp, #56	@ 0x38
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186e:	2328      	movs	r3, #40	@ 0x28
 8001870:	18fb      	adds	r3, r7, r3
 8001872:	0018      	movs	r0, r3
 8001874:	2310      	movs	r3, #16
 8001876:	001a      	movs	r2, r3
 8001878:	2100      	movs	r1, #0
 800187a:	f003 fd1a 	bl	80052b2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800187e:	2320      	movs	r3, #32
 8001880:	18fb      	adds	r3, r7, r3
 8001882:	0018      	movs	r0, r3
 8001884:	2308      	movs	r3, #8
 8001886:	001a      	movs	r2, r3
 8001888:	2100      	movs	r1, #0
 800188a:	f003 fd12 	bl	80052b2 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	0018      	movs	r0, r3
 8001892:	231c      	movs	r3, #28
 8001894:	001a      	movs	r2, r3
 8001896:	2100      	movs	r1, #0
 8001898:	f003 fd0b 	bl	80052b2 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800189c:	4b39      	ldr	r3, [pc, #228]	@ (8001984 <MX_TIM3_Init+0x11c>)
 800189e:	4a3a      	ldr	r2, [pc, #232]	@ (8001988 <MX_TIM3_Init+0x120>)
 80018a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10-1;
 80018a2:	4b38      	ldr	r3, [pc, #224]	@ (8001984 <MX_TIM3_Init+0x11c>)
 80018a4:	2209      	movs	r2, #9
 80018a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a8:	4b36      	ldr	r3, [pc, #216]	@ (8001984 <MX_TIM3_Init+0x11c>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 80018ae:	4b35      	ldr	r3, [pc, #212]	@ (8001984 <MX_TIM3_Init+0x11c>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b4:	4b33      	ldr	r3, [pc, #204]	@ (8001984 <MX_TIM3_Init+0x11c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018ba:	4b32      	ldr	r3, [pc, #200]	@ (8001984 <MX_TIM3_Init+0x11c>)
 80018bc:	2280      	movs	r2, #128	@ 0x80
 80018be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018c0:	4b30      	ldr	r3, [pc, #192]	@ (8001984 <MX_TIM3_Init+0x11c>)
 80018c2:	0018      	movs	r0, r3
 80018c4:	f001 fd3e 	bl	8003344 <HAL_TIM_Base_Init>
 80018c8:	1e03      	subs	r3, r0, #0
 80018ca:	d001      	beq.n	80018d0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80018cc:	f000 f9a0 	bl	8001c10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018d0:	2128      	movs	r1, #40	@ 0x28
 80018d2:	187b      	adds	r3, r7, r1
 80018d4:	2280      	movs	r2, #128	@ 0x80
 80018d6:	0152      	lsls	r2, r2, #5
 80018d8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018da:	187a      	adds	r2, r7, r1
 80018dc:	4b29      	ldr	r3, [pc, #164]	@ (8001984 <MX_TIM3_Init+0x11c>)
 80018de:	0011      	movs	r1, r2
 80018e0:	0018      	movs	r0, r3
 80018e2:	f001 ff43 	bl	800376c <HAL_TIM_ConfigClockSource>
 80018e6:	1e03      	subs	r3, r0, #0
 80018e8:	d001      	beq.n	80018ee <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80018ea:	f000 f991 	bl	8001c10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018ee:	4b25      	ldr	r3, [pc, #148]	@ (8001984 <MX_TIM3_Init+0x11c>)
 80018f0:	0018      	movs	r0, r3
 80018f2:	f001 fd77 	bl	80033e4 <HAL_TIM_PWM_Init>
 80018f6:	1e03      	subs	r3, r0, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80018fa:	f000 f989 	bl	8001c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018fe:	2120      	movs	r1, #32
 8001900:	187b      	adds	r3, r7, r1
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001906:	187b      	adds	r3, r7, r1
 8001908:	2200      	movs	r2, #0
 800190a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800190c:	187a      	adds	r2, r7, r1
 800190e:	4b1d      	ldr	r3, [pc, #116]	@ (8001984 <MX_TIM3_Init+0x11c>)
 8001910:	0011      	movs	r1, r2
 8001912:	0018      	movs	r0, r3
 8001914:	f002 fb16 	bl	8003f44 <HAL_TIMEx_MasterConfigSynchronization>
 8001918:	1e03      	subs	r3, r0, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800191c:	f000 f978 	bl	8001c10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	2260      	movs	r2, #96	@ 0x60
 8001924:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	2200      	movs	r2, #0
 800192a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001938:	1d39      	adds	r1, r7, #4
 800193a:	4b12      	ldr	r3, [pc, #72]	@ (8001984 <MX_TIM3_Init+0x11c>)
 800193c:	2200      	movs	r2, #0
 800193e:	0018      	movs	r0, r3
 8001940:	f001 fe4e 	bl	80035e0 <HAL_TIM_PWM_ConfigChannel>
 8001944:	1e03      	subs	r3, r0, #0
 8001946:	d001      	beq.n	800194c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8001948:	f000 f962 	bl	8001c10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800194c:	1d39      	adds	r1, r7, #4
 800194e:	4b0d      	ldr	r3, [pc, #52]	@ (8001984 <MX_TIM3_Init+0x11c>)
 8001950:	2204      	movs	r2, #4
 8001952:	0018      	movs	r0, r3
 8001954:	f001 fe44 	bl	80035e0 <HAL_TIM_PWM_ConfigChannel>
 8001958:	1e03      	subs	r3, r0, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 800195c:	f000 f958 	bl	8001c10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001960:	1d39      	adds	r1, r7, #4
 8001962:	4b08      	ldr	r3, [pc, #32]	@ (8001984 <MX_TIM3_Init+0x11c>)
 8001964:	220c      	movs	r2, #12
 8001966:	0018      	movs	r0, r3
 8001968:	f001 fe3a 	bl	80035e0 <HAL_TIM_PWM_ConfigChannel>
 800196c:	1e03      	subs	r3, r0, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 8001970:	f000 f94e 	bl	8001c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001974:	4b03      	ldr	r3, [pc, #12]	@ (8001984 <MX_TIM3_Init+0x11c>)
 8001976:	0018      	movs	r0, r3
 8001978:	f000 f9be 	bl	8001cf8 <HAL_TIM_MspPostInit>

}
 800197c:	46c0      	nop			@ (mov r8, r8)
 800197e:	46bd      	mov	sp, r7
 8001980:	b00e      	add	sp, #56	@ 0x38
 8001982:	bd80      	pop	{r7, pc}
 8001984:	200000c4 	.word	0x200000c4
 8001988:	40000400 	.word	0x40000400

0800198c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001992:	1d3b      	adds	r3, r7, #4
 8001994:	0018      	movs	r0, r3
 8001996:	231c      	movs	r3, #28
 8001998:	001a      	movs	r2, r3
 800199a:	2100      	movs	r1, #0
 800199c:	f003 fc89 	bl	80052b2 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80019a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a20 <MX_TIM14_Init+0x94>)
 80019a2:	4a20      	ldr	r2, [pc, #128]	@ (8001a24 <MX_TIM14_Init+0x98>)
 80019a4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 10-1;
 80019a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a20 <MX_TIM14_Init+0x94>)
 80019a8:	2209      	movs	r2, #9
 80019aa:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001a20 <MX_TIM14_Init+0x94>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1;
 80019b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a20 <MX_TIM14_Init+0x94>)
 80019b4:	2201      	movs	r2, #1
 80019b6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b8:	4b19      	ldr	r3, [pc, #100]	@ (8001a20 <MX_TIM14_Init+0x94>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019be:	4b18      	ldr	r3, [pc, #96]	@ (8001a20 <MX_TIM14_Init+0x94>)
 80019c0:	2280      	movs	r2, #128	@ 0x80
 80019c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80019c4:	4b16      	ldr	r3, [pc, #88]	@ (8001a20 <MX_TIM14_Init+0x94>)
 80019c6:	0018      	movs	r0, r3
 80019c8:	f001 fcbc 	bl	8003344 <HAL_TIM_Base_Init>
 80019cc:	1e03      	subs	r3, r0, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 80019d0:	f000 f91e 	bl	8001c10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80019d4:	4b12      	ldr	r3, [pc, #72]	@ (8001a20 <MX_TIM14_Init+0x94>)
 80019d6:	0018      	movs	r0, r3
 80019d8:	f001 fd04 	bl	80033e4 <HAL_TIM_PWM_Init>
 80019dc:	1e03      	subs	r3, r0, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 80019e0:	f000 f916 	bl	8001c10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019e4:	1d3b      	adds	r3, r7, #4
 80019e6:	2260      	movs	r2, #96	@ 0x60
 80019e8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80019ea:	1d3b      	adds	r3, r7, #4
 80019ec:	2200      	movs	r2, #0
 80019ee:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019f0:	1d3b      	adds	r3, r7, #4
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019fc:	1d39      	adds	r1, r7, #4
 80019fe:	4b08      	ldr	r3, [pc, #32]	@ (8001a20 <MX_TIM14_Init+0x94>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	0018      	movs	r0, r3
 8001a04:	f001 fdec 	bl	80035e0 <HAL_TIM_PWM_ConfigChannel>
 8001a08:	1e03      	subs	r3, r0, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001a0c:	f000 f900 	bl	8001c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001a10:	4b03      	ldr	r3, [pc, #12]	@ (8001a20 <MX_TIM14_Init+0x94>)
 8001a12:	0018      	movs	r0, r3
 8001a14:	f000 f970 	bl	8001cf8 <HAL_TIM_MspPostInit>

}
 8001a18:	46c0      	nop			@ (mov r8, r8)
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	b008      	add	sp, #32
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	2000010c 	.word	0x2000010c
 8001a24:	40002000 	.word	0x40002000

08001a28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a2c:	4b14      	ldr	r3, [pc, #80]	@ (8001a80 <MX_USART2_UART_Init+0x58>)
 8001a2e:	4a15      	ldr	r2, [pc, #84]	@ (8001a84 <MX_USART2_UART_Init+0x5c>)
 8001a30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a32:	4b13      	ldr	r3, [pc, #76]	@ (8001a80 <MX_USART2_UART_Init+0x58>)
 8001a34:	22e1      	movs	r2, #225	@ 0xe1
 8001a36:	0252      	lsls	r2, r2, #9
 8001a38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a3a:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <MX_USART2_UART_Init+0x58>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a40:	4b0f      	ldr	r3, [pc, #60]	@ (8001a80 <MX_USART2_UART_Init+0x58>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	@ (8001a80 <MX_USART2_UART_Init+0x58>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a80 <MX_USART2_UART_Init+0x58>)
 8001a4e:	220c      	movs	r2, #12
 8001a50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a52:	4b0b      	ldr	r3, [pc, #44]	@ (8001a80 <MX_USART2_UART_Init+0x58>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a58:	4b09      	ldr	r3, [pc, #36]	@ (8001a80 <MX_USART2_UART_Init+0x58>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a5e:	4b08      	ldr	r3, [pc, #32]	@ (8001a80 <MX_USART2_UART_Init+0x58>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a64:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <MX_USART2_UART_Init+0x58>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a6a:	4b05      	ldr	r3, [pc, #20]	@ (8001a80 <MX_USART2_UART_Init+0x58>)
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f002 fb19 	bl	80040a4 <HAL_UART_Init>
 8001a72:	1e03      	subs	r3, r0, #0
 8001a74:	d001      	beq.n	8001a7a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a76:	f000 f8cb 	bl	8001c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a7a:	46c0      	nop			@ (mov r8, r8)
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000154 	.word	0x20000154
 8001a84:	40004400 	.word	0x40004400

08001a88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac0 <MX_DMA_Init+0x38>)
 8001a90:	695a      	ldr	r2, [r3, #20]
 8001a92:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac0 <MX_DMA_Init+0x38>)
 8001a94:	2101      	movs	r1, #1
 8001a96:	430a      	orrs	r2, r1
 8001a98:	615a      	str	r2, [r3, #20]
 8001a9a:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <MX_DMA_Init+0x38>)
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	200b      	movs	r0, #11
 8001aac:	f000 fc10 	bl	80022d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8001ab0:	200b      	movs	r0, #11
 8001ab2:	f000 fc22 	bl	80022fa <HAL_NVIC_EnableIRQ>

}
 8001ab6:	46c0      	nop			@ (mov r8, r8)
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	b002      	add	sp, #8
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	46c0      	nop			@ (mov r8, r8)
 8001ac0:	40021000 	.word	0x40021000

08001ac4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac4:	b590      	push	{r4, r7, lr}
 8001ac6:	b089      	sub	sp, #36	@ 0x24
 8001ac8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aca:	240c      	movs	r4, #12
 8001acc:	193b      	adds	r3, r7, r4
 8001ace:	0018      	movs	r0, r3
 8001ad0:	2314      	movs	r3, #20
 8001ad2:	001a      	movs	r2, r3
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	f003 fbec 	bl	80052b2 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ada:	4b24      	ldr	r3, [pc, #144]	@ (8001b6c <MX_GPIO_Init+0xa8>)
 8001adc:	695a      	ldr	r2, [r3, #20]
 8001ade:	4b23      	ldr	r3, [pc, #140]	@ (8001b6c <MX_GPIO_Init+0xa8>)
 8001ae0:	2180      	movs	r1, #128	@ 0x80
 8001ae2:	03c9      	lsls	r1, r1, #15
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	615a      	str	r2, [r3, #20]
 8001ae8:	4b20      	ldr	r3, [pc, #128]	@ (8001b6c <MX_GPIO_Init+0xa8>)
 8001aea:	695a      	ldr	r2, [r3, #20]
 8001aec:	2380      	movs	r3, #128	@ 0x80
 8001aee:	03db      	lsls	r3, r3, #15
 8001af0:	4013      	ands	r3, r2
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af6:	4b1d      	ldr	r3, [pc, #116]	@ (8001b6c <MX_GPIO_Init+0xa8>)
 8001af8:	695a      	ldr	r2, [r3, #20]
 8001afa:	4b1c      	ldr	r3, [pc, #112]	@ (8001b6c <MX_GPIO_Init+0xa8>)
 8001afc:	2180      	movs	r1, #128	@ 0x80
 8001afe:	0289      	lsls	r1, r1, #10
 8001b00:	430a      	orrs	r2, r1
 8001b02:	615a      	str	r2, [r3, #20]
 8001b04:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <MX_GPIO_Init+0xa8>)
 8001b06:	695a      	ldr	r2, [r3, #20]
 8001b08:	2380      	movs	r3, #128	@ 0x80
 8001b0a:	029b      	lsls	r3, r3, #10
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	607b      	str	r3, [r7, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b12:	4b16      	ldr	r3, [pc, #88]	@ (8001b6c <MX_GPIO_Init+0xa8>)
 8001b14:	695a      	ldr	r2, [r3, #20]
 8001b16:	4b15      	ldr	r3, [pc, #84]	@ (8001b6c <MX_GPIO_Init+0xa8>)
 8001b18:	2180      	movs	r1, #128	@ 0x80
 8001b1a:	02c9      	lsls	r1, r1, #11
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	615a      	str	r2, [r3, #20]
 8001b20:	4b12      	ldr	r3, [pc, #72]	@ (8001b6c <MX_GPIO_Init+0xa8>)
 8001b22:	695a      	ldr	r2, [r3, #20]
 8001b24:	2380      	movs	r3, #128	@ 0x80
 8001b26:	02db      	lsls	r3, r3, #11
 8001b28:	4013      	ands	r3, r2
 8001b2a:	603b      	str	r3, [r7, #0]
 8001b2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001b2e:	2390      	movs	r3, #144	@ 0x90
 8001b30:	05db      	lsls	r3, r3, #23
 8001b32:	2200      	movs	r2, #0
 8001b34:	2102      	movs	r1, #2
 8001b36:	0018      	movs	r0, r3
 8001b38:	f000 ff82 	bl	8002a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b3c:	0021      	movs	r1, r4
 8001b3e:	187b      	adds	r3, r7, r1
 8001b40:	2202      	movs	r2, #2
 8001b42:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b44:	187b      	adds	r3, r7, r1
 8001b46:	2201      	movs	r2, #1
 8001b48:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	187b      	adds	r3, r7, r1
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b50:	187b      	adds	r3, r7, r1
 8001b52:	2200      	movs	r2, #0
 8001b54:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b56:	187a      	adds	r2, r7, r1
 8001b58:	2390      	movs	r3, #144	@ 0x90
 8001b5a:	05db      	lsls	r3, r3, #23
 8001b5c:	0011      	movs	r1, r2
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f000 fdfe 	bl	8002760 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b64:	46c0      	nop			@ (mov r8, r8)
 8001b66:	46bd      	mov	sp, r7
 8001b68:	b009      	add	sp, #36	@ 0x24
 8001b6a:	bd90      	pop	{r4, r7, pc}
 8001b6c:	40021000 	.word	0x40021000

08001b70 <HAL_UART_RxCpltCallback>:

//uint8_t out_buff_2[128] = "Button received.\n\r";


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b70:	b590      	push	{r4, r7, lr}
 8001b72:	b085      	sub	sp, #20
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]

	for(int i=0; i<numMotors; i++) {
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	e02f      	b.n	8001bde <HAL_UART_RxCpltCallback+0x6e>
		float value = (float)(UART2_rxBuffer[i]) / 255.0;
 8001b7e:	4a1e      	ldr	r2, [pc, #120]	@ (8001bf8 <HAL_UART_RxCpltCallback+0x88>)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	18d3      	adds	r3, r2, r3
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	0018      	movs	r0, r3
 8001b88:	f7ff fa0e 	bl	8000fa8 <__aeabi_ui2f>
 8001b8c:	1c03      	adds	r3, r0, #0
 8001b8e:	491b      	ldr	r1, [pc, #108]	@ (8001bfc <HAL_UART_RxCpltCallback+0x8c>)
 8001b90:	1c18      	adds	r0, r3, #0
 8001b92:	f7fe fd21 	bl	80005d8 <__aeabi_fdiv>
 8001b96:	1c03      	adds	r3, r0, #0
 8001b98:	60bb      	str	r3, [r7, #8]
		desiredMotorAngles[i] = motorLo[i] + (motorHi[i]-motorLo[i])*value;
 8001b9a:	4b19      	ldr	r3, [pc, #100]	@ (8001c00 <HAL_UART_RxCpltCallback+0x90>)
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	0092      	lsls	r2, r2, #2
 8001ba0:	58d4      	ldr	r4, [r2, r3]
 8001ba2:	4b18      	ldr	r3, [pc, #96]	@ (8001c04 <HAL_UART_RxCpltCallback+0x94>)
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	0092      	lsls	r2, r2, #2
 8001ba8:	58d0      	ldr	r0, [r2, r3]
 8001baa:	4b15      	ldr	r3, [pc, #84]	@ (8001c00 <HAL_UART_RxCpltCallback+0x90>)
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	0092      	lsls	r2, r2, #2
 8001bb0:	58d3      	ldr	r3, [r2, r3]
 8001bb2:	1c19      	adds	r1, r3, #0
 8001bb4:	f7ff f834 	bl	8000c20 <__aeabi_fsub>
 8001bb8:	1c03      	adds	r3, r0, #0
 8001bba:	68b9      	ldr	r1, [r7, #8]
 8001bbc:	1c18      	adds	r0, r3, #0
 8001bbe:	f7fe fef1 	bl	80009a4 <__aeabi_fmul>
 8001bc2:	1c03      	adds	r3, r0, #0
 8001bc4:	1c19      	adds	r1, r3, #0
 8001bc6:	1c20      	adds	r0, r4, #0
 8001bc8:	f7fe fb7c 	bl	80002c4 <__aeabi_fadd>
 8001bcc:	1c03      	adds	r3, r0, #0
 8001bce:	1c19      	adds	r1, r3, #0
 8001bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001c08 <HAL_UART_RxCpltCallback+0x98>)
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	0092      	lsls	r2, r2, #2
 8001bd6:	50d1      	str	r1, [r2, r3]
	for(int i=0; i<numMotors; i++) {
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	3301      	adds	r3, #1
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	ddcc      	ble.n	8001b7e <HAL_UART_RxCpltCallback+0xe>
	}

	HAL_UART_Receive_DMA(&huart2, UART2_rxBuffer, numMotors);
 8001be4:	4904      	ldr	r1, [pc, #16]	@ (8001bf8 <HAL_UART_RxCpltCallback+0x88>)
 8001be6:	4b09      	ldr	r3, [pc, #36]	@ (8001c0c <HAL_UART_RxCpltCallback+0x9c>)
 8001be8:	2205      	movs	r2, #5
 8001bea:	0018      	movs	r0, r3
 8001bec:	f002 faae 	bl	800414c <HAL_UART_Receive_DMA>
}
 8001bf0:	46c0      	nop			@ (mov r8, r8)
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	b005      	add	sp, #20
 8001bf6:	bd90      	pop	{r4, r7, pc}
 8001bf8:	20000220 	.word	0x20000220
 8001bfc:	437f0000 	.word	0x437f0000
 8001c00:	20000000 	.word	0x20000000
 8001c04:	20000014 	.word	0x20000014
 8001c08:	20000230 	.word	0x20000230
 8001c0c:	20000154 	.word	0x20000154

08001c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c14:	b672      	cpsid	i
}
 8001c16:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c18:	46c0      	nop			@ (mov r8, r8)
 8001c1a:	e7fd      	b.n	8001c18 <Error_Handler+0x8>

08001c1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c22:	4b0f      	ldr	r3, [pc, #60]	@ (8001c60 <HAL_MspInit+0x44>)
 8001c24:	699a      	ldr	r2, [r3, #24]
 8001c26:	4b0e      	ldr	r3, [pc, #56]	@ (8001c60 <HAL_MspInit+0x44>)
 8001c28:	2101      	movs	r1, #1
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	619a      	str	r2, [r3, #24]
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c60 <HAL_MspInit+0x44>)
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	2201      	movs	r2, #1
 8001c34:	4013      	ands	r3, r2
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c3a:	4b09      	ldr	r3, [pc, #36]	@ (8001c60 <HAL_MspInit+0x44>)
 8001c3c:	69da      	ldr	r2, [r3, #28]
 8001c3e:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <HAL_MspInit+0x44>)
 8001c40:	2180      	movs	r1, #128	@ 0x80
 8001c42:	0549      	lsls	r1, r1, #21
 8001c44:	430a      	orrs	r2, r1
 8001c46:	61da      	str	r2, [r3, #28]
 8001c48:	4b05      	ldr	r3, [pc, #20]	@ (8001c60 <HAL_MspInit+0x44>)
 8001c4a:	69da      	ldr	r2, [r3, #28]
 8001c4c:	2380      	movs	r3, #128	@ 0x80
 8001c4e:	055b      	lsls	r3, r3, #21
 8001c50:	4013      	ands	r3, r2
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c56:	46c0      	nop			@ (mov r8, r8)
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	b002      	add	sp, #8
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	46c0      	nop			@ (mov r8, r8)
 8001c60:	40021000 	.word	0x40021000

08001c64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a1d      	ldr	r2, [pc, #116]	@ (8001ce8 <HAL_TIM_Base_MspInit+0x84>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d10e      	bne.n	8001c94 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c76:	4b1d      	ldr	r3, [pc, #116]	@ (8001cec <HAL_TIM_Base_MspInit+0x88>)
 8001c78:	699a      	ldr	r2, [r3, #24]
 8001c7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cec <HAL_TIM_Base_MspInit+0x88>)
 8001c7c:	2180      	movs	r1, #128	@ 0x80
 8001c7e:	0109      	lsls	r1, r1, #4
 8001c80:	430a      	orrs	r2, r1
 8001c82:	619a      	str	r2, [r3, #24]
 8001c84:	4b19      	ldr	r3, [pc, #100]	@ (8001cec <HAL_TIM_Base_MspInit+0x88>)
 8001c86:	699a      	ldr	r2, [r3, #24]
 8001c88:	2380      	movs	r3, #128	@ 0x80
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001c92:	e024      	b.n	8001cde <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM3)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a15      	ldr	r2, [pc, #84]	@ (8001cf0 <HAL_TIM_Base_MspInit+0x8c>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d10c      	bne.n	8001cb8 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c9e:	4b13      	ldr	r3, [pc, #76]	@ (8001cec <HAL_TIM_Base_MspInit+0x88>)
 8001ca0:	69da      	ldr	r2, [r3, #28]
 8001ca2:	4b12      	ldr	r3, [pc, #72]	@ (8001cec <HAL_TIM_Base_MspInit+0x88>)
 8001ca4:	2102      	movs	r1, #2
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	61da      	str	r2, [r3, #28]
 8001caa:	4b10      	ldr	r3, [pc, #64]	@ (8001cec <HAL_TIM_Base_MspInit+0x88>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	2202      	movs	r2, #2
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	693b      	ldr	r3, [r7, #16]
}
 8001cb6:	e012      	b.n	8001cde <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM14)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8001cf4 <HAL_TIM_Base_MspInit+0x90>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d10d      	bne.n	8001cde <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cec <HAL_TIM_Base_MspInit+0x88>)
 8001cc4:	69da      	ldr	r2, [r3, #28]
 8001cc6:	4b09      	ldr	r3, [pc, #36]	@ (8001cec <HAL_TIM_Base_MspInit+0x88>)
 8001cc8:	2180      	movs	r1, #128	@ 0x80
 8001cca:	0049      	lsls	r1, r1, #1
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	61da      	str	r2, [r3, #28]
 8001cd0:	4b06      	ldr	r3, [pc, #24]	@ (8001cec <HAL_TIM_Base_MspInit+0x88>)
 8001cd2:	69da      	ldr	r2, [r3, #28]
 8001cd4:	2380      	movs	r3, #128	@ 0x80
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]
}
 8001cde:	46c0      	nop			@ (mov r8, r8)
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	b006      	add	sp, #24
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	46c0      	nop			@ (mov r8, r8)
 8001ce8:	40012c00 	.word	0x40012c00
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40000400 	.word	0x40000400
 8001cf4:	40002000 	.word	0x40002000

08001cf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cf8:	b590      	push	{r4, r7, lr}
 8001cfa:	b08d      	sub	sp, #52	@ 0x34
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d00:	241c      	movs	r4, #28
 8001d02:	193b      	adds	r3, r7, r4
 8001d04:	0018      	movs	r0, r3
 8001d06:	2314      	movs	r3, #20
 8001d08:	001a      	movs	r2, r3
 8001d0a:	2100      	movs	r1, #0
 8001d0c:	f003 fad1 	bl	80052b2 <memset>
  if(htim->Instance==TIM1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a53      	ldr	r2, [pc, #332]	@ (8001e64 <HAL_TIM_MspPostInit+0x16c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d126      	bne.n	8001d68 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	4b53      	ldr	r3, [pc, #332]	@ (8001e68 <HAL_TIM_MspPostInit+0x170>)
 8001d1c:	695a      	ldr	r2, [r3, #20]
 8001d1e:	4b52      	ldr	r3, [pc, #328]	@ (8001e68 <HAL_TIM_MspPostInit+0x170>)
 8001d20:	2180      	movs	r1, #128	@ 0x80
 8001d22:	0289      	lsls	r1, r1, #10
 8001d24:	430a      	orrs	r2, r1
 8001d26:	615a      	str	r2, [r3, #20]
 8001d28:	4b4f      	ldr	r3, [pc, #316]	@ (8001e68 <HAL_TIM_MspPostInit+0x170>)
 8001d2a:	695a      	ldr	r2, [r3, #20]
 8001d2c:	2380      	movs	r3, #128	@ 0x80
 8001d2e:	029b      	lsls	r3, r3, #10
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
 8001d34:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d36:	193b      	adds	r3, r7, r4
 8001d38:	22c0      	movs	r2, #192	@ 0xc0
 8001d3a:	00d2      	lsls	r2, r2, #3
 8001d3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3e:	0021      	movs	r1, r4
 8001d40:	187b      	adds	r3, r7, r1
 8001d42:	2202      	movs	r2, #2
 8001d44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	187b      	adds	r3, r7, r1
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4c:	187b      	adds	r3, r7, r1
 8001d4e:	2200      	movs	r2, #0
 8001d50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001d52:	187b      	adds	r3, r7, r1
 8001d54:	2202      	movs	r2, #2
 8001d56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d58:	187a      	adds	r2, r7, r1
 8001d5a:	2390      	movs	r3, #144	@ 0x90
 8001d5c:	05db      	lsls	r3, r3, #23
 8001d5e:	0011      	movs	r1, r2
 8001d60:	0018      	movs	r0, r3
 8001d62:	f000 fcfd 	bl	8002760 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001d66:	e078      	b.n	8001e5a <HAL_TIM_MspPostInit+0x162>
  else if(htim->Instance==TIM3)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a3f      	ldr	r2, [pc, #252]	@ (8001e6c <HAL_TIM_MspPostInit+0x174>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d149      	bne.n	8001e06 <HAL_TIM_MspPostInit+0x10e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	4b3d      	ldr	r3, [pc, #244]	@ (8001e68 <HAL_TIM_MspPostInit+0x170>)
 8001d74:	695a      	ldr	r2, [r3, #20]
 8001d76:	4b3c      	ldr	r3, [pc, #240]	@ (8001e68 <HAL_TIM_MspPostInit+0x170>)
 8001d78:	2180      	movs	r1, #128	@ 0x80
 8001d7a:	0289      	lsls	r1, r1, #10
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	615a      	str	r2, [r3, #20]
 8001d80:	4b39      	ldr	r3, [pc, #228]	@ (8001e68 <HAL_TIM_MspPostInit+0x170>)
 8001d82:	695a      	ldr	r2, [r3, #20]
 8001d84:	2380      	movs	r3, #128	@ 0x80
 8001d86:	029b      	lsls	r3, r3, #10
 8001d88:	4013      	ands	r3, r2
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8e:	4b36      	ldr	r3, [pc, #216]	@ (8001e68 <HAL_TIM_MspPostInit+0x170>)
 8001d90:	695a      	ldr	r2, [r3, #20]
 8001d92:	4b35      	ldr	r3, [pc, #212]	@ (8001e68 <HAL_TIM_MspPostInit+0x170>)
 8001d94:	2180      	movs	r1, #128	@ 0x80
 8001d96:	02c9      	lsls	r1, r1, #11
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	615a      	str	r2, [r3, #20]
 8001d9c:	4b32      	ldr	r3, [pc, #200]	@ (8001e68 <HAL_TIM_MspPostInit+0x170>)
 8001d9e:	695a      	ldr	r2, [r3, #20]
 8001da0:	2380      	movs	r3, #128	@ 0x80
 8001da2:	02db      	lsls	r3, r3, #11
 8001da4:	4013      	ands	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001daa:	241c      	movs	r4, #28
 8001dac:	193b      	adds	r3, r7, r4
 8001dae:	22c0      	movs	r2, #192	@ 0xc0
 8001db0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db2:	193b      	adds	r3, r7, r4
 8001db4:	2202      	movs	r2, #2
 8001db6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	193b      	adds	r3, r7, r4
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbe:	193b      	adds	r3, r7, r4
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001dc4:	193b      	adds	r3, r7, r4
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dca:	193a      	adds	r2, r7, r4
 8001dcc:	2390      	movs	r3, #144	@ 0x90
 8001dce:	05db      	lsls	r3, r3, #23
 8001dd0:	0011      	movs	r1, r2
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f000 fcc4 	bl	8002760 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001dd8:	0021      	movs	r1, r4
 8001dda:	187b      	adds	r3, r7, r1
 8001ddc:	2202      	movs	r2, #2
 8001dde:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de0:	187b      	adds	r3, r7, r1
 8001de2:	2202      	movs	r2, #2
 8001de4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	187b      	adds	r3, r7, r1
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dec:	187b      	adds	r3, r7, r1
 8001dee:	2200      	movs	r2, #0
 8001df0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001df2:	187b      	adds	r3, r7, r1
 8001df4:	2201      	movs	r2, #1
 8001df6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df8:	187b      	adds	r3, r7, r1
 8001dfa:	4a1d      	ldr	r2, [pc, #116]	@ (8001e70 <HAL_TIM_MspPostInit+0x178>)
 8001dfc:	0019      	movs	r1, r3
 8001dfe:	0010      	movs	r0, r2
 8001e00:	f000 fcae 	bl	8002760 <HAL_GPIO_Init>
}
 8001e04:	e029      	b.n	8001e5a <HAL_TIM_MspPostInit+0x162>
  else if(htim->Instance==TIM14)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a1a      	ldr	r2, [pc, #104]	@ (8001e74 <HAL_TIM_MspPostInit+0x17c>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d124      	bne.n	8001e5a <HAL_TIM_MspPostInit+0x162>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e10:	4b15      	ldr	r3, [pc, #84]	@ (8001e68 <HAL_TIM_MspPostInit+0x170>)
 8001e12:	695a      	ldr	r2, [r3, #20]
 8001e14:	4b14      	ldr	r3, [pc, #80]	@ (8001e68 <HAL_TIM_MspPostInit+0x170>)
 8001e16:	2180      	movs	r1, #128	@ 0x80
 8001e18:	0289      	lsls	r1, r1, #10
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	615a      	str	r2, [r3, #20]
 8001e1e:	4b12      	ldr	r3, [pc, #72]	@ (8001e68 <HAL_TIM_MspPostInit+0x170>)
 8001e20:	695a      	ldr	r2, [r3, #20]
 8001e22:	2380      	movs	r3, #128	@ 0x80
 8001e24:	029b      	lsls	r3, r3, #10
 8001e26:	4013      	ands	r3, r2
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e2c:	211c      	movs	r1, #28
 8001e2e:	187b      	adds	r3, r7, r1
 8001e30:	2210      	movs	r2, #16
 8001e32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	187b      	adds	r3, r7, r1
 8001e36:	2202      	movs	r2, #2
 8001e38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	187b      	adds	r3, r7, r1
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e40:	187b      	adds	r3, r7, r1
 8001e42:	2200      	movs	r2, #0
 8001e44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8001e46:	187b      	adds	r3, r7, r1
 8001e48:	2204      	movs	r2, #4
 8001e4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4c:	187a      	adds	r2, r7, r1
 8001e4e:	2390      	movs	r3, #144	@ 0x90
 8001e50:	05db      	lsls	r3, r3, #23
 8001e52:	0011      	movs	r1, r2
 8001e54:	0018      	movs	r0, r3
 8001e56:	f000 fc83 	bl	8002760 <HAL_GPIO_Init>
}
 8001e5a:	46c0      	nop			@ (mov r8, r8)
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	b00d      	add	sp, #52	@ 0x34
 8001e60:	bd90      	pop	{r4, r7, pc}
 8001e62:	46c0      	nop			@ (mov r8, r8)
 8001e64:	40012c00 	.word	0x40012c00
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	40000400 	.word	0x40000400
 8001e70:	48000400 	.word	0x48000400
 8001e74:	40002000 	.word	0x40002000

08001e78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e78:	b590      	push	{r4, r7, lr}
 8001e7a:	b08b      	sub	sp, #44	@ 0x2c
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e80:	2414      	movs	r4, #20
 8001e82:	193b      	adds	r3, r7, r4
 8001e84:	0018      	movs	r0, r3
 8001e86:	2314      	movs	r3, #20
 8001e88:	001a      	movs	r2, r3
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	f003 fa11 	bl	80052b2 <memset>
  if(huart->Instance==USART2)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a33      	ldr	r2, [pc, #204]	@ (8001f64 <HAL_UART_MspInit+0xec>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d160      	bne.n	8001f5c <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e9a:	4b33      	ldr	r3, [pc, #204]	@ (8001f68 <HAL_UART_MspInit+0xf0>)
 8001e9c:	69da      	ldr	r2, [r3, #28]
 8001e9e:	4b32      	ldr	r3, [pc, #200]	@ (8001f68 <HAL_UART_MspInit+0xf0>)
 8001ea0:	2180      	movs	r1, #128	@ 0x80
 8001ea2:	0289      	lsls	r1, r1, #10
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	61da      	str	r2, [r3, #28]
 8001ea8:	4b2f      	ldr	r3, [pc, #188]	@ (8001f68 <HAL_UART_MspInit+0xf0>)
 8001eaa:	69da      	ldr	r2, [r3, #28]
 8001eac:	2380      	movs	r3, #128	@ 0x80
 8001eae:	029b      	lsls	r3, r3, #10
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb6:	4b2c      	ldr	r3, [pc, #176]	@ (8001f68 <HAL_UART_MspInit+0xf0>)
 8001eb8:	695a      	ldr	r2, [r3, #20]
 8001eba:	4b2b      	ldr	r3, [pc, #172]	@ (8001f68 <HAL_UART_MspInit+0xf0>)
 8001ebc:	2180      	movs	r1, #128	@ 0x80
 8001ebe:	0289      	lsls	r1, r1, #10
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	615a      	str	r2, [r3, #20]
 8001ec4:	4b28      	ldr	r3, [pc, #160]	@ (8001f68 <HAL_UART_MspInit+0xf0>)
 8001ec6:	695a      	ldr	r2, [r3, #20]
 8001ec8:	2380      	movs	r3, #128	@ 0x80
 8001eca:	029b      	lsls	r3, r3, #10
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ed2:	0021      	movs	r1, r4
 8001ed4:	187b      	adds	r3, r7, r1
 8001ed6:	220c      	movs	r2, #12
 8001ed8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eda:	187b      	adds	r3, r7, r1
 8001edc:	2202      	movs	r2, #2
 8001ede:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	187b      	adds	r3, r7, r1
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ee6:	187b      	adds	r3, r7, r1
 8001ee8:	2203      	movs	r2, #3
 8001eea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001eec:	187b      	adds	r3, r7, r1
 8001eee:	2201      	movs	r2, #1
 8001ef0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef2:	187a      	adds	r2, r7, r1
 8001ef4:	2390      	movs	r3, #144	@ 0x90
 8001ef6:	05db      	lsls	r3, r3, #23
 8001ef8:	0011      	movs	r1, r2
 8001efa:	0018      	movs	r0, r3
 8001efc:	f000 fc30 	bl	8002760 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel5;
 8001f00:	4b1a      	ldr	r3, [pc, #104]	@ (8001f6c <HAL_UART_MspInit+0xf4>)
 8001f02:	4a1b      	ldr	r2, [pc, #108]	@ (8001f70 <HAL_UART_MspInit+0xf8>)
 8001f04:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f06:	4b19      	ldr	r3, [pc, #100]	@ (8001f6c <HAL_UART_MspInit+0xf4>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f0c:	4b17      	ldr	r3, [pc, #92]	@ (8001f6c <HAL_UART_MspInit+0xf4>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f12:	4b16      	ldr	r3, [pc, #88]	@ (8001f6c <HAL_UART_MspInit+0xf4>)
 8001f14:	2280      	movs	r2, #128	@ 0x80
 8001f16:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f18:	4b14      	ldr	r3, [pc, #80]	@ (8001f6c <HAL_UART_MspInit+0xf4>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f1e:	4b13      	ldr	r3, [pc, #76]	@ (8001f6c <HAL_UART_MspInit+0xf4>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001f24:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <HAL_UART_MspInit+0xf4>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f2a:	4b10      	ldr	r3, [pc, #64]	@ (8001f6c <HAL_UART_MspInit+0xf4>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001f30:	4b0e      	ldr	r3, [pc, #56]	@ (8001f6c <HAL_UART_MspInit+0xf4>)
 8001f32:	0018      	movs	r0, r3
 8001f34:	f000 f9fe 	bl	8002334 <HAL_DMA_Init>
 8001f38:	1e03      	subs	r3, r0, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8001f3c:	f7ff fe68 	bl	8001c10 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a0a      	ldr	r2, [pc, #40]	@ (8001f6c <HAL_UART_MspInit+0xf4>)
 8001f44:	675a      	str	r2, [r3, #116]	@ 0x74
 8001f46:	4b09      	ldr	r3, [pc, #36]	@ (8001f6c <HAL_UART_MspInit+0xf4>)
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2100      	movs	r1, #0
 8001f50:	201c      	movs	r0, #28
 8001f52:	f000 f9bd 	bl	80022d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f56:	201c      	movs	r0, #28
 8001f58:	f000 f9cf 	bl	80022fa <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001f5c:	46c0      	nop			@ (mov r8, r8)
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	b00b      	add	sp, #44	@ 0x2c
 8001f62:	bd90      	pop	{r4, r7, pc}
 8001f64:	40004400 	.word	0x40004400
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	200001dc 	.word	0x200001dc
 8001f70:	40020058 	.word	0x40020058

08001f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f78:	46c0      	nop			@ (mov r8, r8)
 8001f7a:	e7fd      	b.n	8001f78 <NMI_Handler+0x4>

08001f7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f80:	46c0      	nop			@ (mov r8, r8)
 8001f82:	e7fd      	b.n	8001f80 <HardFault_Handler+0x4>

08001f84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f88:	46c0      	nop			@ (mov r8, r8)
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f92:	46c0      	nop			@ (mov r8, r8)
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f9c:	f000 f8ac 	bl	80020f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fa0:	46c0      	nop			@ (mov r8, r8)
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001fac:	4b03      	ldr	r3, [pc, #12]	@ (8001fbc <DMA1_Channel4_5_IRQHandler+0x14>)
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f000 faeb 	bl	800258a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8001fb4:	46c0      	nop			@ (mov r8, r8)
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	46c0      	nop			@ (mov r8, r8)
 8001fbc:	200001dc 	.word	0x200001dc

08001fc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fc4:	4b03      	ldr	r3, [pc, #12]	@ (8001fd4 <USART2_IRQHandler+0x14>)
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	f002 f918 	bl	80041fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fcc:	46c0      	nop			@ (mov r8, r8)
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	46c0      	nop			@ (mov r8, r8)
 8001fd4:	20000154 	.word	0x20000154

08001fd8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001fdc:	46c0      	nop			@ (mov r8, r8)
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fe4:	4813      	ldr	r0, [pc, #76]	@ (8002034 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001fe6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fe8:	f7ff fff6 	bl	8001fd8 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001fec:	4812      	ldr	r0, [pc, #72]	@ (8002038 <LoopForever+0x6>)
    LDR R1, [R0]
 8001fee:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001ff0:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001ff2:	4a12      	ldr	r2, [pc, #72]	@ (800203c <LoopForever+0xa>)
    CMP R1, R2
 8001ff4:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001ff6:	d105      	bne.n	8002004 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001ff8:	4811      	ldr	r0, [pc, #68]	@ (8002040 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001ffa:	4912      	ldr	r1, [pc, #72]	@ (8002044 <LoopForever+0x12>)
    STR R1, [R0]
 8001ffc:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001ffe:	4812      	ldr	r0, [pc, #72]	@ (8002048 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8002000:	4912      	ldr	r1, [pc, #72]	@ (800204c <LoopForever+0x1a>)
    STR R1, [R0]
 8002002:	6001      	str	r1, [r0, #0]

08002004 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002004:	4812      	ldr	r0, [pc, #72]	@ (8002050 <LoopForever+0x1e>)
  ldr r1, =_edata
 8002006:	4913      	ldr	r1, [pc, #76]	@ (8002054 <LoopForever+0x22>)
  ldr r2, =_sidata
 8002008:	4a13      	ldr	r2, [pc, #76]	@ (8002058 <LoopForever+0x26>)
  movs r3, #0
 800200a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800200c:	e002      	b.n	8002014 <LoopCopyDataInit>

0800200e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800200e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002012:	3304      	adds	r3, #4

08002014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002018:	d3f9      	bcc.n	800200e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800201a:	4a10      	ldr	r2, [pc, #64]	@ (800205c <LoopForever+0x2a>)
  ldr r4, =_ebss
 800201c:	4c10      	ldr	r4, [pc, #64]	@ (8002060 <LoopForever+0x2e>)
  movs r3, #0
 800201e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002020:	e001      	b.n	8002026 <LoopFillZerobss>

08002022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002024:	3204      	adds	r2, #4

08002026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002028:	d3fb      	bcc.n	8002022 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800202a:	f003 f94b 	bl	80052c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800202e:	f7ff fa87 	bl	8001540 <main>

08002032 <LoopForever>:

LoopForever:
    b LoopForever
 8002032:	e7fe      	b.n	8002032 <LoopForever>
  ldr   r0, =_estack
 8002034:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8002038:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800203c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8002040:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8002044:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002048:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800204c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8002050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002054:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002058:	080053e0 	.word	0x080053e0
  ldr r2, =_sbss
 800205c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002060:	20000270 	.word	0x20000270

08002064 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002064:	e7fe      	b.n	8002064 <ADC1_IRQHandler>
	...

08002068 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800206c:	4b07      	ldr	r3, [pc, #28]	@ (800208c <HAL_Init+0x24>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b06      	ldr	r3, [pc, #24]	@ (800208c <HAL_Init+0x24>)
 8002072:	2110      	movs	r1, #16
 8002074:	430a      	orrs	r2, r1
 8002076:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002078:	2003      	movs	r0, #3
 800207a:	f000 f809 	bl	8002090 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800207e:	f7ff fdcd 	bl	8001c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	0018      	movs	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	46c0      	nop			@ (mov r8, r8)
 800208c:	40022000 	.word	0x40022000

08002090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002090:	b590      	push	{r4, r7, lr}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002098:	4b14      	ldr	r3, [pc, #80]	@ (80020ec <HAL_InitTick+0x5c>)
 800209a:	681c      	ldr	r4, [r3, #0]
 800209c:	4b14      	ldr	r3, [pc, #80]	@ (80020f0 <HAL_InitTick+0x60>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	0019      	movs	r1, r3
 80020a2:	23fa      	movs	r3, #250	@ 0xfa
 80020a4:	0098      	lsls	r0, r3, #2
 80020a6:	f7fe f82f 	bl	8000108 <__udivsi3>
 80020aa:	0003      	movs	r3, r0
 80020ac:	0019      	movs	r1, r3
 80020ae:	0020      	movs	r0, r4
 80020b0:	f7fe f82a 	bl	8000108 <__udivsi3>
 80020b4:	0003      	movs	r3, r0
 80020b6:	0018      	movs	r0, r3
 80020b8:	f000 f92f 	bl	800231a <HAL_SYSTICK_Config>
 80020bc:	1e03      	subs	r3, r0, #0
 80020be:	d001      	beq.n	80020c4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e00f      	b.n	80020e4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	d80b      	bhi.n	80020e2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	2301      	movs	r3, #1
 80020ce:	425b      	negs	r3, r3
 80020d0:	2200      	movs	r2, #0
 80020d2:	0018      	movs	r0, r3
 80020d4:	f000 f8fc 	bl	80022d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020d8:	4b06      	ldr	r3, [pc, #24]	@ (80020f4 <HAL_InitTick+0x64>)
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	e000      	b.n	80020e4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
}
 80020e4:	0018      	movs	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	b003      	add	sp, #12
 80020ea:	bd90      	pop	{r4, r7, pc}
 80020ec:	20000054 	.word	0x20000054
 80020f0:	2000005c 	.word	0x2000005c
 80020f4:	20000058 	.word	0x20000058

080020f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020fc:	4b05      	ldr	r3, [pc, #20]	@ (8002114 <HAL_IncTick+0x1c>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	001a      	movs	r2, r3
 8002102:	4b05      	ldr	r3, [pc, #20]	@ (8002118 <HAL_IncTick+0x20>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	18d2      	adds	r2, r2, r3
 8002108:	4b03      	ldr	r3, [pc, #12]	@ (8002118 <HAL_IncTick+0x20>)
 800210a:	601a      	str	r2, [r3, #0]
}
 800210c:	46c0      	nop			@ (mov r8, r8)
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	46c0      	nop			@ (mov r8, r8)
 8002114:	2000005c 	.word	0x2000005c
 8002118:	2000026c 	.word	0x2000026c

0800211c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  return uwTick;
 8002120:	4b02      	ldr	r3, [pc, #8]	@ (800212c <HAL_GetTick+0x10>)
 8002122:	681b      	ldr	r3, [r3, #0]
}
 8002124:	0018      	movs	r0, r3
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	46c0      	nop			@ (mov r8, r8)
 800212c:	2000026c 	.word	0x2000026c

08002130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002138:	f7ff fff0 	bl	800211c <HAL_GetTick>
 800213c:	0003      	movs	r3, r0
 800213e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	3301      	adds	r3, #1
 8002148:	d005      	beq.n	8002156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800214a:	4b0a      	ldr	r3, [pc, #40]	@ (8002174 <HAL_Delay+0x44>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	001a      	movs	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	189b      	adds	r3, r3, r2
 8002154:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002156:	46c0      	nop			@ (mov r8, r8)
 8002158:	f7ff ffe0 	bl	800211c <HAL_GetTick>
 800215c:	0002      	movs	r2, r0
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	429a      	cmp	r2, r3
 8002166:	d8f7      	bhi.n	8002158 <HAL_Delay+0x28>
  {
  }
}
 8002168:	46c0      	nop			@ (mov r8, r8)
 800216a:	46c0      	nop			@ (mov r8, r8)
 800216c:	46bd      	mov	sp, r7
 800216e:	b004      	add	sp, #16
 8002170:	bd80      	pop	{r7, pc}
 8002172:	46c0      	nop			@ (mov r8, r8)
 8002174:	2000005c 	.word	0x2000005c

08002178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	0002      	movs	r2, r0
 8002180:	1dfb      	adds	r3, r7, #7
 8002182:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002184:	1dfb      	adds	r3, r7, #7
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b7f      	cmp	r3, #127	@ 0x7f
 800218a:	d809      	bhi.n	80021a0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800218c:	1dfb      	adds	r3, r7, #7
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	001a      	movs	r2, r3
 8002192:	231f      	movs	r3, #31
 8002194:	401a      	ands	r2, r3
 8002196:	4b04      	ldr	r3, [pc, #16]	@ (80021a8 <__NVIC_EnableIRQ+0x30>)
 8002198:	2101      	movs	r1, #1
 800219a:	4091      	lsls	r1, r2
 800219c:	000a      	movs	r2, r1
 800219e:	601a      	str	r2, [r3, #0]
  }
}
 80021a0:	46c0      	nop			@ (mov r8, r8)
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b002      	add	sp, #8
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	e000e100 	.word	0xe000e100

080021ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021ac:	b590      	push	{r4, r7, lr}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	0002      	movs	r2, r0
 80021b4:	6039      	str	r1, [r7, #0]
 80021b6:	1dfb      	adds	r3, r7, #7
 80021b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021ba:	1dfb      	adds	r3, r7, #7
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b7f      	cmp	r3, #127	@ 0x7f
 80021c0:	d828      	bhi.n	8002214 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021c2:	4a2f      	ldr	r2, [pc, #188]	@ (8002280 <__NVIC_SetPriority+0xd4>)
 80021c4:	1dfb      	adds	r3, r7, #7
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	b25b      	sxtb	r3, r3
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	33c0      	adds	r3, #192	@ 0xc0
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	589b      	ldr	r3, [r3, r2]
 80021d2:	1dfa      	adds	r2, r7, #7
 80021d4:	7812      	ldrb	r2, [r2, #0]
 80021d6:	0011      	movs	r1, r2
 80021d8:	2203      	movs	r2, #3
 80021da:	400a      	ands	r2, r1
 80021dc:	00d2      	lsls	r2, r2, #3
 80021de:	21ff      	movs	r1, #255	@ 0xff
 80021e0:	4091      	lsls	r1, r2
 80021e2:	000a      	movs	r2, r1
 80021e4:	43d2      	mvns	r2, r2
 80021e6:	401a      	ands	r2, r3
 80021e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	019b      	lsls	r3, r3, #6
 80021ee:	22ff      	movs	r2, #255	@ 0xff
 80021f0:	401a      	ands	r2, r3
 80021f2:	1dfb      	adds	r3, r7, #7
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	0018      	movs	r0, r3
 80021f8:	2303      	movs	r3, #3
 80021fa:	4003      	ands	r3, r0
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002200:	481f      	ldr	r0, [pc, #124]	@ (8002280 <__NVIC_SetPriority+0xd4>)
 8002202:	1dfb      	adds	r3, r7, #7
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	b25b      	sxtb	r3, r3
 8002208:	089b      	lsrs	r3, r3, #2
 800220a:	430a      	orrs	r2, r1
 800220c:	33c0      	adds	r3, #192	@ 0xc0
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002212:	e031      	b.n	8002278 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002214:	4a1b      	ldr	r2, [pc, #108]	@ (8002284 <__NVIC_SetPriority+0xd8>)
 8002216:	1dfb      	adds	r3, r7, #7
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	0019      	movs	r1, r3
 800221c:	230f      	movs	r3, #15
 800221e:	400b      	ands	r3, r1
 8002220:	3b08      	subs	r3, #8
 8002222:	089b      	lsrs	r3, r3, #2
 8002224:	3306      	adds	r3, #6
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	18d3      	adds	r3, r2, r3
 800222a:	3304      	adds	r3, #4
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	1dfa      	adds	r2, r7, #7
 8002230:	7812      	ldrb	r2, [r2, #0]
 8002232:	0011      	movs	r1, r2
 8002234:	2203      	movs	r2, #3
 8002236:	400a      	ands	r2, r1
 8002238:	00d2      	lsls	r2, r2, #3
 800223a:	21ff      	movs	r1, #255	@ 0xff
 800223c:	4091      	lsls	r1, r2
 800223e:	000a      	movs	r2, r1
 8002240:	43d2      	mvns	r2, r2
 8002242:	401a      	ands	r2, r3
 8002244:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	019b      	lsls	r3, r3, #6
 800224a:	22ff      	movs	r2, #255	@ 0xff
 800224c:	401a      	ands	r2, r3
 800224e:	1dfb      	adds	r3, r7, #7
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	0018      	movs	r0, r3
 8002254:	2303      	movs	r3, #3
 8002256:	4003      	ands	r3, r0
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800225c:	4809      	ldr	r0, [pc, #36]	@ (8002284 <__NVIC_SetPriority+0xd8>)
 800225e:	1dfb      	adds	r3, r7, #7
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	001c      	movs	r4, r3
 8002264:	230f      	movs	r3, #15
 8002266:	4023      	ands	r3, r4
 8002268:	3b08      	subs	r3, #8
 800226a:	089b      	lsrs	r3, r3, #2
 800226c:	430a      	orrs	r2, r1
 800226e:	3306      	adds	r3, #6
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	18c3      	adds	r3, r0, r3
 8002274:	3304      	adds	r3, #4
 8002276:	601a      	str	r2, [r3, #0]
}
 8002278:	46c0      	nop			@ (mov r8, r8)
 800227a:	46bd      	mov	sp, r7
 800227c:	b003      	add	sp, #12
 800227e:	bd90      	pop	{r4, r7, pc}
 8002280:	e000e100 	.word	0xe000e100
 8002284:	e000ed00 	.word	0xe000ed00

08002288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	1e5a      	subs	r2, r3, #1
 8002294:	2380      	movs	r3, #128	@ 0x80
 8002296:	045b      	lsls	r3, r3, #17
 8002298:	429a      	cmp	r2, r3
 800229a:	d301      	bcc.n	80022a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800229c:	2301      	movs	r3, #1
 800229e:	e010      	b.n	80022c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022a0:	4b0a      	ldr	r3, [pc, #40]	@ (80022cc <SysTick_Config+0x44>)
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	3a01      	subs	r2, #1
 80022a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022a8:	2301      	movs	r3, #1
 80022aa:	425b      	negs	r3, r3
 80022ac:	2103      	movs	r1, #3
 80022ae:	0018      	movs	r0, r3
 80022b0:	f7ff ff7c 	bl	80021ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022b4:	4b05      	ldr	r3, [pc, #20]	@ (80022cc <SysTick_Config+0x44>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ba:	4b04      	ldr	r3, [pc, #16]	@ (80022cc <SysTick_Config+0x44>)
 80022bc:	2207      	movs	r2, #7
 80022be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	0018      	movs	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	b002      	add	sp, #8
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	46c0      	nop			@ (mov r8, r8)
 80022cc:	e000e010 	.word	0xe000e010

080022d0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	210f      	movs	r1, #15
 80022dc:	187b      	adds	r3, r7, r1
 80022de:	1c02      	adds	r2, r0, #0
 80022e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80022e2:	68ba      	ldr	r2, [r7, #8]
 80022e4:	187b      	adds	r3, r7, r1
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	b25b      	sxtb	r3, r3
 80022ea:	0011      	movs	r1, r2
 80022ec:	0018      	movs	r0, r3
 80022ee:	f7ff ff5d 	bl	80021ac <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80022f2:	46c0      	nop			@ (mov r8, r8)
 80022f4:	46bd      	mov	sp, r7
 80022f6:	b004      	add	sp, #16
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	0002      	movs	r2, r0
 8002302:	1dfb      	adds	r3, r7, #7
 8002304:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002306:	1dfb      	adds	r3, r7, #7
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	b25b      	sxtb	r3, r3
 800230c:	0018      	movs	r0, r3
 800230e:	f7ff ff33 	bl	8002178 <__NVIC_EnableIRQ>
}
 8002312:	46c0      	nop			@ (mov r8, r8)
 8002314:	46bd      	mov	sp, r7
 8002316:	b002      	add	sp, #8
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	0018      	movs	r0, r3
 8002326:	f7ff ffaf 	bl	8002288 <SysTick_Config>
 800232a:	0003      	movs	r3, r0
}
 800232c:	0018      	movs	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	b002      	add	sp, #8
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800233c:	2300      	movs	r3, #0
 800233e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d101      	bne.n	800234a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e036      	b.n	80023b8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2221      	movs	r2, #33	@ 0x21
 800234e:	2102      	movs	r1, #2
 8002350:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	4a18      	ldr	r2, [pc, #96]	@ (80023c0 <HAL_DMA_Init+0x8c>)
 800235e:	4013      	ands	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800236a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002376:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002382:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	4313      	orrs	r3, r2
 800238e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	0018      	movs	r0, r3
 800239c:	f000 f9c4 	bl	8002728 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2221      	movs	r2, #33	@ 0x21
 80023aa:	2101      	movs	r1, #1
 80023ac:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2220      	movs	r2, #32
 80023b2:	2100      	movs	r1, #0
 80023b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	0018      	movs	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	b004      	add	sp, #16
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	ffffc00f 	.word	0xffffc00f

080023c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
 80023d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023d2:	2317      	movs	r3, #23
 80023d4:	18fb      	adds	r3, r7, r3
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2220      	movs	r2, #32
 80023de:	5c9b      	ldrb	r3, [r3, r2]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d101      	bne.n	80023e8 <HAL_DMA_Start_IT+0x24>
 80023e4:	2302      	movs	r3, #2
 80023e6:	e04f      	b.n	8002488 <HAL_DMA_Start_IT+0xc4>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2220      	movs	r2, #32
 80023ec:	2101      	movs	r1, #1
 80023ee:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2221      	movs	r2, #33	@ 0x21
 80023f4:	5c9b      	ldrb	r3, [r3, r2]
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d13a      	bne.n	8002472 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2221      	movs	r2, #33	@ 0x21
 8002400:	2102      	movs	r1, #2
 8002402:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2101      	movs	r1, #1
 8002416:	438a      	bics	r2, r1
 8002418:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	68b9      	ldr	r1, [r7, #8]
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 f954 	bl	80026ce <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242a:	2b00      	cmp	r3, #0
 800242c:	d008      	beq.n	8002440 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	210e      	movs	r1, #14
 800243a:	430a      	orrs	r2, r1
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	e00f      	b.n	8002460 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	210a      	movs	r1, #10
 800244c:	430a      	orrs	r2, r1
 800244e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2104      	movs	r1, #4
 800245c:	438a      	bics	r2, r1
 800245e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2101      	movs	r1, #1
 800246c:	430a      	orrs	r2, r1
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	e007      	b.n	8002482 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2220      	movs	r2, #32
 8002476:	2100      	movs	r1, #0
 8002478:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800247a:	2317      	movs	r3, #23
 800247c:	18fb      	adds	r3, r7, r3
 800247e:	2202      	movs	r2, #2
 8002480:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8002482:	2317      	movs	r3, #23
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	781b      	ldrb	r3, [r3, #0]
}
 8002488:	0018      	movs	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	b006      	add	sp, #24
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2221      	movs	r2, #33	@ 0x21
 800249c:	5c9b      	ldrb	r3, [r3, r2]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d008      	beq.n	80024b6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2204      	movs	r2, #4
 80024a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2220      	movs	r2, #32
 80024ae:	2100      	movs	r1, #0
 80024b0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e020      	b.n	80024f8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	210e      	movs	r1, #14
 80024c2:	438a      	bics	r2, r1
 80024c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2101      	movs	r1, #1
 80024d2:	438a      	bics	r2, r1
 80024d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024de:	2101      	movs	r1, #1
 80024e0:	4091      	lsls	r1, r2
 80024e2:	000a      	movs	r2, r1
 80024e4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2221      	movs	r2, #33	@ 0x21
 80024ea:	2101      	movs	r1, #1
 80024ec:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2220      	movs	r2, #32
 80024f2:	2100      	movs	r1, #0
 80024f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	0018      	movs	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	b002      	add	sp, #8
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002508:	210f      	movs	r1, #15
 800250a:	187b      	adds	r3, r7, r1
 800250c:	2200      	movs	r2, #0
 800250e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2221      	movs	r2, #33	@ 0x21
 8002514:	5c9b      	ldrb	r3, [r3, r2]
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d006      	beq.n	800252a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2204      	movs	r2, #4
 8002520:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8002522:	187b      	adds	r3, r7, r1
 8002524:	2201      	movs	r2, #1
 8002526:	701a      	strb	r2, [r3, #0]
 8002528:	e028      	b.n	800257c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	210e      	movs	r1, #14
 8002536:	438a      	bics	r2, r1
 8002538:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2101      	movs	r1, #1
 8002546:	438a      	bics	r2, r1
 8002548:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002552:	2101      	movs	r1, #1
 8002554:	4091      	lsls	r1, r2
 8002556:	000a      	movs	r2, r1
 8002558:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2221      	movs	r2, #33	@ 0x21
 800255e:	2101      	movs	r1, #1
 8002560:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2220      	movs	r2, #32
 8002566:	2100      	movs	r1, #0
 8002568:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800256e:	2b00      	cmp	r3, #0
 8002570:	d004      	beq.n	800257c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	0010      	movs	r0, r2
 800257a:	4798      	blx	r3
    }
  }
  return status;
 800257c:	230f      	movs	r3, #15
 800257e:	18fb      	adds	r3, r7, r3
 8002580:	781b      	ldrb	r3, [r3, #0]
}
 8002582:	0018      	movs	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	b004      	add	sp, #16
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b084      	sub	sp, #16
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a6:	2204      	movs	r2, #4
 80025a8:	409a      	lsls	r2, r3
 80025aa:	0013      	movs	r3, r2
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4013      	ands	r3, r2
 80025b0:	d024      	beq.n	80025fc <HAL_DMA_IRQHandler+0x72>
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	2204      	movs	r2, #4
 80025b6:	4013      	ands	r3, r2
 80025b8:	d020      	beq.n	80025fc <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2220      	movs	r2, #32
 80025c2:	4013      	ands	r3, r2
 80025c4:	d107      	bne.n	80025d6 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2104      	movs	r1, #4
 80025d2:	438a      	bics	r2, r1
 80025d4:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025de:	2104      	movs	r1, #4
 80025e0:	4091      	lsls	r1, r2
 80025e2:	000a      	movs	r2, r1
 80025e4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d100      	bne.n	80025f0 <HAL_DMA_IRQHandler+0x66>
 80025ee:	e06a      	b.n	80026c6 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	0010      	movs	r0, r2
 80025f8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80025fa:	e064      	b.n	80026c6 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002600:	2202      	movs	r2, #2
 8002602:	409a      	lsls	r2, r3
 8002604:	0013      	movs	r3, r2
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4013      	ands	r3, r2
 800260a:	d02b      	beq.n	8002664 <HAL_DMA_IRQHandler+0xda>
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2202      	movs	r2, #2
 8002610:	4013      	ands	r3, r2
 8002612:	d027      	beq.n	8002664 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2220      	movs	r2, #32
 800261c:	4013      	ands	r3, r2
 800261e:	d10b      	bne.n	8002638 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	210a      	movs	r1, #10
 800262c:	438a      	bics	r2, r1
 800262e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2221      	movs	r2, #33	@ 0x21
 8002634:	2101      	movs	r1, #1
 8002636:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002640:	2102      	movs	r1, #2
 8002642:	4091      	lsls	r1, r2
 8002644:	000a      	movs	r2, r1
 8002646:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2220      	movs	r2, #32
 800264c:	2100      	movs	r1, #0
 800264e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002654:	2b00      	cmp	r3, #0
 8002656:	d036      	beq.n	80026c6 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	0010      	movs	r0, r2
 8002660:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002662:	e030      	b.n	80026c6 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002668:	2208      	movs	r2, #8
 800266a:	409a      	lsls	r2, r3
 800266c:	0013      	movs	r3, r2
 800266e:	68fa      	ldr	r2, [r7, #12]
 8002670:	4013      	ands	r3, r2
 8002672:	d028      	beq.n	80026c6 <HAL_DMA_IRQHandler+0x13c>
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2208      	movs	r2, #8
 8002678:	4013      	ands	r3, r2
 800267a:	d024      	beq.n	80026c6 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	210e      	movs	r1, #14
 8002688:	438a      	bics	r2, r1
 800268a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002694:	2101      	movs	r1, #1
 8002696:	4091      	lsls	r1, r2
 8002698:	000a      	movs	r2, r1
 800269a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2221      	movs	r2, #33	@ 0x21
 80026a6:	2101      	movs	r1, #1
 80026a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2220      	movs	r2, #32
 80026ae:	2100      	movs	r1, #0
 80026b0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d005      	beq.n	80026c6 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	0010      	movs	r0, r2
 80026c2:	4798      	blx	r3
    }
  }
}
 80026c4:	e7ff      	b.n	80026c6 <HAL_DMA_IRQHandler+0x13c>
 80026c6:	46c0      	nop			@ (mov r8, r8)
 80026c8:	46bd      	mov	sp, r7
 80026ca:	b004      	add	sp, #16
 80026cc:	bd80      	pop	{r7, pc}

080026ce <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b084      	sub	sp, #16
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
 80026da:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e4:	2101      	movs	r1, #1
 80026e6:	4091      	lsls	r1, r2
 80026e8:	000a      	movs	r2, r1
 80026ea:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b10      	cmp	r3, #16
 80026fa:	d108      	bne.n	800270e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800270c:	e007      	b.n	800271e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	60da      	str	r2, [r3, #12]
}
 800271e:	46c0      	nop			@ (mov r8, r8)
 8002720:	46bd      	mov	sp, r7
 8002722:	b004      	add	sp, #16
 8002724:	bd80      	pop	{r7, pc}
	...

08002728 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a08      	ldr	r2, [pc, #32]	@ (8002758 <DMA_CalcBaseAndBitshift+0x30>)
 8002736:	4694      	mov	ip, r2
 8002738:	4463      	add	r3, ip
 800273a:	2114      	movs	r1, #20
 800273c:	0018      	movs	r0, r3
 800273e:	f7fd fce3 	bl	8000108 <__udivsi3>
 8002742:	0003      	movs	r3, r0
 8002744:	009a      	lsls	r2, r3, #2
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a03      	ldr	r2, [pc, #12]	@ (800275c <DMA_CalcBaseAndBitshift+0x34>)
 800274e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8002750:	46c0      	nop			@ (mov r8, r8)
 8002752:	46bd      	mov	sp, r7
 8002754:	b002      	add	sp, #8
 8002756:	bd80      	pop	{r7, pc}
 8002758:	bffdfff8 	.word	0xbffdfff8
 800275c:	40020000 	.word	0x40020000

08002760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800276e:	e14f      	b.n	8002a10 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2101      	movs	r1, #1
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	4091      	lsls	r1, r2
 800277a:	000a      	movs	r2, r1
 800277c:	4013      	ands	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d100      	bne.n	8002788 <HAL_GPIO_Init+0x28>
 8002786:	e140      	b.n	8002a0a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	2203      	movs	r2, #3
 800278e:	4013      	ands	r3, r2
 8002790:	2b01      	cmp	r3, #1
 8002792:	d005      	beq.n	80027a0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2203      	movs	r2, #3
 800279a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800279c:	2b02      	cmp	r3, #2
 800279e:	d130      	bne.n	8002802 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	2203      	movs	r2, #3
 80027ac:	409a      	lsls	r2, r3
 80027ae:	0013      	movs	r3, r2
 80027b0:	43da      	mvns	r2, r3
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4013      	ands	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	68da      	ldr	r2, [r3, #12]
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	409a      	lsls	r2, r3
 80027c2:	0013      	movs	r3, r2
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027d6:	2201      	movs	r2, #1
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	409a      	lsls	r2, r3
 80027dc:	0013      	movs	r3, r2
 80027de:	43da      	mvns	r2, r3
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	4013      	ands	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	091b      	lsrs	r3, r3, #4
 80027ec:	2201      	movs	r2, #1
 80027ee:	401a      	ands	r2, r3
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	409a      	lsls	r2, r3
 80027f4:	0013      	movs	r3, r2
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2203      	movs	r2, #3
 8002808:	4013      	ands	r3, r2
 800280a:	2b03      	cmp	r3, #3
 800280c:	d017      	beq.n	800283e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	2203      	movs	r2, #3
 800281a:	409a      	lsls	r2, r3
 800281c:	0013      	movs	r3, r2
 800281e:	43da      	mvns	r2, r3
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	4013      	ands	r3, r2
 8002824:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	409a      	lsls	r2, r3
 8002830:	0013      	movs	r3, r2
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2203      	movs	r2, #3
 8002844:	4013      	ands	r3, r2
 8002846:	2b02      	cmp	r3, #2
 8002848:	d123      	bne.n	8002892 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	08da      	lsrs	r2, r3, #3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3208      	adds	r2, #8
 8002852:	0092      	lsls	r2, r2, #2
 8002854:	58d3      	ldr	r3, [r2, r3]
 8002856:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	2207      	movs	r2, #7
 800285c:	4013      	ands	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	220f      	movs	r2, #15
 8002862:	409a      	lsls	r2, r3
 8002864:	0013      	movs	r3, r2
 8002866:	43da      	mvns	r2, r3
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	4013      	ands	r3, r2
 800286c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	691a      	ldr	r2, [r3, #16]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	2107      	movs	r1, #7
 8002876:	400b      	ands	r3, r1
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	409a      	lsls	r2, r3
 800287c:	0013      	movs	r3, r2
 800287e:	693a      	ldr	r2, [r7, #16]
 8002880:	4313      	orrs	r3, r2
 8002882:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	08da      	lsrs	r2, r3, #3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3208      	adds	r2, #8
 800288c:	0092      	lsls	r2, r2, #2
 800288e:	6939      	ldr	r1, [r7, #16]
 8002890:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	2203      	movs	r2, #3
 800289e:	409a      	lsls	r2, r3
 80028a0:	0013      	movs	r3, r2
 80028a2:	43da      	mvns	r2, r3
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	4013      	ands	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2203      	movs	r2, #3
 80028b0:	401a      	ands	r2, r3
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	409a      	lsls	r2, r3
 80028b8:	0013      	movs	r3, r2
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	23c0      	movs	r3, #192	@ 0xc0
 80028cc:	029b      	lsls	r3, r3, #10
 80028ce:	4013      	ands	r3, r2
 80028d0:	d100      	bne.n	80028d4 <HAL_GPIO_Init+0x174>
 80028d2:	e09a      	b.n	8002a0a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028d4:	4b54      	ldr	r3, [pc, #336]	@ (8002a28 <HAL_GPIO_Init+0x2c8>)
 80028d6:	699a      	ldr	r2, [r3, #24]
 80028d8:	4b53      	ldr	r3, [pc, #332]	@ (8002a28 <HAL_GPIO_Init+0x2c8>)
 80028da:	2101      	movs	r1, #1
 80028dc:	430a      	orrs	r2, r1
 80028de:	619a      	str	r2, [r3, #24]
 80028e0:	4b51      	ldr	r3, [pc, #324]	@ (8002a28 <HAL_GPIO_Init+0x2c8>)
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	2201      	movs	r2, #1
 80028e6:	4013      	ands	r3, r2
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80028ec:	4a4f      	ldr	r2, [pc, #316]	@ (8002a2c <HAL_GPIO_Init+0x2cc>)
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	089b      	lsrs	r3, r3, #2
 80028f2:	3302      	adds	r3, #2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	589b      	ldr	r3, [r3, r2]
 80028f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	2203      	movs	r2, #3
 80028fe:	4013      	ands	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	220f      	movs	r2, #15
 8002904:	409a      	lsls	r2, r3
 8002906:	0013      	movs	r3, r2
 8002908:	43da      	mvns	r2, r3
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	4013      	ands	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	2390      	movs	r3, #144	@ 0x90
 8002914:	05db      	lsls	r3, r3, #23
 8002916:	429a      	cmp	r2, r3
 8002918:	d013      	beq.n	8002942 <HAL_GPIO_Init+0x1e2>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a44      	ldr	r2, [pc, #272]	@ (8002a30 <HAL_GPIO_Init+0x2d0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d00d      	beq.n	800293e <HAL_GPIO_Init+0x1de>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a43      	ldr	r2, [pc, #268]	@ (8002a34 <HAL_GPIO_Init+0x2d4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d007      	beq.n	800293a <HAL_GPIO_Init+0x1da>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a42      	ldr	r2, [pc, #264]	@ (8002a38 <HAL_GPIO_Init+0x2d8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d101      	bne.n	8002936 <HAL_GPIO_Init+0x1d6>
 8002932:	2303      	movs	r3, #3
 8002934:	e006      	b.n	8002944 <HAL_GPIO_Init+0x1e4>
 8002936:	2305      	movs	r3, #5
 8002938:	e004      	b.n	8002944 <HAL_GPIO_Init+0x1e4>
 800293a:	2302      	movs	r3, #2
 800293c:	e002      	b.n	8002944 <HAL_GPIO_Init+0x1e4>
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <HAL_GPIO_Init+0x1e4>
 8002942:	2300      	movs	r3, #0
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	2103      	movs	r1, #3
 8002948:	400a      	ands	r2, r1
 800294a:	0092      	lsls	r2, r2, #2
 800294c:	4093      	lsls	r3, r2
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002954:	4935      	ldr	r1, [pc, #212]	@ (8002a2c <HAL_GPIO_Init+0x2cc>)
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	089b      	lsrs	r3, r3, #2
 800295a:	3302      	adds	r3, #2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002962:	4b36      	ldr	r3, [pc, #216]	@ (8002a3c <HAL_GPIO_Init+0x2dc>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	43da      	mvns	r2, r3
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4013      	ands	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	2380      	movs	r3, #128	@ 0x80
 8002978:	035b      	lsls	r3, r3, #13
 800297a:	4013      	ands	r3, r2
 800297c:	d003      	beq.n	8002986 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4313      	orrs	r3, r2
 8002984:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002986:	4b2d      	ldr	r3, [pc, #180]	@ (8002a3c <HAL_GPIO_Init+0x2dc>)
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800298c:	4b2b      	ldr	r3, [pc, #172]	@ (8002a3c <HAL_GPIO_Init+0x2dc>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	43da      	mvns	r2, r3
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4013      	ands	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	2380      	movs	r3, #128	@ 0x80
 80029a2:	039b      	lsls	r3, r3, #14
 80029a4:	4013      	ands	r3, r2
 80029a6:	d003      	beq.n	80029b0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80029b0:	4b22      	ldr	r3, [pc, #136]	@ (8002a3c <HAL_GPIO_Init+0x2dc>)
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80029b6:	4b21      	ldr	r3, [pc, #132]	@ (8002a3c <HAL_GPIO_Init+0x2dc>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	43da      	mvns	r2, r3
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	4013      	ands	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	2380      	movs	r3, #128	@ 0x80
 80029cc:	029b      	lsls	r3, r3, #10
 80029ce:	4013      	ands	r3, r2
 80029d0:	d003      	beq.n	80029da <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80029da:	4b18      	ldr	r3, [pc, #96]	@ (8002a3c <HAL_GPIO_Init+0x2dc>)
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80029e0:	4b16      	ldr	r3, [pc, #88]	@ (8002a3c <HAL_GPIO_Init+0x2dc>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	43da      	mvns	r2, r3
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4013      	ands	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	2380      	movs	r3, #128	@ 0x80
 80029f6:	025b      	lsls	r3, r3, #9
 80029f8:	4013      	ands	r3, r2
 80029fa:	d003      	beq.n	8002a04 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a04:	4b0d      	ldr	r3, [pc, #52]	@ (8002a3c <HAL_GPIO_Init+0x2dc>)
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	40da      	lsrs	r2, r3
 8002a18:	1e13      	subs	r3, r2, #0
 8002a1a:	d000      	beq.n	8002a1e <HAL_GPIO_Init+0x2be>
 8002a1c:	e6a8      	b.n	8002770 <HAL_GPIO_Init+0x10>
  } 
}
 8002a1e:	46c0      	nop			@ (mov r8, r8)
 8002a20:	46c0      	nop			@ (mov r8, r8)
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b006      	add	sp, #24
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	40010000 	.word	0x40010000
 8002a30:	48000400 	.word	0x48000400
 8002a34:	48000800 	.word	0x48000800
 8002a38:	48000c00 	.word	0x48000c00
 8002a3c:	40010400 	.word	0x40010400

08002a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	0008      	movs	r0, r1
 8002a4a:	0011      	movs	r1, r2
 8002a4c:	1cbb      	adds	r3, r7, #2
 8002a4e:	1c02      	adds	r2, r0, #0
 8002a50:	801a      	strh	r2, [r3, #0]
 8002a52:	1c7b      	adds	r3, r7, #1
 8002a54:	1c0a      	adds	r2, r1, #0
 8002a56:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a58:	1c7b      	adds	r3, r7, #1
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d004      	beq.n	8002a6a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a60:	1cbb      	adds	r3, r7, #2
 8002a62:	881a      	ldrh	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a68:	e003      	b.n	8002a72 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a6a:	1cbb      	adds	r3, r7, #2
 8002a6c:	881a      	ldrh	r2, [r3, #0]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002a72:	46c0      	nop			@ (mov r8, r8)
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b002      	add	sp, #8
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d101      	bne.n	8002a8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e305      	b.n	800309a <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2201      	movs	r2, #1
 8002a94:	4013      	ands	r3, r2
 8002a96:	d100      	bne.n	8002a9a <HAL_RCC_OscConfig+0x1e>
 8002a98:	e08d      	b.n	8002bb6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002a9a:	4bc5      	ldr	r3, [pc, #788]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	220c      	movs	r2, #12
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d00e      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002aa6:	4bc2      	ldr	r3, [pc, #776]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	220c      	movs	r2, #12
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d116      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x64>
 8002ab2:	4bbf      	ldr	r3, [pc, #764]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	23c0      	movs	r3, #192	@ 0xc0
 8002ab8:	025b      	lsls	r3, r3, #9
 8002aba:	401a      	ands	r2, r3
 8002abc:	2380      	movs	r3, #128	@ 0x80
 8002abe:	025b      	lsls	r3, r3, #9
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d10d      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac4:	4bba      	ldr	r3, [pc, #744]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	2380      	movs	r3, #128	@ 0x80
 8002aca:	029b      	lsls	r3, r3, #10
 8002acc:	4013      	ands	r3, r2
 8002ace:	d100      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x56>
 8002ad0:	e070      	b.n	8002bb4 <HAL_RCC_OscConfig+0x138>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d000      	beq.n	8002adc <HAL_RCC_OscConfig+0x60>
 8002ada:	e06b      	b.n	8002bb4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e2dc      	b.n	800309a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d107      	bne.n	8002af8 <HAL_RCC_OscConfig+0x7c>
 8002ae8:	4bb1      	ldr	r3, [pc, #708]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	4bb0      	ldr	r3, [pc, #704]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002aee:	2180      	movs	r1, #128	@ 0x80
 8002af0:	0249      	lsls	r1, r1, #9
 8002af2:	430a      	orrs	r2, r1
 8002af4:	601a      	str	r2, [r3, #0]
 8002af6:	e02f      	b.n	8002b58 <HAL_RCC_OscConfig+0xdc>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10c      	bne.n	8002b1a <HAL_RCC_OscConfig+0x9e>
 8002b00:	4bab      	ldr	r3, [pc, #684]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	4baa      	ldr	r3, [pc, #680]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002b06:	49ab      	ldr	r1, [pc, #684]	@ (8002db4 <HAL_RCC_OscConfig+0x338>)
 8002b08:	400a      	ands	r2, r1
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	4ba8      	ldr	r3, [pc, #672]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	4ba7      	ldr	r3, [pc, #668]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002b12:	49a9      	ldr	r1, [pc, #676]	@ (8002db8 <HAL_RCC_OscConfig+0x33c>)
 8002b14:	400a      	ands	r2, r1
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	e01e      	b.n	8002b58 <HAL_RCC_OscConfig+0xdc>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b05      	cmp	r3, #5
 8002b20:	d10e      	bne.n	8002b40 <HAL_RCC_OscConfig+0xc4>
 8002b22:	4ba3      	ldr	r3, [pc, #652]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	4ba2      	ldr	r3, [pc, #648]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002b28:	2180      	movs	r1, #128	@ 0x80
 8002b2a:	02c9      	lsls	r1, r1, #11
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	4b9f      	ldr	r3, [pc, #636]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	4b9e      	ldr	r3, [pc, #632]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002b36:	2180      	movs	r1, #128	@ 0x80
 8002b38:	0249      	lsls	r1, r1, #9
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	e00b      	b.n	8002b58 <HAL_RCC_OscConfig+0xdc>
 8002b40:	4b9b      	ldr	r3, [pc, #620]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	4b9a      	ldr	r3, [pc, #616]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002b46:	499b      	ldr	r1, [pc, #620]	@ (8002db4 <HAL_RCC_OscConfig+0x338>)
 8002b48:	400a      	ands	r2, r1
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	4b98      	ldr	r3, [pc, #608]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	4b97      	ldr	r3, [pc, #604]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002b52:	4999      	ldr	r1, [pc, #612]	@ (8002db8 <HAL_RCC_OscConfig+0x33c>)
 8002b54:	400a      	ands	r2, r1
 8002b56:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d014      	beq.n	8002b8a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b60:	f7ff fadc 	bl	800211c <HAL_GetTick>
 8002b64:	0003      	movs	r3, r0
 8002b66:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b6a:	f7ff fad7 	bl	800211c <HAL_GetTick>
 8002b6e:	0002      	movs	r2, r0
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b64      	cmp	r3, #100	@ 0x64
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e28e      	b.n	800309a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7c:	4b8c      	ldr	r3, [pc, #560]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	2380      	movs	r3, #128	@ 0x80
 8002b82:	029b      	lsls	r3, r3, #10
 8002b84:	4013      	ands	r3, r2
 8002b86:	d0f0      	beq.n	8002b6a <HAL_RCC_OscConfig+0xee>
 8002b88:	e015      	b.n	8002bb6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8a:	f7ff fac7 	bl	800211c <HAL_GetTick>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b94:	f7ff fac2 	bl	800211c <HAL_GetTick>
 8002b98:	0002      	movs	r2, r0
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b64      	cmp	r3, #100	@ 0x64
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e279      	b.n	800309a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ba6:	4b82      	ldr	r3, [pc, #520]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	2380      	movs	r3, #128	@ 0x80
 8002bac:	029b      	lsls	r3, r3, #10
 8002bae:	4013      	ands	r3, r2
 8002bb0:	d1f0      	bne.n	8002b94 <HAL_RCC_OscConfig+0x118>
 8002bb2:	e000      	b.n	8002bb6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bb4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d100      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x146>
 8002bc0:	e06c      	b.n	8002c9c <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002bc2:	4b7b      	ldr	r3, [pc, #492]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	220c      	movs	r2, #12
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d00e      	beq.n	8002bea <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002bcc:	4b78      	ldr	r3, [pc, #480]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	220c      	movs	r2, #12
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d11f      	bne.n	8002c18 <HAL_RCC_OscConfig+0x19c>
 8002bd8:	4b75      	ldr	r3, [pc, #468]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	23c0      	movs	r3, #192	@ 0xc0
 8002bde:	025b      	lsls	r3, r3, #9
 8002be0:	401a      	ands	r2, r3
 8002be2:	2380      	movs	r3, #128	@ 0x80
 8002be4:	021b      	lsls	r3, r3, #8
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d116      	bne.n	8002c18 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bea:	4b71      	ldr	r3, [pc, #452]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	d005      	beq.n	8002c00 <HAL_RCC_OscConfig+0x184>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d001      	beq.n	8002c00 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e24c      	b.n	800309a <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c00:	4b6b      	ldr	r3, [pc, #428]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	22f8      	movs	r2, #248	@ 0xf8
 8002c06:	4393      	bics	r3, r2
 8002c08:	0019      	movs	r1, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	00da      	lsls	r2, r3, #3
 8002c10:	4b67      	ldr	r3, [pc, #412]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002c12:	430a      	orrs	r2, r1
 8002c14:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c16:	e041      	b.n	8002c9c <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d024      	beq.n	8002c6a <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c20:	4b63      	ldr	r3, [pc, #396]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	4b62      	ldr	r3, [pc, #392]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002c26:	2101      	movs	r1, #1
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2c:	f7ff fa76 	bl	800211c <HAL_GetTick>
 8002c30:	0003      	movs	r3, r0
 8002c32:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c36:	f7ff fa71 	bl	800211c <HAL_GetTick>
 8002c3a:	0002      	movs	r2, r0
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e228      	b.n	800309a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c48:	4b59      	ldr	r3, [pc, #356]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d0f1      	beq.n	8002c36 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c52:	4b57      	ldr	r3, [pc, #348]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	22f8      	movs	r2, #248	@ 0xf8
 8002c58:	4393      	bics	r3, r2
 8002c5a:	0019      	movs	r1, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	00da      	lsls	r2, r3, #3
 8002c62:	4b53      	ldr	r3, [pc, #332]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002c64:	430a      	orrs	r2, r1
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	e018      	b.n	8002c9c <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c6a:	4b51      	ldr	r3, [pc, #324]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	4b50      	ldr	r3, [pc, #320]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002c70:	2101      	movs	r1, #1
 8002c72:	438a      	bics	r2, r1
 8002c74:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c76:	f7ff fa51 	bl	800211c <HAL_GetTick>
 8002c7a:	0003      	movs	r3, r0
 8002c7c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c80:	f7ff fa4c 	bl	800211c <HAL_GetTick>
 8002c84:	0002      	movs	r2, r0
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e203      	b.n	800309a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c92:	4b47      	ldr	r3, [pc, #284]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2202      	movs	r2, #2
 8002c98:	4013      	ands	r3, r2
 8002c9a:	d1f1      	bne.n	8002c80 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2208      	movs	r2, #8
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d036      	beq.n	8002d14 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d019      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cae:	4b40      	ldr	r3, [pc, #256]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002cb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cb2:	4b3f      	ldr	r3, [pc, #252]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cba:	f7ff fa2f 	bl	800211c <HAL_GetTick>
 8002cbe:	0003      	movs	r3, r0
 8002cc0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cc4:	f7ff fa2a 	bl	800211c <HAL_GetTick>
 8002cc8:	0002      	movs	r2, r0
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e1e1      	b.n	800309a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd6:	4b36      	ldr	r3, [pc, #216]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cda:	2202      	movs	r2, #2
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d0f1      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x248>
 8002ce0:	e018      	b.n	8002d14 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ce2:	4b33      	ldr	r3, [pc, #204]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002ce4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ce6:	4b32      	ldr	r3, [pc, #200]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002ce8:	2101      	movs	r1, #1
 8002cea:	438a      	bics	r2, r1
 8002cec:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cee:	f7ff fa15 	bl	800211c <HAL_GetTick>
 8002cf2:	0003      	movs	r3, r0
 8002cf4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cf8:	f7ff fa10 	bl	800211c <HAL_GetTick>
 8002cfc:	0002      	movs	r2, r0
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e1c7      	b.n	800309a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d0a:	4b29      	ldr	r3, [pc, #164]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0e:	2202      	movs	r2, #2
 8002d10:	4013      	ands	r3, r2
 8002d12:	d1f1      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2204      	movs	r2, #4
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d100      	bne.n	8002d20 <HAL_RCC_OscConfig+0x2a4>
 8002d1e:	e0b5      	b.n	8002e8c <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d20:	201f      	movs	r0, #31
 8002d22:	183b      	adds	r3, r7, r0
 8002d24:	2200      	movs	r2, #0
 8002d26:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d28:	4b21      	ldr	r3, [pc, #132]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002d2a:	69da      	ldr	r2, [r3, #28]
 8002d2c:	2380      	movs	r3, #128	@ 0x80
 8002d2e:	055b      	lsls	r3, r3, #21
 8002d30:	4013      	ands	r3, r2
 8002d32:	d110      	bne.n	8002d56 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d34:	4b1e      	ldr	r3, [pc, #120]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002d36:	69da      	ldr	r2, [r3, #28]
 8002d38:	4b1d      	ldr	r3, [pc, #116]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002d3a:	2180      	movs	r1, #128	@ 0x80
 8002d3c:	0549      	lsls	r1, r1, #21
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	61da      	str	r2, [r3, #28]
 8002d42:	4b1b      	ldr	r3, [pc, #108]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002d44:	69da      	ldr	r2, [r3, #28]
 8002d46:	2380      	movs	r3, #128	@ 0x80
 8002d48:	055b      	lsls	r3, r3, #21
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d50:	183b      	adds	r3, r7, r0
 8002d52:	2201      	movs	r2, #1
 8002d54:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d56:	4b19      	ldr	r3, [pc, #100]	@ (8002dbc <HAL_RCC_OscConfig+0x340>)
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	2380      	movs	r3, #128	@ 0x80
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d11a      	bne.n	8002d98 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d62:	4b16      	ldr	r3, [pc, #88]	@ (8002dbc <HAL_RCC_OscConfig+0x340>)
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	4b15      	ldr	r3, [pc, #84]	@ (8002dbc <HAL_RCC_OscConfig+0x340>)
 8002d68:	2180      	movs	r1, #128	@ 0x80
 8002d6a:	0049      	lsls	r1, r1, #1
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d70:	f7ff f9d4 	bl	800211c <HAL_GetTick>
 8002d74:	0003      	movs	r3, r0
 8002d76:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d7a:	f7ff f9cf 	bl	800211c <HAL_GetTick>
 8002d7e:	0002      	movs	r2, r0
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b64      	cmp	r3, #100	@ 0x64
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e186      	b.n	800309a <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002dbc <HAL_RCC_OscConfig+0x340>)
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	2380      	movs	r3, #128	@ 0x80
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	4013      	ands	r3, r2
 8002d96:	d0f0      	beq.n	8002d7a <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d10f      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x344>
 8002da0:	4b03      	ldr	r3, [pc, #12]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002da2:	6a1a      	ldr	r2, [r3, #32]
 8002da4:	4b02      	ldr	r3, [pc, #8]	@ (8002db0 <HAL_RCC_OscConfig+0x334>)
 8002da6:	2101      	movs	r1, #1
 8002da8:	430a      	orrs	r2, r1
 8002daa:	621a      	str	r2, [r3, #32]
 8002dac:	e036      	b.n	8002e1c <HAL_RCC_OscConfig+0x3a0>
 8002dae:	46c0      	nop			@ (mov r8, r8)
 8002db0:	40021000 	.word	0x40021000
 8002db4:	fffeffff 	.word	0xfffeffff
 8002db8:	fffbffff 	.word	0xfffbffff
 8002dbc:	40007000 	.word	0x40007000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10c      	bne.n	8002de2 <HAL_RCC_OscConfig+0x366>
 8002dc8:	4bb6      	ldr	r3, [pc, #728]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002dca:	6a1a      	ldr	r2, [r3, #32]
 8002dcc:	4bb5      	ldr	r3, [pc, #724]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002dce:	2101      	movs	r1, #1
 8002dd0:	438a      	bics	r2, r1
 8002dd2:	621a      	str	r2, [r3, #32]
 8002dd4:	4bb3      	ldr	r3, [pc, #716]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002dd6:	6a1a      	ldr	r2, [r3, #32]
 8002dd8:	4bb2      	ldr	r3, [pc, #712]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002dda:	2104      	movs	r1, #4
 8002ddc:	438a      	bics	r2, r1
 8002dde:	621a      	str	r2, [r3, #32]
 8002de0:	e01c      	b.n	8002e1c <HAL_RCC_OscConfig+0x3a0>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	2b05      	cmp	r3, #5
 8002de8:	d10c      	bne.n	8002e04 <HAL_RCC_OscConfig+0x388>
 8002dea:	4bae      	ldr	r3, [pc, #696]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002dec:	6a1a      	ldr	r2, [r3, #32]
 8002dee:	4bad      	ldr	r3, [pc, #692]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002df0:	2104      	movs	r1, #4
 8002df2:	430a      	orrs	r2, r1
 8002df4:	621a      	str	r2, [r3, #32]
 8002df6:	4bab      	ldr	r3, [pc, #684]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002df8:	6a1a      	ldr	r2, [r3, #32]
 8002dfa:	4baa      	ldr	r3, [pc, #680]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	621a      	str	r2, [r3, #32]
 8002e02:	e00b      	b.n	8002e1c <HAL_RCC_OscConfig+0x3a0>
 8002e04:	4ba7      	ldr	r3, [pc, #668]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002e06:	6a1a      	ldr	r2, [r3, #32]
 8002e08:	4ba6      	ldr	r3, [pc, #664]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	438a      	bics	r2, r1
 8002e0e:	621a      	str	r2, [r3, #32]
 8002e10:	4ba4      	ldr	r3, [pc, #656]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002e12:	6a1a      	ldr	r2, [r3, #32]
 8002e14:	4ba3      	ldr	r3, [pc, #652]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002e16:	2104      	movs	r1, #4
 8002e18:	438a      	bics	r2, r1
 8002e1a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d014      	beq.n	8002e4e <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e24:	f7ff f97a 	bl	800211c <HAL_GetTick>
 8002e28:	0003      	movs	r3, r0
 8002e2a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e2c:	e009      	b.n	8002e42 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e2e:	f7ff f975 	bl	800211c <HAL_GetTick>
 8002e32:	0002      	movs	r2, r0
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	4a9b      	ldr	r2, [pc, #620]	@ (80030a8 <HAL_RCC_OscConfig+0x62c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e12b      	b.n	800309a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e42:	4b98      	ldr	r3, [pc, #608]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	2202      	movs	r2, #2
 8002e48:	4013      	ands	r3, r2
 8002e4a:	d0f0      	beq.n	8002e2e <HAL_RCC_OscConfig+0x3b2>
 8002e4c:	e013      	b.n	8002e76 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e4e:	f7ff f965 	bl	800211c <HAL_GetTick>
 8002e52:	0003      	movs	r3, r0
 8002e54:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e56:	e009      	b.n	8002e6c <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e58:	f7ff f960 	bl	800211c <HAL_GetTick>
 8002e5c:	0002      	movs	r2, r0
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	4a91      	ldr	r2, [pc, #580]	@ (80030a8 <HAL_RCC_OscConfig+0x62c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d901      	bls.n	8002e6c <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e116      	b.n	800309a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e6c:	4b8d      	ldr	r3, [pc, #564]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	2202      	movs	r2, #2
 8002e72:	4013      	ands	r3, r2
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e76:	231f      	movs	r3, #31
 8002e78:	18fb      	adds	r3, r7, r3
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d105      	bne.n	8002e8c <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e80:	4b88      	ldr	r3, [pc, #544]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002e82:	69da      	ldr	r2, [r3, #28]
 8002e84:	4b87      	ldr	r3, [pc, #540]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002e86:	4989      	ldr	r1, [pc, #548]	@ (80030ac <HAL_RCC_OscConfig+0x630>)
 8002e88:	400a      	ands	r2, r1
 8002e8a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2210      	movs	r2, #16
 8002e92:	4013      	ands	r3, r2
 8002e94:	d063      	beq.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d12a      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002e9e:	4b81      	ldr	r3, [pc, #516]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002ea0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ea2:	4b80      	ldr	r3, [pc, #512]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002ea4:	2104      	movs	r1, #4
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002eaa:	4b7e      	ldr	r3, [pc, #504]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002eac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002eae:	4b7d      	ldr	r3, [pc, #500]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb6:	f7ff f931 	bl	800211c <HAL_GetTick>
 8002eba:	0003      	movs	r3, r0
 8002ebc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002ec0:	f7ff f92c 	bl	800211c <HAL_GetTick>
 8002ec4:	0002      	movs	r2, r0
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e0e3      	b.n	800309a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002ed2:	4b74      	ldr	r3, [pc, #464]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d0f1      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002edc:	4b71      	ldr	r3, [pc, #452]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ee0:	22f8      	movs	r2, #248	@ 0xf8
 8002ee2:	4393      	bics	r3, r2
 8002ee4:	0019      	movs	r1, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	00da      	lsls	r2, r3, #3
 8002eec:	4b6d      	ldr	r3, [pc, #436]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002ef2:	e034      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	3305      	adds	r3, #5
 8002efa:	d111      	bne.n	8002f20 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002efc:	4b69      	ldr	r3, [pc, #420]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002efe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f00:	4b68      	ldr	r3, [pc, #416]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002f02:	2104      	movs	r1, #4
 8002f04:	438a      	bics	r2, r1
 8002f06:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002f08:	4b66      	ldr	r3, [pc, #408]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002f0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f0c:	22f8      	movs	r2, #248	@ 0xf8
 8002f0e:	4393      	bics	r3, r2
 8002f10:	0019      	movs	r1, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	00da      	lsls	r2, r3, #3
 8002f18:	4b62      	ldr	r3, [pc, #392]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f1e:	e01e      	b.n	8002f5e <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002f20:	4b60      	ldr	r3, [pc, #384]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002f22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f24:	4b5f      	ldr	r3, [pc, #380]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002f26:	2104      	movs	r1, #4
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002f2c:	4b5d      	ldr	r3, [pc, #372]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002f2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f30:	4b5c      	ldr	r3, [pc, #368]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002f32:	2101      	movs	r1, #1
 8002f34:	438a      	bics	r2, r1
 8002f36:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f38:	f7ff f8f0 	bl	800211c <HAL_GetTick>
 8002f3c:	0003      	movs	r3, r0
 8002f3e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002f42:	f7ff f8eb 	bl	800211c <HAL_GetTick>
 8002f46:	0002      	movs	r2, r0
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e0a2      	b.n	800309a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002f54:	4b53      	ldr	r3, [pc, #332]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f58:	2202      	movs	r2, #2
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d1f1      	bne.n	8002f42 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d100      	bne.n	8002f68 <HAL_RCC_OscConfig+0x4ec>
 8002f66:	e097      	b.n	8003098 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f68:	4b4e      	ldr	r3, [pc, #312]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	220c      	movs	r2, #12
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d100      	bne.n	8002f76 <HAL_RCC_OscConfig+0x4fa>
 8002f74:	e06b      	b.n	800304e <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d14c      	bne.n	8003018 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f7e:	4b49      	ldr	r3, [pc, #292]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	4b48      	ldr	r3, [pc, #288]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002f84:	494a      	ldr	r1, [pc, #296]	@ (80030b0 <HAL_RCC_OscConfig+0x634>)
 8002f86:	400a      	ands	r2, r1
 8002f88:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8a:	f7ff f8c7 	bl	800211c <HAL_GetTick>
 8002f8e:	0003      	movs	r3, r0
 8002f90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f94:	f7ff f8c2 	bl	800211c <HAL_GetTick>
 8002f98:	0002      	movs	r2, r0
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e079      	b.n	800309a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fa6:	4b3f      	ldr	r3, [pc, #252]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	2380      	movs	r3, #128	@ 0x80
 8002fac:	049b      	lsls	r3, r3, #18
 8002fae:	4013      	ands	r3, r2
 8002fb0:	d1f0      	bne.n	8002f94 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002fb2:	4b3c      	ldr	r3, [pc, #240]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fb6:	220f      	movs	r2, #15
 8002fb8:	4393      	bics	r3, r2
 8002fba:	0019      	movs	r1, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fc0:	4b38      	ldr	r3, [pc, #224]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002fc6:	4b37      	ldr	r3, [pc, #220]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	4a3a      	ldr	r2, [pc, #232]	@ (80030b4 <HAL_RCC_OscConfig+0x638>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	0019      	movs	r1, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	4b32      	ldr	r3, [pc, #200]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe0:	4b30      	ldr	r3, [pc, #192]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	4b2f      	ldr	r3, [pc, #188]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8002fe6:	2180      	movs	r1, #128	@ 0x80
 8002fe8:	0449      	lsls	r1, r1, #17
 8002fea:	430a      	orrs	r2, r1
 8002fec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fee:	f7ff f895 	bl	800211c <HAL_GetTick>
 8002ff2:	0003      	movs	r3, r0
 8002ff4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff8:	f7ff f890 	bl	800211c <HAL_GetTick>
 8002ffc:	0002      	movs	r2, r0
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e047      	b.n	800309a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800300a:	4b26      	ldr	r3, [pc, #152]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	2380      	movs	r3, #128	@ 0x80
 8003010:	049b      	lsls	r3, r3, #18
 8003012:	4013      	ands	r3, r2
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x57c>
 8003016:	e03f      	b.n	8003098 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003018:	4b22      	ldr	r3, [pc, #136]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	4b21      	ldr	r3, [pc, #132]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 800301e:	4924      	ldr	r1, [pc, #144]	@ (80030b0 <HAL_RCC_OscConfig+0x634>)
 8003020:	400a      	ands	r2, r1
 8003022:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003024:	f7ff f87a 	bl	800211c <HAL_GetTick>
 8003028:	0003      	movs	r3, r0
 800302a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800302e:	f7ff f875 	bl	800211c <HAL_GetTick>
 8003032:	0002      	movs	r2, r0
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e02c      	b.n	800309a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003040:	4b18      	ldr	r3, [pc, #96]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	2380      	movs	r3, #128	@ 0x80
 8003046:	049b      	lsls	r3, r3, #18
 8003048:	4013      	ands	r3, r2
 800304a:	d1f0      	bne.n	800302e <HAL_RCC_OscConfig+0x5b2>
 800304c:	e024      	b.n	8003098 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e01f      	b.n	800309a <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800305a:	4b12      	ldr	r3, [pc, #72]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003060:	4b10      	ldr	r3, [pc, #64]	@ (80030a4 <HAL_RCC_OscConfig+0x628>)
 8003062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003064:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	23c0      	movs	r3, #192	@ 0xc0
 800306a:	025b      	lsls	r3, r3, #9
 800306c:	401a      	ands	r2, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003072:	429a      	cmp	r2, r3
 8003074:	d10e      	bne.n	8003094 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	220f      	movs	r2, #15
 800307a:	401a      	ands	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003080:	429a      	cmp	r2, r3
 8003082:	d107      	bne.n	8003094 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	23f0      	movs	r3, #240	@ 0xf0
 8003088:	039b      	lsls	r3, r3, #14
 800308a:	401a      	ands	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003090:	429a      	cmp	r2, r3
 8003092:	d001      	beq.n	8003098 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e000      	b.n	800309a <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8003098:	2300      	movs	r3, #0
}
 800309a:	0018      	movs	r0, r3
 800309c:	46bd      	mov	sp, r7
 800309e:	b008      	add	sp, #32
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	46c0      	nop			@ (mov r8, r8)
 80030a4:	40021000 	.word	0x40021000
 80030a8:	00001388 	.word	0x00001388
 80030ac:	efffffff 	.word	0xefffffff
 80030b0:	feffffff 	.word	0xfeffffff
 80030b4:	ffc27fff 	.word	0xffc27fff

080030b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0b3      	b.n	8003234 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030cc:	4b5b      	ldr	r3, [pc, #364]	@ (800323c <HAL_RCC_ClockConfig+0x184>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2201      	movs	r2, #1
 80030d2:	4013      	ands	r3, r2
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d911      	bls.n	80030fe <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030da:	4b58      	ldr	r3, [pc, #352]	@ (800323c <HAL_RCC_ClockConfig+0x184>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2201      	movs	r2, #1
 80030e0:	4393      	bics	r3, r2
 80030e2:	0019      	movs	r1, r3
 80030e4:	4b55      	ldr	r3, [pc, #340]	@ (800323c <HAL_RCC_ClockConfig+0x184>)
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ec:	4b53      	ldr	r3, [pc, #332]	@ (800323c <HAL_RCC_ClockConfig+0x184>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2201      	movs	r2, #1
 80030f2:	4013      	ands	r3, r2
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d001      	beq.n	80030fe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e09a      	b.n	8003234 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2202      	movs	r2, #2
 8003104:	4013      	ands	r3, r2
 8003106:	d015      	beq.n	8003134 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2204      	movs	r2, #4
 800310e:	4013      	ands	r3, r2
 8003110:	d006      	beq.n	8003120 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003112:	4b4b      	ldr	r3, [pc, #300]	@ (8003240 <HAL_RCC_ClockConfig+0x188>)
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	4b4a      	ldr	r3, [pc, #296]	@ (8003240 <HAL_RCC_ClockConfig+0x188>)
 8003118:	21e0      	movs	r1, #224	@ 0xe0
 800311a:	00c9      	lsls	r1, r1, #3
 800311c:	430a      	orrs	r2, r1
 800311e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003120:	4b47      	ldr	r3, [pc, #284]	@ (8003240 <HAL_RCC_ClockConfig+0x188>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	22f0      	movs	r2, #240	@ 0xf0
 8003126:	4393      	bics	r3, r2
 8003128:	0019      	movs	r1, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	4b44      	ldr	r3, [pc, #272]	@ (8003240 <HAL_RCC_ClockConfig+0x188>)
 8003130:	430a      	orrs	r2, r1
 8003132:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2201      	movs	r2, #1
 800313a:	4013      	ands	r3, r2
 800313c:	d040      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d107      	bne.n	8003156 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003146:	4b3e      	ldr	r3, [pc, #248]	@ (8003240 <HAL_RCC_ClockConfig+0x188>)
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	2380      	movs	r3, #128	@ 0x80
 800314c:	029b      	lsls	r3, r3, #10
 800314e:	4013      	ands	r3, r2
 8003150:	d114      	bne.n	800317c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e06e      	b.n	8003234 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d107      	bne.n	800316e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800315e:	4b38      	ldr	r3, [pc, #224]	@ (8003240 <HAL_RCC_ClockConfig+0x188>)
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	2380      	movs	r3, #128	@ 0x80
 8003164:	049b      	lsls	r3, r3, #18
 8003166:	4013      	ands	r3, r2
 8003168:	d108      	bne.n	800317c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e062      	b.n	8003234 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316e:	4b34      	ldr	r3, [pc, #208]	@ (8003240 <HAL_RCC_ClockConfig+0x188>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2202      	movs	r2, #2
 8003174:	4013      	ands	r3, r2
 8003176:	d101      	bne.n	800317c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e05b      	b.n	8003234 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800317c:	4b30      	ldr	r3, [pc, #192]	@ (8003240 <HAL_RCC_ClockConfig+0x188>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2203      	movs	r2, #3
 8003182:	4393      	bics	r3, r2
 8003184:	0019      	movs	r1, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	4b2d      	ldr	r3, [pc, #180]	@ (8003240 <HAL_RCC_ClockConfig+0x188>)
 800318c:	430a      	orrs	r2, r1
 800318e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003190:	f7fe ffc4 	bl	800211c <HAL_GetTick>
 8003194:	0003      	movs	r3, r0
 8003196:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003198:	e009      	b.n	80031ae <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800319a:	f7fe ffbf 	bl	800211c <HAL_GetTick>
 800319e:	0002      	movs	r2, r0
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	4a27      	ldr	r2, [pc, #156]	@ (8003244 <HAL_RCC_ClockConfig+0x18c>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e042      	b.n	8003234 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ae:	4b24      	ldr	r3, [pc, #144]	@ (8003240 <HAL_RCC_ClockConfig+0x188>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	220c      	movs	r2, #12
 80031b4:	401a      	ands	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	429a      	cmp	r2, r3
 80031be:	d1ec      	bne.n	800319a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031c0:	4b1e      	ldr	r3, [pc, #120]	@ (800323c <HAL_RCC_ClockConfig+0x184>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2201      	movs	r2, #1
 80031c6:	4013      	ands	r3, r2
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d211      	bcs.n	80031f2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ce:	4b1b      	ldr	r3, [pc, #108]	@ (800323c <HAL_RCC_ClockConfig+0x184>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2201      	movs	r2, #1
 80031d4:	4393      	bics	r3, r2
 80031d6:	0019      	movs	r1, r3
 80031d8:	4b18      	ldr	r3, [pc, #96]	@ (800323c <HAL_RCC_ClockConfig+0x184>)
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e0:	4b16      	ldr	r3, [pc, #88]	@ (800323c <HAL_RCC_ClockConfig+0x184>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2201      	movs	r2, #1
 80031e6:	4013      	ands	r3, r2
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d001      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e020      	b.n	8003234 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2204      	movs	r2, #4
 80031f8:	4013      	ands	r3, r2
 80031fa:	d009      	beq.n	8003210 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80031fc:	4b10      	ldr	r3, [pc, #64]	@ (8003240 <HAL_RCC_ClockConfig+0x188>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	4a11      	ldr	r2, [pc, #68]	@ (8003248 <HAL_RCC_ClockConfig+0x190>)
 8003202:	4013      	ands	r3, r2
 8003204:	0019      	movs	r1, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	4b0d      	ldr	r3, [pc, #52]	@ (8003240 <HAL_RCC_ClockConfig+0x188>)
 800320c:	430a      	orrs	r2, r1
 800320e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003210:	f000 f820 	bl	8003254 <HAL_RCC_GetSysClockFreq>
 8003214:	0001      	movs	r1, r0
 8003216:	4b0a      	ldr	r3, [pc, #40]	@ (8003240 <HAL_RCC_ClockConfig+0x188>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	091b      	lsrs	r3, r3, #4
 800321c:	220f      	movs	r2, #15
 800321e:	4013      	ands	r3, r2
 8003220:	4a0a      	ldr	r2, [pc, #40]	@ (800324c <HAL_RCC_ClockConfig+0x194>)
 8003222:	5cd3      	ldrb	r3, [r2, r3]
 8003224:	000a      	movs	r2, r1
 8003226:	40da      	lsrs	r2, r3
 8003228:	4b09      	ldr	r3, [pc, #36]	@ (8003250 <HAL_RCC_ClockConfig+0x198>)
 800322a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800322c:	2003      	movs	r0, #3
 800322e:	f7fe ff2f 	bl	8002090 <HAL_InitTick>
  
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	0018      	movs	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	b004      	add	sp, #16
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40022000 	.word	0x40022000
 8003240:	40021000 	.word	0x40021000
 8003244:	00001388 	.word	0x00001388
 8003248:	fffff8ff 	.word	0xfffff8ff
 800324c:	080053a0 	.word	0x080053a0
 8003250:	20000054 	.word	0x20000054

08003254 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800325a:	2300      	movs	r3, #0
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	2300      	movs	r3, #0
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	2300      	movs	r3, #0
 8003264:	617b      	str	r3, [r7, #20]
 8003266:	2300      	movs	r3, #0
 8003268:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800326a:	2300      	movs	r3, #0
 800326c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800326e:	4b21      	ldr	r3, [pc, #132]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	220c      	movs	r2, #12
 8003278:	4013      	ands	r3, r2
 800327a:	2b04      	cmp	r3, #4
 800327c:	d002      	beq.n	8003284 <HAL_RCC_GetSysClockFreq+0x30>
 800327e:	2b08      	cmp	r3, #8
 8003280:	d003      	beq.n	800328a <HAL_RCC_GetSysClockFreq+0x36>
 8003282:	e02e      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003284:	4b1c      	ldr	r3, [pc, #112]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003286:	613b      	str	r3, [r7, #16]
      break;
 8003288:	e02e      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	0c9b      	lsrs	r3, r3, #18
 800328e:	220f      	movs	r2, #15
 8003290:	4013      	ands	r3, r2
 8003292:	4a1a      	ldr	r2, [pc, #104]	@ (80032fc <HAL_RCC_GetSysClockFreq+0xa8>)
 8003294:	5cd3      	ldrb	r3, [r2, r3]
 8003296:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003298:	4b16      	ldr	r3, [pc, #88]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800329a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329c:	220f      	movs	r2, #15
 800329e:	4013      	ands	r3, r2
 80032a0:	4a17      	ldr	r2, [pc, #92]	@ (8003300 <HAL_RCC_GetSysClockFreq+0xac>)
 80032a2:	5cd3      	ldrb	r3, [r2, r3]
 80032a4:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80032a6:	68fa      	ldr	r2, [r7, #12]
 80032a8:	23c0      	movs	r3, #192	@ 0xc0
 80032aa:	025b      	lsls	r3, r3, #9
 80032ac:	401a      	ands	r2, r3
 80032ae:	2380      	movs	r3, #128	@ 0x80
 80032b0:	025b      	lsls	r3, r3, #9
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d109      	bne.n	80032ca <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80032b6:	68b9      	ldr	r1, [r7, #8]
 80032b8:	480f      	ldr	r0, [pc, #60]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80032ba:	f7fc ff25 	bl	8000108 <__udivsi3>
 80032be:	0003      	movs	r3, r0
 80032c0:	001a      	movs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4353      	muls	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	e008      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80032ca:	68b9      	ldr	r1, [r7, #8]
 80032cc:	480a      	ldr	r0, [pc, #40]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80032ce:	f7fc ff1b 	bl	8000108 <__udivsi3>
 80032d2:	0003      	movs	r3, r0
 80032d4:	001a      	movs	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4353      	muls	r3, r2
 80032da:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	613b      	str	r3, [r7, #16]
      break;
 80032e0:	e002      	b.n	80032e8 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032e2:	4b05      	ldr	r3, [pc, #20]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80032e4:	613b      	str	r3, [r7, #16]
      break;
 80032e6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80032e8:	693b      	ldr	r3, [r7, #16]
}
 80032ea:	0018      	movs	r0, r3
 80032ec:	46bd      	mov	sp, r7
 80032ee:	b006      	add	sp, #24
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	46c0      	nop			@ (mov r8, r8)
 80032f4:	40021000 	.word	0x40021000
 80032f8:	007a1200 	.word	0x007a1200
 80032fc:	080053b8 	.word	0x080053b8
 8003300:	080053c8 	.word	0x080053c8

08003304 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003308:	4b02      	ldr	r3, [pc, #8]	@ (8003314 <HAL_RCC_GetHCLKFreq+0x10>)
 800330a:	681b      	ldr	r3, [r3, #0]
}
 800330c:	0018      	movs	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	20000054 	.word	0x20000054

08003318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800331c:	f7ff fff2 	bl	8003304 <HAL_RCC_GetHCLKFreq>
 8003320:	0001      	movs	r1, r0
 8003322:	4b06      	ldr	r3, [pc, #24]	@ (800333c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	0a1b      	lsrs	r3, r3, #8
 8003328:	2207      	movs	r2, #7
 800332a:	4013      	ands	r3, r2
 800332c:	4a04      	ldr	r2, [pc, #16]	@ (8003340 <HAL_RCC_GetPCLK1Freq+0x28>)
 800332e:	5cd3      	ldrb	r3, [r2, r3]
 8003330:	40d9      	lsrs	r1, r3
 8003332:	000b      	movs	r3, r1
}    
 8003334:	0018      	movs	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	46c0      	nop			@ (mov r8, r8)
 800333c:	40021000 	.word	0x40021000
 8003340:	080053b0 	.word	0x080053b0

08003344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e042      	b.n	80033dc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	223d      	movs	r2, #61	@ 0x3d
 800335a:	5c9b      	ldrb	r3, [r3, r2]
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	d107      	bne.n	8003372 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	223c      	movs	r2, #60	@ 0x3c
 8003366:	2100      	movs	r1, #0
 8003368:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	0018      	movs	r0, r3
 800336e:	f7fe fc79 	bl	8001c64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	223d      	movs	r2, #61	@ 0x3d
 8003376:	2102      	movs	r1, #2
 8003378:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3304      	adds	r3, #4
 8003382:	0019      	movs	r1, r3
 8003384:	0010      	movs	r0, r2
 8003386:	f000 fac5 	bl	8003914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2246      	movs	r2, #70	@ 0x46
 800338e:	2101      	movs	r1, #1
 8003390:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	223e      	movs	r2, #62	@ 0x3e
 8003396:	2101      	movs	r1, #1
 8003398:	5499      	strb	r1, [r3, r2]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	223f      	movs	r2, #63	@ 0x3f
 800339e:	2101      	movs	r1, #1
 80033a0:	5499      	strb	r1, [r3, r2]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2240      	movs	r2, #64	@ 0x40
 80033a6:	2101      	movs	r1, #1
 80033a8:	5499      	strb	r1, [r3, r2]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2241      	movs	r2, #65	@ 0x41
 80033ae:	2101      	movs	r1, #1
 80033b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2242      	movs	r2, #66	@ 0x42
 80033b6:	2101      	movs	r1, #1
 80033b8:	5499      	strb	r1, [r3, r2]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2243      	movs	r2, #67	@ 0x43
 80033be:	2101      	movs	r1, #1
 80033c0:	5499      	strb	r1, [r3, r2]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2244      	movs	r2, #68	@ 0x44
 80033c6:	2101      	movs	r1, #1
 80033c8:	5499      	strb	r1, [r3, r2]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2245      	movs	r2, #69	@ 0x45
 80033ce:	2101      	movs	r1, #1
 80033d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	223d      	movs	r2, #61	@ 0x3d
 80033d6:	2101      	movs	r1, #1
 80033d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	0018      	movs	r0, r3
 80033de:	46bd      	mov	sp, r7
 80033e0:	b002      	add	sp, #8
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e042      	b.n	800347c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	223d      	movs	r2, #61	@ 0x3d
 80033fa:	5c9b      	ldrb	r3, [r3, r2]
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d107      	bne.n	8003412 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	223c      	movs	r2, #60	@ 0x3c
 8003406:	2100      	movs	r1, #0
 8003408:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	0018      	movs	r0, r3
 800340e:	f000 f839 	bl	8003484 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	223d      	movs	r2, #61	@ 0x3d
 8003416:	2102      	movs	r1, #2
 8003418:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	3304      	adds	r3, #4
 8003422:	0019      	movs	r1, r3
 8003424:	0010      	movs	r0, r2
 8003426:	f000 fa75 	bl	8003914 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2246      	movs	r2, #70	@ 0x46
 800342e:	2101      	movs	r1, #1
 8003430:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	223e      	movs	r2, #62	@ 0x3e
 8003436:	2101      	movs	r1, #1
 8003438:	5499      	strb	r1, [r3, r2]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	223f      	movs	r2, #63	@ 0x3f
 800343e:	2101      	movs	r1, #1
 8003440:	5499      	strb	r1, [r3, r2]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2240      	movs	r2, #64	@ 0x40
 8003446:	2101      	movs	r1, #1
 8003448:	5499      	strb	r1, [r3, r2]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2241      	movs	r2, #65	@ 0x41
 800344e:	2101      	movs	r1, #1
 8003450:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2242      	movs	r2, #66	@ 0x42
 8003456:	2101      	movs	r1, #1
 8003458:	5499      	strb	r1, [r3, r2]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2243      	movs	r2, #67	@ 0x43
 800345e:	2101      	movs	r1, #1
 8003460:	5499      	strb	r1, [r3, r2]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2244      	movs	r2, #68	@ 0x44
 8003466:	2101      	movs	r1, #1
 8003468:	5499      	strb	r1, [r3, r2]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2245      	movs	r2, #69	@ 0x45
 800346e:	2101      	movs	r1, #1
 8003470:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	223d      	movs	r2, #61	@ 0x3d
 8003476:	2101      	movs	r1, #1
 8003478:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	0018      	movs	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	b002      	add	sp, #8
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800348c:	46c0      	nop			@ (mov r8, r8)
 800348e:	46bd      	mov	sp, r7
 8003490:	b002      	add	sp, #8
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d108      	bne.n	80034b6 <HAL_TIM_PWM_Start+0x22>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	223e      	movs	r2, #62	@ 0x3e
 80034a8:	5c9b      	ldrb	r3, [r3, r2]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	1e5a      	subs	r2, r3, #1
 80034b0:	4193      	sbcs	r3, r2
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	e01f      	b.n	80034f6 <HAL_TIM_PWM_Start+0x62>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d108      	bne.n	80034ce <HAL_TIM_PWM_Start+0x3a>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	223f      	movs	r2, #63	@ 0x3f
 80034c0:	5c9b      	ldrb	r3, [r3, r2]
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	1e5a      	subs	r2, r3, #1
 80034c8:	4193      	sbcs	r3, r2
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	e013      	b.n	80034f6 <HAL_TIM_PWM_Start+0x62>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	d108      	bne.n	80034e6 <HAL_TIM_PWM_Start+0x52>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2240      	movs	r2, #64	@ 0x40
 80034d8:	5c9b      	ldrb	r3, [r3, r2]
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	3b01      	subs	r3, #1
 80034de:	1e5a      	subs	r2, r3, #1
 80034e0:	4193      	sbcs	r3, r2
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	e007      	b.n	80034f6 <HAL_TIM_PWM_Start+0x62>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2241      	movs	r2, #65	@ 0x41
 80034ea:	5c9b      	ldrb	r3, [r3, r2]
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	3b01      	subs	r3, #1
 80034f0:	1e5a      	subs	r2, r3, #1
 80034f2:	4193      	sbcs	r3, r2
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e064      	b.n	80035c8 <HAL_TIM_PWM_Start+0x134>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d104      	bne.n	800350e <HAL_TIM_PWM_Start+0x7a>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	223e      	movs	r2, #62	@ 0x3e
 8003508:	2102      	movs	r1, #2
 800350a:	5499      	strb	r1, [r3, r2]
 800350c:	e013      	b.n	8003536 <HAL_TIM_PWM_Start+0xa2>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	2b04      	cmp	r3, #4
 8003512:	d104      	bne.n	800351e <HAL_TIM_PWM_Start+0x8a>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	223f      	movs	r2, #63	@ 0x3f
 8003518:	2102      	movs	r1, #2
 800351a:	5499      	strb	r1, [r3, r2]
 800351c:	e00b      	b.n	8003536 <HAL_TIM_PWM_Start+0xa2>
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	2b08      	cmp	r3, #8
 8003522:	d104      	bne.n	800352e <HAL_TIM_PWM_Start+0x9a>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2240      	movs	r2, #64	@ 0x40
 8003528:	2102      	movs	r1, #2
 800352a:	5499      	strb	r1, [r3, r2]
 800352c:	e003      	b.n	8003536 <HAL_TIM_PWM_Start+0xa2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2241      	movs	r2, #65	@ 0x41
 8003532:	2102      	movs	r1, #2
 8003534:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6839      	ldr	r1, [r7, #0]
 800353c:	2201      	movs	r2, #1
 800353e:	0018      	movs	r0, r3
 8003540:	f000 fcdc 	bl	8003efc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a21      	ldr	r2, [pc, #132]	@ (80035d0 <HAL_TIM_PWM_Start+0x13c>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d009      	beq.n	8003562 <HAL_TIM_PWM_Start+0xce>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a20      	ldr	r2, [pc, #128]	@ (80035d4 <HAL_TIM_PWM_Start+0x140>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d004      	beq.n	8003562 <HAL_TIM_PWM_Start+0xce>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a1e      	ldr	r2, [pc, #120]	@ (80035d8 <HAL_TIM_PWM_Start+0x144>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d101      	bne.n	8003566 <HAL_TIM_PWM_Start+0xd2>
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <HAL_TIM_PWM_Start+0xd4>
 8003566:	2300      	movs	r3, #0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d008      	beq.n	800357e <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2180      	movs	r1, #128	@ 0x80
 8003578:	0209      	lsls	r1, r1, #8
 800357a:	430a      	orrs	r2, r1
 800357c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a13      	ldr	r2, [pc, #76]	@ (80035d0 <HAL_TIM_PWM_Start+0x13c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d004      	beq.n	8003592 <HAL_TIM_PWM_Start+0xfe>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a13      	ldr	r2, [pc, #76]	@ (80035dc <HAL_TIM_PWM_Start+0x148>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d111      	bne.n	80035b6 <HAL_TIM_PWM_Start+0x122>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2207      	movs	r2, #7
 800359a:	4013      	ands	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2b06      	cmp	r3, #6
 80035a2:	d010      	beq.n	80035c6 <HAL_TIM_PWM_Start+0x132>
    {
      __HAL_TIM_ENABLE(htim);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2101      	movs	r1, #1
 80035b0:	430a      	orrs	r2, r1
 80035b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b4:	e007      	b.n	80035c6 <HAL_TIM_PWM_Start+0x132>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2101      	movs	r1, #1
 80035c2:	430a      	orrs	r2, r1
 80035c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	0018      	movs	r0, r3
 80035ca:	46bd      	mov	sp, r7
 80035cc:	b004      	add	sp, #16
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40012c00 	.word	0x40012c00
 80035d4:	40014400 	.word	0x40014400
 80035d8:	40014800 	.word	0x40014800
 80035dc:	40000400 	.word	0x40000400

080035e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035ec:	2317      	movs	r3, #23
 80035ee:	18fb      	adds	r3, r7, r3
 80035f0:	2200      	movs	r2, #0
 80035f2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	223c      	movs	r2, #60	@ 0x3c
 80035f8:	5c9b      	ldrb	r3, [r3, r2]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <HAL_TIM_PWM_ConfigChannel+0x22>
 80035fe:	2302      	movs	r3, #2
 8003600:	e0ad      	b.n	800375e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	223c      	movs	r2, #60	@ 0x3c
 8003606:	2101      	movs	r1, #1
 8003608:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b0c      	cmp	r3, #12
 800360e:	d100      	bne.n	8003612 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003610:	e076      	b.n	8003700 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b0c      	cmp	r3, #12
 8003616:	d900      	bls.n	800361a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003618:	e095      	b.n	8003746 <HAL_TIM_PWM_ConfigChannel+0x166>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b08      	cmp	r3, #8
 800361e:	d04e      	beq.n	80036be <HAL_TIM_PWM_ConfigChannel+0xde>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b08      	cmp	r3, #8
 8003624:	d900      	bls.n	8003628 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003626:	e08e      	b.n	8003746 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_TIM_PWM_ConfigChannel+0x56>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b04      	cmp	r3, #4
 8003632:	d021      	beq.n	8003678 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003634:	e087      	b.n	8003746 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	0011      	movs	r1, r2
 800363e:	0018      	movs	r0, r3
 8003640:	f000 f9e2 	bl	8003a08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	699a      	ldr	r2, [r3, #24]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2108      	movs	r1, #8
 8003650:	430a      	orrs	r2, r1
 8003652:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	699a      	ldr	r2, [r3, #24]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2104      	movs	r1, #4
 8003660:	438a      	bics	r2, r1
 8003662:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6999      	ldr	r1, [r3, #24]
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	691a      	ldr	r2, [r3, #16]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	619a      	str	r2, [r3, #24]
      break;
 8003676:	e06b      	b.n	8003750 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	0011      	movs	r1, r2
 8003680:	0018      	movs	r0, r3
 8003682:	f000 fa3f 	bl	8003b04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	699a      	ldr	r2, [r3, #24]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2180      	movs	r1, #128	@ 0x80
 8003692:	0109      	lsls	r1, r1, #4
 8003694:	430a      	orrs	r2, r1
 8003696:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	699a      	ldr	r2, [r3, #24]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4931      	ldr	r1, [pc, #196]	@ (8003768 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80036a4:	400a      	ands	r2, r1
 80036a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6999      	ldr	r1, [r3, #24]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	021a      	lsls	r2, r3, #8
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	619a      	str	r2, [r3, #24]
      break;
 80036bc:	e048      	b.n	8003750 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	0011      	movs	r1, r2
 80036c6:	0018      	movs	r0, r3
 80036c8:	f000 fa9a 	bl	8003c00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	69da      	ldr	r2, [r3, #28]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2108      	movs	r1, #8
 80036d8:	430a      	orrs	r2, r1
 80036da:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	69da      	ldr	r2, [r3, #28]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2104      	movs	r1, #4
 80036e8:	438a      	bics	r2, r1
 80036ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	69d9      	ldr	r1, [r3, #28]
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	691a      	ldr	r2, [r3, #16]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	61da      	str	r2, [r3, #28]
      break;
 80036fe:	e027      	b.n	8003750 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	0011      	movs	r1, r2
 8003708:	0018      	movs	r0, r3
 800370a:	f000 faf9 	bl	8003d00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	69da      	ldr	r2, [r3, #28]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2180      	movs	r1, #128	@ 0x80
 800371a:	0109      	lsls	r1, r1, #4
 800371c:	430a      	orrs	r2, r1
 800371e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	69da      	ldr	r2, [r3, #28]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	490f      	ldr	r1, [pc, #60]	@ (8003768 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800372c:	400a      	ands	r2, r1
 800372e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	69d9      	ldr	r1, [r3, #28]
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	021a      	lsls	r2, r3, #8
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	61da      	str	r2, [r3, #28]
      break;
 8003744:	e004      	b.n	8003750 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003746:	2317      	movs	r3, #23
 8003748:	18fb      	adds	r3, r7, r3
 800374a:	2201      	movs	r2, #1
 800374c:	701a      	strb	r2, [r3, #0]
      break;
 800374e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	223c      	movs	r2, #60	@ 0x3c
 8003754:	2100      	movs	r1, #0
 8003756:	5499      	strb	r1, [r3, r2]

  return status;
 8003758:	2317      	movs	r3, #23
 800375a:	18fb      	adds	r3, r7, r3
 800375c:	781b      	ldrb	r3, [r3, #0]
}
 800375e:	0018      	movs	r0, r3
 8003760:	46bd      	mov	sp, r7
 8003762:	b006      	add	sp, #24
 8003764:	bd80      	pop	{r7, pc}
 8003766:	46c0      	nop			@ (mov r8, r8)
 8003768:	fffffbff 	.word	0xfffffbff

0800376c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003776:	230f      	movs	r3, #15
 8003778:	18fb      	adds	r3, r7, r3
 800377a:	2200      	movs	r2, #0
 800377c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	223c      	movs	r2, #60	@ 0x3c
 8003782:	5c9b      	ldrb	r3, [r3, r2]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_TIM_ConfigClockSource+0x20>
 8003788:	2302      	movs	r3, #2
 800378a:	e0bc      	b.n	8003906 <HAL_TIM_ConfigClockSource+0x19a>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	223c      	movs	r2, #60	@ 0x3c
 8003790:	2101      	movs	r1, #1
 8003792:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	223d      	movs	r2, #61	@ 0x3d
 8003798:	2102      	movs	r1, #2
 800379a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2277      	movs	r2, #119	@ 0x77
 80037a8:	4393      	bics	r3, r2
 80037aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4a58      	ldr	r2, [pc, #352]	@ (8003910 <HAL_TIM_ConfigClockSource+0x1a4>)
 80037b0:	4013      	ands	r3, r2
 80037b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2280      	movs	r2, #128	@ 0x80
 80037c2:	0192      	lsls	r2, r2, #6
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d040      	beq.n	800384a <HAL_TIM_ConfigClockSource+0xde>
 80037c8:	2280      	movs	r2, #128	@ 0x80
 80037ca:	0192      	lsls	r2, r2, #6
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d900      	bls.n	80037d2 <HAL_TIM_ConfigClockSource+0x66>
 80037d0:	e088      	b.n	80038e4 <HAL_TIM_ConfigClockSource+0x178>
 80037d2:	2280      	movs	r2, #128	@ 0x80
 80037d4:	0152      	lsls	r2, r2, #5
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d100      	bne.n	80037dc <HAL_TIM_ConfigClockSource+0x70>
 80037da:	e088      	b.n	80038ee <HAL_TIM_ConfigClockSource+0x182>
 80037dc:	2280      	movs	r2, #128	@ 0x80
 80037de:	0152      	lsls	r2, r2, #5
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d900      	bls.n	80037e6 <HAL_TIM_ConfigClockSource+0x7a>
 80037e4:	e07e      	b.n	80038e4 <HAL_TIM_ConfigClockSource+0x178>
 80037e6:	2b70      	cmp	r3, #112	@ 0x70
 80037e8:	d018      	beq.n	800381c <HAL_TIM_ConfigClockSource+0xb0>
 80037ea:	d900      	bls.n	80037ee <HAL_TIM_ConfigClockSource+0x82>
 80037ec:	e07a      	b.n	80038e4 <HAL_TIM_ConfigClockSource+0x178>
 80037ee:	2b60      	cmp	r3, #96	@ 0x60
 80037f0:	d04f      	beq.n	8003892 <HAL_TIM_ConfigClockSource+0x126>
 80037f2:	d900      	bls.n	80037f6 <HAL_TIM_ConfigClockSource+0x8a>
 80037f4:	e076      	b.n	80038e4 <HAL_TIM_ConfigClockSource+0x178>
 80037f6:	2b50      	cmp	r3, #80	@ 0x50
 80037f8:	d03b      	beq.n	8003872 <HAL_TIM_ConfigClockSource+0x106>
 80037fa:	d900      	bls.n	80037fe <HAL_TIM_ConfigClockSource+0x92>
 80037fc:	e072      	b.n	80038e4 <HAL_TIM_ConfigClockSource+0x178>
 80037fe:	2b40      	cmp	r3, #64	@ 0x40
 8003800:	d057      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0x146>
 8003802:	d900      	bls.n	8003806 <HAL_TIM_ConfigClockSource+0x9a>
 8003804:	e06e      	b.n	80038e4 <HAL_TIM_ConfigClockSource+0x178>
 8003806:	2b30      	cmp	r3, #48	@ 0x30
 8003808:	d063      	beq.n	80038d2 <HAL_TIM_ConfigClockSource+0x166>
 800380a:	d86b      	bhi.n	80038e4 <HAL_TIM_ConfigClockSource+0x178>
 800380c:	2b20      	cmp	r3, #32
 800380e:	d060      	beq.n	80038d2 <HAL_TIM_ConfigClockSource+0x166>
 8003810:	d868      	bhi.n	80038e4 <HAL_TIM_ConfigClockSource+0x178>
 8003812:	2b00      	cmp	r3, #0
 8003814:	d05d      	beq.n	80038d2 <HAL_TIM_ConfigClockSource+0x166>
 8003816:	2b10      	cmp	r3, #16
 8003818:	d05b      	beq.n	80038d2 <HAL_TIM_ConfigClockSource+0x166>
 800381a:	e063      	b.n	80038e4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800382c:	f000 fb46 	bl	8003ebc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	2277      	movs	r2, #119	@ 0x77
 800383c:	4313      	orrs	r3, r2
 800383e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	609a      	str	r2, [r3, #8]
      break;
 8003848:	e052      	b.n	80038f0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800385a:	f000 fb2f 	bl	8003ebc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2180      	movs	r1, #128	@ 0x80
 800386a:	01c9      	lsls	r1, r1, #7
 800386c:	430a      	orrs	r2, r1
 800386e:	609a      	str	r2, [r3, #8]
      break;
 8003870:	e03e      	b.n	80038f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800387e:	001a      	movs	r2, r3
 8003880:	f000 faa2 	bl	8003dc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2150      	movs	r1, #80	@ 0x50
 800388a:	0018      	movs	r0, r3
 800388c:	f000 fafc 	bl	8003e88 <TIM_ITRx_SetConfig>
      break;
 8003890:	e02e      	b.n	80038f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800389e:	001a      	movs	r2, r3
 80038a0:	f000 fac0 	bl	8003e24 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2160      	movs	r1, #96	@ 0x60
 80038aa:	0018      	movs	r0, r3
 80038ac:	f000 faec 	bl	8003e88 <TIM_ITRx_SetConfig>
      break;
 80038b0:	e01e      	b.n	80038f0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038be:	001a      	movs	r2, r3
 80038c0:	f000 fa82 	bl	8003dc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2140      	movs	r1, #64	@ 0x40
 80038ca:	0018      	movs	r0, r3
 80038cc:	f000 fadc 	bl	8003e88 <TIM_ITRx_SetConfig>
      break;
 80038d0:	e00e      	b.n	80038f0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	0019      	movs	r1, r3
 80038dc:	0010      	movs	r0, r2
 80038de:	f000 fad3 	bl	8003e88 <TIM_ITRx_SetConfig>
      break;
 80038e2:	e005      	b.n	80038f0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80038e4:	230f      	movs	r3, #15
 80038e6:	18fb      	adds	r3, r7, r3
 80038e8:	2201      	movs	r2, #1
 80038ea:	701a      	strb	r2, [r3, #0]
      break;
 80038ec:	e000      	b.n	80038f0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80038ee:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	223d      	movs	r2, #61	@ 0x3d
 80038f4:	2101      	movs	r1, #1
 80038f6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	223c      	movs	r2, #60	@ 0x3c
 80038fc:	2100      	movs	r1, #0
 80038fe:	5499      	strb	r1, [r3, r2]

  return status;
 8003900:	230f      	movs	r3, #15
 8003902:	18fb      	adds	r3, r7, r3
 8003904:	781b      	ldrb	r3, [r3, #0]
}
 8003906:	0018      	movs	r0, r3
 8003908:	46bd      	mov	sp, r7
 800390a:	b004      	add	sp, #16
 800390c:	bd80      	pop	{r7, pc}
 800390e:	46c0      	nop			@ (mov r8, r8)
 8003910:	ffff00ff 	.word	0xffff00ff

08003914 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a32      	ldr	r2, [pc, #200]	@ (80039f0 <TIM_Base_SetConfig+0xdc>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d003      	beq.n	8003934 <TIM_Base_SetConfig+0x20>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a31      	ldr	r2, [pc, #196]	@ (80039f4 <TIM_Base_SetConfig+0xe0>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d108      	bne.n	8003946 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2270      	movs	r2, #112	@ 0x70
 8003938:	4393      	bics	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a29      	ldr	r2, [pc, #164]	@ (80039f0 <TIM_Base_SetConfig+0xdc>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00f      	beq.n	800396e <TIM_Base_SetConfig+0x5a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a28      	ldr	r2, [pc, #160]	@ (80039f4 <TIM_Base_SetConfig+0xe0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d00b      	beq.n	800396e <TIM_Base_SetConfig+0x5a>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a27      	ldr	r2, [pc, #156]	@ (80039f8 <TIM_Base_SetConfig+0xe4>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d007      	beq.n	800396e <TIM_Base_SetConfig+0x5a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a26      	ldr	r2, [pc, #152]	@ (80039fc <TIM_Base_SetConfig+0xe8>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d003      	beq.n	800396e <TIM_Base_SetConfig+0x5a>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a25      	ldr	r2, [pc, #148]	@ (8003a00 <TIM_Base_SetConfig+0xec>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d108      	bne.n	8003980 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	4a24      	ldr	r2, [pc, #144]	@ (8003a04 <TIM_Base_SetConfig+0xf0>)
 8003972:	4013      	ands	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	4313      	orrs	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2280      	movs	r2, #128	@ 0x80
 8003984:	4393      	bics	r3, r2
 8003986:	001a      	movs	r2, r3
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	4313      	orrs	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	689a      	ldr	r2, [r3, #8]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a11      	ldr	r2, [pc, #68]	@ (80039f0 <TIM_Base_SetConfig+0xdc>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d007      	beq.n	80039be <TIM_Base_SetConfig+0xaa>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a12      	ldr	r2, [pc, #72]	@ (80039fc <TIM_Base_SetConfig+0xe8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d003      	beq.n	80039be <TIM_Base_SetConfig+0xaa>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a11      	ldr	r2, [pc, #68]	@ (8003a00 <TIM_Base_SetConfig+0xec>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d103      	bne.n	80039c6 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	691a      	ldr	r2, [r3, #16]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	2201      	movs	r2, #1
 80039d2:	4013      	ands	r3, r2
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d106      	bne.n	80039e6 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	2201      	movs	r2, #1
 80039de:	4393      	bics	r3, r2
 80039e0:	001a      	movs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	611a      	str	r2, [r3, #16]
  }
}
 80039e6:	46c0      	nop			@ (mov r8, r8)
 80039e8:	46bd      	mov	sp, r7
 80039ea:	b004      	add	sp, #16
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	46c0      	nop			@ (mov r8, r8)
 80039f0:	40012c00 	.word	0x40012c00
 80039f4:	40000400 	.word	0x40000400
 80039f8:	40002000 	.word	0x40002000
 80039fc:	40014400 	.word	0x40014400
 8003a00:	40014800 	.word	0x40014800
 8003a04:	fffffcff 	.word	0xfffffcff

08003a08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	4393      	bics	r3, r2
 8003a20:	001a      	movs	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2270      	movs	r2, #112	@ 0x70
 8003a36:	4393      	bics	r3, r2
 8003a38:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2203      	movs	r2, #3
 8003a3e:	4393      	bics	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	2202      	movs	r2, #2
 8003a50:	4393      	bics	r3, r2
 8003a52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a23      	ldr	r2, [pc, #140]	@ (8003af0 <TIM_OC1_SetConfig+0xe8>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d007      	beq.n	8003a76 <TIM_OC1_SetConfig+0x6e>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a22      	ldr	r2, [pc, #136]	@ (8003af4 <TIM_OC1_SetConfig+0xec>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d003      	beq.n	8003a76 <TIM_OC1_SetConfig+0x6e>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a21      	ldr	r2, [pc, #132]	@ (8003af8 <TIM_OC1_SetConfig+0xf0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d10c      	bne.n	8003a90 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2208      	movs	r2, #8
 8003a7a:	4393      	bics	r3, r2
 8003a7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	4393      	bics	r3, r2
 8003a8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a17      	ldr	r2, [pc, #92]	@ (8003af0 <TIM_OC1_SetConfig+0xe8>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d007      	beq.n	8003aa8 <TIM_OC1_SetConfig+0xa0>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a16      	ldr	r2, [pc, #88]	@ (8003af4 <TIM_OC1_SetConfig+0xec>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d003      	beq.n	8003aa8 <TIM_OC1_SetConfig+0xa0>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a15      	ldr	r2, [pc, #84]	@ (8003af8 <TIM_OC1_SetConfig+0xf0>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d111      	bne.n	8003acc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	4a14      	ldr	r2, [pc, #80]	@ (8003afc <TIM_OC1_SetConfig+0xf4>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	4a13      	ldr	r2, [pc, #76]	@ (8003b00 <TIM_OC1_SetConfig+0xf8>)
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	621a      	str	r2, [r3, #32]
}
 8003ae6:	46c0      	nop			@ (mov r8, r8)
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	b006      	add	sp, #24
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	46c0      	nop			@ (mov r8, r8)
 8003af0:	40012c00 	.word	0x40012c00
 8003af4:	40014400 	.word	0x40014400
 8003af8:	40014800 	.word	0x40014800
 8003afc:	fffffeff 	.word	0xfffffeff
 8003b00:	fffffdff 	.word	0xfffffdff

08003b04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	2210      	movs	r2, #16
 8003b1a:	4393      	bics	r3, r2
 8003b1c:	001a      	movs	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4a2c      	ldr	r2, [pc, #176]	@ (8003be4 <TIM_OC2_SetConfig+0xe0>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4a2b      	ldr	r2, [pc, #172]	@ (8003be8 <TIM_OC2_SetConfig+0xe4>)
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	021b      	lsls	r3, r3, #8
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	4393      	bics	r3, r2
 8003b50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	011b      	lsls	r3, r3, #4
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a22      	ldr	r2, [pc, #136]	@ (8003bec <TIM_OC2_SetConfig+0xe8>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d10d      	bne.n	8003b82 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2280      	movs	r2, #128	@ 0x80
 8003b6a:	4393      	bics	r3, r2
 8003b6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	011b      	lsls	r3, r3, #4
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	2240      	movs	r2, #64	@ 0x40
 8003b7e:	4393      	bics	r3, r2
 8003b80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a19      	ldr	r2, [pc, #100]	@ (8003bec <TIM_OC2_SetConfig+0xe8>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d007      	beq.n	8003b9a <TIM_OC2_SetConfig+0x96>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a18      	ldr	r2, [pc, #96]	@ (8003bf0 <TIM_OC2_SetConfig+0xec>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d003      	beq.n	8003b9a <TIM_OC2_SetConfig+0x96>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a17      	ldr	r2, [pc, #92]	@ (8003bf4 <TIM_OC2_SetConfig+0xf0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d113      	bne.n	8003bc2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	4a16      	ldr	r2, [pc, #88]	@ (8003bf8 <TIM_OC2_SetConfig+0xf4>)
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	4a15      	ldr	r2, [pc, #84]	@ (8003bfc <TIM_OC2_SetConfig+0xf8>)
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	621a      	str	r2, [r3, #32]
}
 8003bdc:	46c0      	nop			@ (mov r8, r8)
 8003bde:	46bd      	mov	sp, r7
 8003be0:	b006      	add	sp, #24
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	ffff8fff 	.word	0xffff8fff
 8003be8:	fffffcff 	.word	0xfffffcff
 8003bec:	40012c00 	.word	0x40012c00
 8003bf0:	40014400 	.word	0x40014400
 8003bf4:	40014800 	.word	0x40014800
 8003bf8:	fffffbff 	.word	0xfffffbff
 8003bfc:	fffff7ff 	.word	0xfffff7ff

08003c00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	4a31      	ldr	r2, [pc, #196]	@ (8003cdc <TIM_OC3_SetConfig+0xdc>)
 8003c16:	401a      	ands	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2270      	movs	r2, #112	@ 0x70
 8003c2c:	4393      	bics	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2203      	movs	r2, #3
 8003c34:	4393      	bics	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	4a26      	ldr	r2, [pc, #152]	@ (8003ce0 <TIM_OC3_SetConfig+0xe0>)
 8003c46:	4013      	ands	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	021b      	lsls	r3, r3, #8
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a22      	ldr	r2, [pc, #136]	@ (8003ce4 <TIM_OC3_SetConfig+0xe4>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d10d      	bne.n	8003c7a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	4a21      	ldr	r2, [pc, #132]	@ (8003ce8 <TIM_OC3_SetConfig+0xe8>)
 8003c62:	4013      	ands	r3, r2
 8003c64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	021b      	lsls	r3, r3, #8
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	4a1d      	ldr	r2, [pc, #116]	@ (8003cec <TIM_OC3_SetConfig+0xec>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a19      	ldr	r2, [pc, #100]	@ (8003ce4 <TIM_OC3_SetConfig+0xe4>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d007      	beq.n	8003c92 <TIM_OC3_SetConfig+0x92>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a1a      	ldr	r2, [pc, #104]	@ (8003cf0 <TIM_OC3_SetConfig+0xf0>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d003      	beq.n	8003c92 <TIM_OC3_SetConfig+0x92>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a19      	ldr	r2, [pc, #100]	@ (8003cf4 <TIM_OC3_SetConfig+0xf4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d113      	bne.n	8003cba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	4a18      	ldr	r2, [pc, #96]	@ (8003cf8 <TIM_OC3_SetConfig+0xf8>)
 8003c96:	4013      	ands	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	4a17      	ldr	r2, [pc, #92]	@ (8003cfc <TIM_OC3_SetConfig+0xfc>)
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	621a      	str	r2, [r3, #32]
}
 8003cd4:	46c0      	nop			@ (mov r8, r8)
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	b006      	add	sp, #24
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	fffffeff 	.word	0xfffffeff
 8003ce0:	fffffdff 	.word	0xfffffdff
 8003ce4:	40012c00 	.word	0x40012c00
 8003ce8:	fffff7ff 	.word	0xfffff7ff
 8003cec:	fffffbff 	.word	0xfffffbff
 8003cf0:	40014400 	.word	0x40014400
 8003cf4:	40014800 	.word	0x40014800
 8003cf8:	ffffefff 	.word	0xffffefff
 8003cfc:	ffffdfff 	.word	0xffffdfff

08003d00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	4a24      	ldr	r2, [pc, #144]	@ (8003da8 <TIM_OC4_SetConfig+0xa8>)
 8003d16:	401a      	ands	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4a20      	ldr	r2, [pc, #128]	@ (8003dac <TIM_OC4_SetConfig+0xac>)
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4a1f      	ldr	r2, [pc, #124]	@ (8003db0 <TIM_OC4_SetConfig+0xb0>)
 8003d34:	4013      	ands	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	021b      	lsls	r3, r3, #8
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	4a1b      	ldr	r2, [pc, #108]	@ (8003db4 <TIM_OC4_SetConfig+0xb4>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	031b      	lsls	r3, r3, #12
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a17      	ldr	r2, [pc, #92]	@ (8003db8 <TIM_OC4_SetConfig+0xb8>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d007      	beq.n	8003d70 <TIM_OC4_SetConfig+0x70>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a16      	ldr	r2, [pc, #88]	@ (8003dbc <TIM_OC4_SetConfig+0xbc>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d003      	beq.n	8003d70 <TIM_OC4_SetConfig+0x70>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a15      	ldr	r2, [pc, #84]	@ (8003dc0 <TIM_OC4_SetConfig+0xc0>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d109      	bne.n	8003d84 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	4a14      	ldr	r2, [pc, #80]	@ (8003dc4 <TIM_OC4_SetConfig+0xc4>)
 8003d74:	4013      	ands	r3, r2
 8003d76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	019b      	lsls	r3, r3, #6
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	697a      	ldr	r2, [r7, #20]
 8003d88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	621a      	str	r2, [r3, #32]
}
 8003d9e:	46c0      	nop			@ (mov r8, r8)
 8003da0:	46bd      	mov	sp, r7
 8003da2:	b006      	add	sp, #24
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	46c0      	nop			@ (mov r8, r8)
 8003da8:	ffffefff 	.word	0xffffefff
 8003dac:	ffff8fff 	.word	0xffff8fff
 8003db0:	fffffcff 	.word	0xfffffcff
 8003db4:	ffffdfff 	.word	0xffffdfff
 8003db8:	40012c00 	.word	0x40012c00
 8003dbc:	40014400 	.word	0x40014400
 8003dc0:	40014800 	.word	0x40014800
 8003dc4:	ffffbfff 	.word	0xffffbfff

08003dc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6a1b      	ldr	r3, [r3, #32]
 8003dd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	2201      	movs	r2, #1
 8003de0:	4393      	bics	r3, r2
 8003de2:	001a      	movs	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	22f0      	movs	r2, #240	@ 0xf0
 8003df2:	4393      	bics	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	220a      	movs	r2, #10
 8003e04:	4393      	bics	r3, r2
 8003e06:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	697a      	ldr	r2, [r7, #20]
 8003e1a:	621a      	str	r2, [r3, #32]
}
 8003e1c:	46c0      	nop			@ (mov r8, r8)
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	b006      	add	sp, #24
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	2210      	movs	r2, #16
 8003e3c:	4393      	bics	r3, r2
 8003e3e:	001a      	movs	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8003e84 <TIM_TI2_ConfigInputStage+0x60>)
 8003e4e:	4013      	ands	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	031b      	lsls	r3, r3, #12
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	22a0      	movs	r2, #160	@ 0xa0
 8003e60:	4393      	bics	r3, r2
 8003e62:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	693a      	ldr	r2, [r7, #16]
 8003e72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	621a      	str	r2, [r3, #32]
}
 8003e7a:	46c0      	nop			@ (mov r8, r8)
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	b006      	add	sp, #24
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	46c0      	nop			@ (mov r8, r8)
 8003e84:	ffff0fff 	.word	0xffff0fff

08003e88 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2270      	movs	r2, #112	@ 0x70
 8003e9c:	4393      	bics	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	2207      	movs	r2, #7
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	609a      	str	r2, [r3, #8]
}
 8003eb2:	46c0      	nop			@ (mov r8, r8)
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	b004      	add	sp, #16
 8003eb8:	bd80      	pop	{r7, pc}
	...

08003ebc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
 8003ec8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	4a09      	ldr	r2, [pc, #36]	@ (8003ef8 <TIM_ETR_SetConfig+0x3c>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	021a      	lsls	r2, r3, #8
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	609a      	str	r2, [r3, #8]
}
 8003ef0:	46c0      	nop			@ (mov r8, r8)
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	b006      	add	sp, #24
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	ffff00ff 	.word	0xffff00ff

08003efc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	221f      	movs	r2, #31
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	2201      	movs	r2, #1
 8003f10:	409a      	lsls	r2, r3
 8003f12:	0013      	movs	r3, r2
 8003f14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	43d2      	mvns	r2, r2
 8003f1e:	401a      	ands	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a1a      	ldr	r2, [r3, #32]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	211f      	movs	r1, #31
 8003f2c:	400b      	ands	r3, r1
 8003f2e:	6879      	ldr	r1, [r7, #4]
 8003f30:	4099      	lsls	r1, r3
 8003f32:	000b      	movs	r3, r1
 8003f34:	431a      	orrs	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	621a      	str	r2, [r3, #32]
}
 8003f3a:	46c0      	nop			@ (mov r8, r8)
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	b006      	add	sp, #24
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	223c      	movs	r2, #60	@ 0x3c
 8003f52:	5c9b      	ldrb	r3, [r3, r2]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d101      	bne.n	8003f5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	e03c      	b.n	8003fd6 <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	223c      	movs	r2, #60	@ 0x3c
 8003f60:	2101      	movs	r1, #1
 8003f62:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	223d      	movs	r2, #61	@ 0x3d
 8003f68:	2102      	movs	r1, #2
 8003f6a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2270      	movs	r2, #112	@ 0x70
 8003f80:	4393      	bics	r3, r2
 8003f82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a11      	ldr	r2, [pc, #68]	@ (8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d004      	beq.n	8003faa <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a0f      	ldr	r2, [pc, #60]	@ (8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d10c      	bne.n	8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2280      	movs	r2, #128	@ 0x80
 8003fae:	4393      	bics	r3, r2
 8003fb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	68ba      	ldr	r2, [r7, #8]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	223d      	movs	r2, #61	@ 0x3d
 8003fc8:	2101      	movs	r1, #1
 8003fca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	223c      	movs	r2, #60	@ 0x3c
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	b004      	add	sp, #16
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	46c0      	nop			@ (mov r8, r8)
 8003fe0:	40012c00 	.word	0x40012c00
 8003fe4:	40000400 	.word	0x40000400

08003fe8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	223c      	movs	r2, #60	@ 0x3c
 8003ffa:	5c9b      	ldrb	r3, [r3, r2]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004000:	2302      	movs	r3, #2
 8004002:	e03e      	b.n	8004082 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	223c      	movs	r2, #60	@ 0x3c
 8004008:	2101      	movs	r1, #1
 800400a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	22ff      	movs	r2, #255	@ 0xff
 8004010:	4393      	bics	r3, r2
 8004012:	001a      	movs	r2, r3
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	4313      	orrs	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4a1b      	ldr	r2, [pc, #108]	@ (800408c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004020:	401a      	ands	r2, r3
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	4313      	orrs	r3, r2
 8004028:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4a18      	ldr	r2, [pc, #96]	@ (8004090 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800402e:	401a      	ands	r2, r3
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	4313      	orrs	r3, r2
 8004036:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4a16      	ldr	r2, [pc, #88]	@ (8004094 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800403c:	401a      	ands	r2, r3
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4313      	orrs	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	4a13      	ldr	r2, [pc, #76]	@ (8004098 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800404a:	401a      	ands	r2, r3
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	4313      	orrs	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4a11      	ldr	r2, [pc, #68]	@ (800409c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8004058:	401a      	ands	r2, r3
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	4313      	orrs	r3, r2
 8004060:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	4a0e      	ldr	r2, [pc, #56]	@ (80040a0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8004066:	401a      	ands	r2, r3
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	69db      	ldr	r3, [r3, #28]
 800406c:	4313      	orrs	r3, r2
 800406e:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	223c      	movs	r2, #60	@ 0x3c
 800407c:	2100      	movs	r1, #0
 800407e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	0018      	movs	r0, r3
 8004084:	46bd      	mov	sp, r7
 8004086:	b004      	add	sp, #16
 8004088:	bd80      	pop	{r7, pc}
 800408a:	46c0      	nop			@ (mov r8, r8)
 800408c:	fffffcff 	.word	0xfffffcff
 8004090:	fffffbff 	.word	0xfffffbff
 8004094:	fffff7ff 	.word	0xfffff7ff
 8004098:	ffffefff 	.word	0xffffefff
 800409c:	ffffdfff 	.word	0xffffdfff
 80040a0:	ffffbfff 	.word	0xffffbfff

080040a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e044      	b.n	8004140 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d107      	bne.n	80040ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2278      	movs	r2, #120	@ 0x78
 80040c2:	2100      	movs	r1, #0
 80040c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	0018      	movs	r0, r3
 80040ca:	f7fd fed5 	bl	8001e78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2224      	movs	r2, #36	@ 0x24
 80040d2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2101      	movs	r1, #1
 80040e0:	438a      	bics	r2, r1
 80040e2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	0018      	movs	r0, r3
 80040f0:	f000 fcb0 	bl	8004a54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	0018      	movs	r0, r3
 80040f8:	f000 fb6c 	bl	80047d4 <UART_SetConfig>
 80040fc:	0003      	movs	r3, r0
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d101      	bne.n	8004106 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e01c      	b.n	8004140 <HAL_UART_Init+0x9c>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	490d      	ldr	r1, [pc, #52]	@ (8004148 <HAL_UART_Init+0xa4>)
 8004112:	400a      	ands	r2, r1
 8004114:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689a      	ldr	r2, [r3, #8]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2108      	movs	r1, #8
 8004122:	438a      	bics	r2, r1
 8004124:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2101      	movs	r1, #1
 8004132:	430a      	orrs	r2, r1
 8004134:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	0018      	movs	r0, r3
 800413a:	f000 fd3f 	bl	8004bbc <UART_CheckIdleState>
 800413e:	0003      	movs	r3, r0
}
 8004140:	0018      	movs	r0, r3
 8004142:	46bd      	mov	sp, r7
 8004144:	b002      	add	sp, #8
 8004146:	bd80      	pop	{r7, pc}
 8004148:	fffff7ff 	.word	0xfffff7ff

0800414c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	1dbb      	adds	r3, r7, #6
 8004158:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2280      	movs	r2, #128	@ 0x80
 800415e:	589b      	ldr	r3, [r3, r2]
 8004160:	2b20      	cmp	r3, #32
 8004162:	d145      	bne.n	80041f0 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_UART_Receive_DMA+0x26>
 800416a:	1dbb      	adds	r3, r7, #6
 800416c:	881b      	ldrh	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e03d      	b.n	80041f2 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	689a      	ldr	r2, [r3, #8]
 800417a:	2380      	movs	r3, #128	@ 0x80
 800417c:	015b      	lsls	r3, r3, #5
 800417e:	429a      	cmp	r2, r3
 8004180:	d109      	bne.n	8004196 <HAL_UART_Receive_DMA+0x4a>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d105      	bne.n	8004196 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2201      	movs	r2, #1
 800418e:	4013      	ands	r3, r2
 8004190:	d001      	beq.n	8004196 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e02d      	b.n	80041f2 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	2380      	movs	r3, #128	@ 0x80
 80041a4:	041b      	lsls	r3, r3, #16
 80041a6:	4013      	ands	r3, r2
 80041a8:	d019      	beq.n	80041de <HAL_UART_Receive_DMA+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041aa:	f3ef 8310 	mrs	r3, PRIMASK
 80041ae:	613b      	str	r3, [r7, #16]
  return(result);
 80041b0:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041b2:	61fb      	str	r3, [r7, #28]
 80041b4:	2301      	movs	r3, #1
 80041b6:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f383 8810 	msr	PRIMASK, r3
}
 80041be:	46c0      	nop			@ (mov r8, r8)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2180      	movs	r1, #128	@ 0x80
 80041cc:	04c9      	lsls	r1, r1, #19
 80041ce:	430a      	orrs	r2, r1
 80041d0:	601a      	str	r2, [r3, #0]
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	f383 8810 	msr	PRIMASK, r3
}
 80041dc:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80041de:	1dbb      	adds	r3, r7, #6
 80041e0:	881a      	ldrh	r2, [r3, #0]
 80041e2:	68b9      	ldr	r1, [r7, #8]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	0018      	movs	r0, r3
 80041e8:	f000 fe00 	bl	8004dec <UART_Start_Receive_DMA>
 80041ec:	0003      	movs	r3, r0
 80041ee:	e000      	b.n	80041f2 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80041f0:	2302      	movs	r3, #2
  }
}
 80041f2:	0018      	movs	r0, r3
 80041f4:	46bd      	mov	sp, r7
 80041f6:	b008      	add	sp, #32
 80041f8:	bd80      	pop	{r7, pc}
	...

080041fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041fc:	b590      	push	{r4, r7, lr}
 80041fe:	b0ab      	sub	sp, #172	@ 0xac
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	22a4      	movs	r2, #164	@ 0xa4
 800420c:	18b9      	adds	r1, r7, r2
 800420e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	20a0      	movs	r0, #160	@ 0xa0
 8004218:	1839      	adds	r1, r7, r0
 800421a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	219c      	movs	r1, #156	@ 0x9c
 8004224:	1879      	adds	r1, r7, r1
 8004226:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004228:	0011      	movs	r1, r2
 800422a:	18bb      	adds	r3, r7, r2
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a99      	ldr	r2, [pc, #612]	@ (8004494 <HAL_UART_IRQHandler+0x298>)
 8004230:	4013      	ands	r3, r2
 8004232:	2298      	movs	r2, #152	@ 0x98
 8004234:	18bc      	adds	r4, r7, r2
 8004236:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004238:	18bb      	adds	r3, r7, r2
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d114      	bne.n	800426a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004240:	187b      	adds	r3, r7, r1
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2220      	movs	r2, #32
 8004246:	4013      	ands	r3, r2
 8004248:	d00f      	beq.n	800426a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800424a:	183b      	adds	r3, r7, r0
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2220      	movs	r2, #32
 8004250:	4013      	ands	r3, r2
 8004252:	d00a      	beq.n	800426a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004258:	2b00      	cmp	r3, #0
 800425a:	d100      	bne.n	800425e <HAL_UART_IRQHandler+0x62>
 800425c:	e286      	b.n	800476c <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	0010      	movs	r0, r2
 8004266:	4798      	blx	r3
      }
      return;
 8004268:	e280      	b.n	800476c <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800426a:	2398      	movs	r3, #152	@ 0x98
 800426c:	18fb      	adds	r3, r7, r3
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d100      	bne.n	8004276 <HAL_UART_IRQHandler+0x7a>
 8004274:	e114      	b.n	80044a0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004276:	239c      	movs	r3, #156	@ 0x9c
 8004278:	18fb      	adds	r3, r7, r3
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2201      	movs	r2, #1
 800427e:	4013      	ands	r3, r2
 8004280:	d106      	bne.n	8004290 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004282:	23a0      	movs	r3, #160	@ 0xa0
 8004284:	18fb      	adds	r3, r7, r3
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a83      	ldr	r2, [pc, #524]	@ (8004498 <HAL_UART_IRQHandler+0x29c>)
 800428a:	4013      	ands	r3, r2
 800428c:	d100      	bne.n	8004290 <HAL_UART_IRQHandler+0x94>
 800428e:	e107      	b.n	80044a0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004290:	23a4      	movs	r3, #164	@ 0xa4
 8004292:	18fb      	adds	r3, r7, r3
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2201      	movs	r2, #1
 8004298:	4013      	ands	r3, r2
 800429a:	d012      	beq.n	80042c2 <HAL_UART_IRQHandler+0xc6>
 800429c:	23a0      	movs	r3, #160	@ 0xa0
 800429e:	18fb      	adds	r3, r7, r3
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	2380      	movs	r3, #128	@ 0x80
 80042a4:	005b      	lsls	r3, r3, #1
 80042a6:	4013      	ands	r3, r2
 80042a8:	d00b      	beq.n	80042c2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2201      	movs	r2, #1
 80042b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2284      	movs	r2, #132	@ 0x84
 80042b6:	589b      	ldr	r3, [r3, r2]
 80042b8:	2201      	movs	r2, #1
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2184      	movs	r1, #132	@ 0x84
 80042c0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042c2:	23a4      	movs	r3, #164	@ 0xa4
 80042c4:	18fb      	adds	r3, r7, r3
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2202      	movs	r2, #2
 80042ca:	4013      	ands	r3, r2
 80042cc:	d011      	beq.n	80042f2 <HAL_UART_IRQHandler+0xf6>
 80042ce:	239c      	movs	r3, #156	@ 0x9c
 80042d0:	18fb      	adds	r3, r7, r3
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2201      	movs	r2, #1
 80042d6:	4013      	ands	r3, r2
 80042d8:	d00b      	beq.n	80042f2 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2202      	movs	r2, #2
 80042e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2284      	movs	r2, #132	@ 0x84
 80042e6:	589b      	ldr	r3, [r3, r2]
 80042e8:	2204      	movs	r2, #4
 80042ea:	431a      	orrs	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2184      	movs	r1, #132	@ 0x84
 80042f0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80042f2:	23a4      	movs	r3, #164	@ 0xa4
 80042f4:	18fb      	adds	r3, r7, r3
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2204      	movs	r2, #4
 80042fa:	4013      	ands	r3, r2
 80042fc:	d011      	beq.n	8004322 <HAL_UART_IRQHandler+0x126>
 80042fe:	239c      	movs	r3, #156	@ 0x9c
 8004300:	18fb      	adds	r3, r7, r3
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2201      	movs	r2, #1
 8004306:	4013      	ands	r3, r2
 8004308:	d00b      	beq.n	8004322 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2204      	movs	r2, #4
 8004310:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2284      	movs	r2, #132	@ 0x84
 8004316:	589b      	ldr	r3, [r3, r2]
 8004318:	2202      	movs	r2, #2
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2184      	movs	r1, #132	@ 0x84
 8004320:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004322:	23a4      	movs	r3, #164	@ 0xa4
 8004324:	18fb      	adds	r3, r7, r3
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2208      	movs	r2, #8
 800432a:	4013      	ands	r3, r2
 800432c:	d017      	beq.n	800435e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800432e:	23a0      	movs	r3, #160	@ 0xa0
 8004330:	18fb      	adds	r3, r7, r3
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2220      	movs	r2, #32
 8004336:	4013      	ands	r3, r2
 8004338:	d105      	bne.n	8004346 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800433a:	239c      	movs	r3, #156	@ 0x9c
 800433c:	18fb      	adds	r3, r7, r3
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2201      	movs	r2, #1
 8004342:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004344:	d00b      	beq.n	800435e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2208      	movs	r2, #8
 800434c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2284      	movs	r2, #132	@ 0x84
 8004352:	589b      	ldr	r3, [r3, r2]
 8004354:	2208      	movs	r2, #8
 8004356:	431a      	orrs	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2184      	movs	r1, #132	@ 0x84
 800435c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800435e:	23a4      	movs	r3, #164	@ 0xa4
 8004360:	18fb      	adds	r3, r7, r3
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	2380      	movs	r3, #128	@ 0x80
 8004366:	011b      	lsls	r3, r3, #4
 8004368:	4013      	ands	r3, r2
 800436a:	d013      	beq.n	8004394 <HAL_UART_IRQHandler+0x198>
 800436c:	23a0      	movs	r3, #160	@ 0xa0
 800436e:	18fb      	adds	r3, r7, r3
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	2380      	movs	r3, #128	@ 0x80
 8004374:	04db      	lsls	r3, r3, #19
 8004376:	4013      	ands	r3, r2
 8004378:	d00c      	beq.n	8004394 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2280      	movs	r2, #128	@ 0x80
 8004380:	0112      	lsls	r2, r2, #4
 8004382:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2284      	movs	r2, #132	@ 0x84
 8004388:	589b      	ldr	r3, [r3, r2]
 800438a:	2220      	movs	r2, #32
 800438c:	431a      	orrs	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2184      	movs	r1, #132	@ 0x84
 8004392:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2284      	movs	r2, #132	@ 0x84
 8004398:	589b      	ldr	r3, [r3, r2]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d100      	bne.n	80043a0 <HAL_UART_IRQHandler+0x1a4>
 800439e:	e1e7      	b.n	8004770 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80043a0:	23a4      	movs	r3, #164	@ 0xa4
 80043a2:	18fb      	adds	r3, r7, r3
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2220      	movs	r2, #32
 80043a8:	4013      	ands	r3, r2
 80043aa:	d00e      	beq.n	80043ca <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80043ac:	23a0      	movs	r3, #160	@ 0xa0
 80043ae:	18fb      	adds	r3, r7, r3
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2220      	movs	r2, #32
 80043b4:	4013      	ands	r3, r2
 80043b6:	d008      	beq.n	80043ca <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d004      	beq.n	80043ca <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	0010      	movs	r0, r2
 80043c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2284      	movs	r2, #132	@ 0x84
 80043ce:	589b      	ldr	r3, [r3, r2]
 80043d0:	2194      	movs	r1, #148	@ 0x94
 80043d2:	187a      	adds	r2, r7, r1
 80043d4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	2240      	movs	r2, #64	@ 0x40
 80043de:	4013      	ands	r3, r2
 80043e0:	2b40      	cmp	r3, #64	@ 0x40
 80043e2:	d004      	beq.n	80043ee <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80043e4:	187b      	adds	r3, r7, r1
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2228      	movs	r2, #40	@ 0x28
 80043ea:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80043ec:	d047      	beq.n	800447e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	0018      	movs	r0, r3
 80043f2:	f000 fdbf 	bl	8004f74 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	2240      	movs	r2, #64	@ 0x40
 80043fe:	4013      	ands	r3, r2
 8004400:	2b40      	cmp	r3, #64	@ 0x40
 8004402:	d137      	bne.n	8004474 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004404:	f3ef 8310 	mrs	r3, PRIMASK
 8004408:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800440a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800440c:	2090      	movs	r0, #144	@ 0x90
 800440e:	183a      	adds	r2, r7, r0
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	2301      	movs	r3, #1
 8004414:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004416:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004418:	f383 8810 	msr	PRIMASK, r3
}
 800441c:	46c0      	nop			@ (mov r8, r8)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2140      	movs	r1, #64	@ 0x40
 800442a:	438a      	bics	r2, r1
 800442c:	609a      	str	r2, [r3, #8]
 800442e:	183b      	adds	r3, r7, r0
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004434:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004436:	f383 8810 	msr	PRIMASK, r3
}
 800443a:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004440:	2b00      	cmp	r3, #0
 8004442:	d012      	beq.n	800446a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004448:	4a14      	ldr	r2, [pc, #80]	@ (800449c <HAL_UART_IRQHandler+0x2a0>)
 800444a:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004450:	0018      	movs	r0, r3
 8004452:	f7fe f855 	bl	8002500 <HAL_DMA_Abort_IT>
 8004456:	1e03      	subs	r3, r0, #0
 8004458:	d01a      	beq.n	8004490 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800445e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004464:	0018      	movs	r0, r3
 8004466:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004468:	e012      	b.n	8004490 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	0018      	movs	r0, r3
 800446e:	f000 f99d 	bl	80047ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004472:	e00d      	b.n	8004490 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	0018      	movs	r0, r3
 8004478:	f000 f998 	bl	80047ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800447c:	e008      	b.n	8004490 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	0018      	movs	r0, r3
 8004482:	f000 f993 	bl	80047ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2284      	movs	r2, #132	@ 0x84
 800448a:	2100      	movs	r1, #0
 800448c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800448e:	e16f      	b.n	8004770 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004490:	46c0      	nop			@ (mov r8, r8)
    return;
 8004492:	e16d      	b.n	8004770 <HAL_UART_IRQHandler+0x574>
 8004494:	0000080f 	.word	0x0000080f
 8004498:	04000120 	.word	0x04000120
 800449c:	0800522f 	.word	0x0800522f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d000      	beq.n	80044aa <HAL_UART_IRQHandler+0x2ae>
 80044a8:	e139      	b.n	800471e <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80044aa:	23a4      	movs	r3, #164	@ 0xa4
 80044ac:	18fb      	adds	r3, r7, r3
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2210      	movs	r2, #16
 80044b2:	4013      	ands	r3, r2
 80044b4:	d100      	bne.n	80044b8 <HAL_UART_IRQHandler+0x2bc>
 80044b6:	e132      	b.n	800471e <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80044b8:	23a0      	movs	r3, #160	@ 0xa0
 80044ba:	18fb      	adds	r3, r7, r3
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2210      	movs	r2, #16
 80044c0:	4013      	ands	r3, r2
 80044c2:	d100      	bne.n	80044c6 <HAL_UART_IRQHandler+0x2ca>
 80044c4:	e12b      	b.n	800471e <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2210      	movs	r2, #16
 80044cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	2240      	movs	r2, #64	@ 0x40
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b40      	cmp	r3, #64	@ 0x40
 80044da:	d000      	beq.n	80044de <HAL_UART_IRQHandler+0x2e2>
 80044dc:	e09f      	b.n	800461e <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	217e      	movs	r1, #126	@ 0x7e
 80044e8:	187b      	adds	r3, r7, r1
 80044ea:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80044ec:	187b      	adds	r3, r7, r1
 80044ee:	881b      	ldrh	r3, [r3, #0]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d100      	bne.n	80044f6 <HAL_UART_IRQHandler+0x2fa>
 80044f4:	e13e      	b.n	8004774 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2258      	movs	r2, #88	@ 0x58
 80044fa:	5a9b      	ldrh	r3, [r3, r2]
 80044fc:	187a      	adds	r2, r7, r1
 80044fe:	8812      	ldrh	r2, [r2, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	d300      	bcc.n	8004506 <HAL_UART_IRQHandler+0x30a>
 8004504:	e136      	b.n	8004774 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	187a      	adds	r2, r7, r1
 800450a:	215a      	movs	r1, #90	@ 0x5a
 800450c:	8812      	ldrh	r2, [r2, #0]
 800450e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	2b20      	cmp	r3, #32
 8004518:	d06f      	beq.n	80045fa <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800451a:	f3ef 8310 	mrs	r3, PRIMASK
 800451e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004522:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004524:	2301      	movs	r3, #1
 8004526:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800452a:	f383 8810 	msr	PRIMASK, r3
}
 800452e:	46c0      	nop			@ (mov r8, r8)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4992      	ldr	r1, [pc, #584]	@ (8004784 <HAL_UART_IRQHandler+0x588>)
 800453c:	400a      	ands	r2, r1
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004542:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004546:	f383 8810 	msr	PRIMASK, r3
}
 800454a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800454c:	f3ef 8310 	mrs	r3, PRIMASK
 8004550:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004554:	677b      	str	r3, [r7, #116]	@ 0x74
 8004556:	2301      	movs	r3, #1
 8004558:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800455a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800455c:	f383 8810 	msr	PRIMASK, r3
}
 8004560:	46c0      	nop			@ (mov r8, r8)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689a      	ldr	r2, [r3, #8]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2101      	movs	r1, #1
 800456e:	438a      	bics	r2, r1
 8004570:	609a      	str	r2, [r3, #8]
 8004572:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004574:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004576:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004578:	f383 8810 	msr	PRIMASK, r3
}
 800457c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800457e:	f3ef 8310 	mrs	r3, PRIMASK
 8004582:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004584:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004586:	673b      	str	r3, [r7, #112]	@ 0x70
 8004588:	2301      	movs	r3, #1
 800458a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800458c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800458e:	f383 8810 	msr	PRIMASK, r3
}
 8004592:	46c0      	nop			@ (mov r8, r8)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689a      	ldr	r2, [r3, #8]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2140      	movs	r1, #64	@ 0x40
 80045a0:	438a      	bics	r2, r1
 80045a2:	609a      	str	r2, [r3, #8]
 80045a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045a6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045aa:	f383 8810 	msr	PRIMASK, r3
}
 80045ae:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2280      	movs	r2, #128	@ 0x80
 80045b4:	2120      	movs	r1, #32
 80045b6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045be:	f3ef 8310 	mrs	r3, PRIMASK
 80045c2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80045c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045c8:	2301      	movs	r3, #1
 80045ca:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80045ce:	f383 8810 	msr	PRIMASK, r3
}
 80045d2:	46c0      	nop			@ (mov r8, r8)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2110      	movs	r1, #16
 80045e0:	438a      	bics	r2, r1
 80045e2:	601a      	str	r2, [r3, #0]
 80045e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80045e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045ea:	f383 8810 	msr	PRIMASK, r3
}
 80045ee:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045f4:	0018      	movs	r0, r3
 80045f6:	f7fd ff4b 	bl	8002490 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2202      	movs	r2, #2
 80045fe:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2258      	movs	r2, #88	@ 0x58
 8004604:	5a9a      	ldrh	r2, [r3, r2]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	215a      	movs	r1, #90	@ 0x5a
 800460a:	5a5b      	ldrh	r3, [r3, r1]
 800460c:	b29b      	uxth	r3, r3
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	b29a      	uxth	r2, r3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	0011      	movs	r1, r2
 8004616:	0018      	movs	r0, r3
 8004618:	f000 f8d0 	bl	80047bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800461c:	e0aa      	b.n	8004774 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2258      	movs	r2, #88	@ 0x58
 8004622:	5a99      	ldrh	r1, [r3, r2]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	225a      	movs	r2, #90	@ 0x5a
 8004628:	5a9b      	ldrh	r3, [r3, r2]
 800462a:	b29a      	uxth	r2, r3
 800462c:	208e      	movs	r0, #142	@ 0x8e
 800462e:	183b      	adds	r3, r7, r0
 8004630:	1a8a      	subs	r2, r1, r2
 8004632:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	225a      	movs	r2, #90	@ 0x5a
 8004638:	5a9b      	ldrh	r3, [r3, r2]
 800463a:	b29b      	uxth	r3, r3
 800463c:	2b00      	cmp	r3, #0
 800463e:	d100      	bne.n	8004642 <HAL_UART_IRQHandler+0x446>
 8004640:	e09a      	b.n	8004778 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8004642:	183b      	adds	r3, r7, r0
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d100      	bne.n	800464c <HAL_UART_IRQHandler+0x450>
 800464a:	e095      	b.n	8004778 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800464c:	f3ef 8310 	mrs	r3, PRIMASK
 8004650:	60fb      	str	r3, [r7, #12]
  return(result);
 8004652:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004654:	2488      	movs	r4, #136	@ 0x88
 8004656:	193a      	adds	r2, r7, r4
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	2301      	movs	r3, #1
 800465c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	f383 8810 	msr	PRIMASK, r3
}
 8004664:	46c0      	nop			@ (mov r8, r8)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4945      	ldr	r1, [pc, #276]	@ (8004788 <HAL_UART_IRQHandler+0x58c>)
 8004672:	400a      	ands	r2, r1
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	193b      	adds	r3, r7, r4
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	f383 8810 	msr	PRIMASK, r3
}
 8004682:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004684:	f3ef 8310 	mrs	r3, PRIMASK
 8004688:	61bb      	str	r3, [r7, #24]
  return(result);
 800468a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800468c:	2484      	movs	r4, #132	@ 0x84
 800468e:	193a      	adds	r2, r7, r4
 8004690:	6013      	str	r3, [r2, #0]
 8004692:	2301      	movs	r3, #1
 8004694:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	f383 8810 	msr	PRIMASK, r3
}
 800469c:	46c0      	nop			@ (mov r8, r8)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2101      	movs	r1, #1
 80046aa:	438a      	bics	r2, r1
 80046ac:	609a      	str	r2, [r3, #8]
 80046ae:	193b      	adds	r3, r7, r4
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b4:	6a3b      	ldr	r3, [r7, #32]
 80046b6:	f383 8810 	msr	PRIMASK, r3
}
 80046ba:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2280      	movs	r2, #128	@ 0x80
 80046c0:	2120      	movs	r1, #32
 80046c2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046d0:	f3ef 8310 	mrs	r3, PRIMASK
 80046d4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80046d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d8:	2480      	movs	r4, #128	@ 0x80
 80046da:	193a      	adds	r2, r7, r4
 80046dc:	6013      	str	r3, [r2, #0]
 80046de:	2301      	movs	r3, #1
 80046e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e4:	f383 8810 	msr	PRIMASK, r3
}
 80046e8:	46c0      	nop			@ (mov r8, r8)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2110      	movs	r1, #16
 80046f6:	438a      	bics	r2, r1
 80046f8:	601a      	str	r2, [r3, #0]
 80046fa:	193b      	adds	r3, r7, r4
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004702:	f383 8810 	msr	PRIMASK, r3
}
 8004706:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800470e:	183b      	adds	r3, r7, r0
 8004710:	881a      	ldrh	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	0011      	movs	r1, r2
 8004716:	0018      	movs	r0, r3
 8004718:	f000 f850 	bl	80047bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800471c:	e02c      	b.n	8004778 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800471e:	23a4      	movs	r3, #164	@ 0xa4
 8004720:	18fb      	adds	r3, r7, r3
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2280      	movs	r2, #128	@ 0x80
 8004726:	4013      	ands	r3, r2
 8004728:	d00f      	beq.n	800474a <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800472a:	23a0      	movs	r3, #160	@ 0xa0
 800472c:	18fb      	adds	r3, r7, r3
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2280      	movs	r2, #128	@ 0x80
 8004732:	4013      	ands	r3, r2
 8004734:	d009      	beq.n	800474a <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800473a:	2b00      	cmp	r3, #0
 800473c:	d01e      	beq.n	800477c <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	0010      	movs	r0, r2
 8004746:	4798      	blx	r3
    }
    return;
 8004748:	e018      	b.n	800477c <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800474a:	23a4      	movs	r3, #164	@ 0xa4
 800474c:	18fb      	adds	r3, r7, r3
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2240      	movs	r2, #64	@ 0x40
 8004752:	4013      	ands	r3, r2
 8004754:	d013      	beq.n	800477e <HAL_UART_IRQHandler+0x582>
 8004756:	23a0      	movs	r3, #160	@ 0xa0
 8004758:	18fb      	adds	r3, r7, r3
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2240      	movs	r2, #64	@ 0x40
 800475e:	4013      	ands	r3, r2
 8004760:	d00d      	beq.n	800477e <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	0018      	movs	r0, r3
 8004766:	f000 fd79 	bl	800525c <UART_EndTransmit_IT>
    return;
 800476a:	e008      	b.n	800477e <HAL_UART_IRQHandler+0x582>
      return;
 800476c:	46c0      	nop			@ (mov r8, r8)
 800476e:	e006      	b.n	800477e <HAL_UART_IRQHandler+0x582>
    return;
 8004770:	46c0      	nop			@ (mov r8, r8)
 8004772:	e004      	b.n	800477e <HAL_UART_IRQHandler+0x582>
      return;
 8004774:	46c0      	nop			@ (mov r8, r8)
 8004776:	e002      	b.n	800477e <HAL_UART_IRQHandler+0x582>
      return;
 8004778:	46c0      	nop			@ (mov r8, r8)
 800477a:	e000      	b.n	800477e <HAL_UART_IRQHandler+0x582>
    return;
 800477c:	46c0      	nop			@ (mov r8, r8)
  }

}
 800477e:	46bd      	mov	sp, r7
 8004780:	b02b      	add	sp, #172	@ 0xac
 8004782:	bd90      	pop	{r4, r7, pc}
 8004784:	fffffeff 	.word	0xfffffeff
 8004788:	fffffedf 	.word	0xfffffedf

0800478c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004794:	46c0      	nop			@ (mov r8, r8)
 8004796:	46bd      	mov	sp, r7
 8004798:	b002      	add	sp, #8
 800479a:	bd80      	pop	{r7, pc}

0800479c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80047a4:	46c0      	nop			@ (mov r8, r8)
 80047a6:	46bd      	mov	sp, r7
 80047a8:	b002      	add	sp, #8
 80047aa:	bd80      	pop	{r7, pc}

080047ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b082      	sub	sp, #8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80047b4:	46c0      	nop			@ (mov r8, r8)
 80047b6:	46bd      	mov	sp, r7
 80047b8:	b002      	add	sp, #8
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	000a      	movs	r2, r1
 80047c6:	1cbb      	adds	r3, r7, #2
 80047c8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047ca:	46c0      	nop			@ (mov r8, r8)
 80047cc:	46bd      	mov	sp, r7
 80047ce:	b002      	add	sp, #8
 80047d0:	bd80      	pop	{r7, pc}
	...

080047d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b088      	sub	sp, #32
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047dc:	231e      	movs	r3, #30
 80047de:	18fb      	adds	r3, r7, r3
 80047e0:	2200      	movs	r2, #0
 80047e2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	431a      	orrs	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	69db      	ldr	r3, [r3, #28]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a8d      	ldr	r2, [pc, #564]	@ (8004a38 <UART_SetConfig+0x264>)
 8004804:	4013      	ands	r3, r2
 8004806:	0019      	movs	r1, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	430a      	orrs	r2, r1
 8004810:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	4a88      	ldr	r2, [pc, #544]	@ (8004a3c <UART_SetConfig+0x268>)
 800481a:	4013      	ands	r3, r2
 800481c:	0019      	movs	r1, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	4313      	orrs	r3, r2
 8004838:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	4a7f      	ldr	r2, [pc, #508]	@ (8004a40 <UART_SetConfig+0x26c>)
 8004842:	4013      	ands	r3, r2
 8004844:	0019      	movs	r1, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	430a      	orrs	r2, r1
 800484e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a7b      	ldr	r2, [pc, #492]	@ (8004a44 <UART_SetConfig+0x270>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d127      	bne.n	80048aa <UART_SetConfig+0xd6>
 800485a:	4b7b      	ldr	r3, [pc, #492]	@ (8004a48 <UART_SetConfig+0x274>)
 800485c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800485e:	2203      	movs	r2, #3
 8004860:	4013      	ands	r3, r2
 8004862:	2b03      	cmp	r3, #3
 8004864:	d00d      	beq.n	8004882 <UART_SetConfig+0xae>
 8004866:	d81b      	bhi.n	80048a0 <UART_SetConfig+0xcc>
 8004868:	2b02      	cmp	r3, #2
 800486a:	d014      	beq.n	8004896 <UART_SetConfig+0xc2>
 800486c:	d818      	bhi.n	80048a0 <UART_SetConfig+0xcc>
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <UART_SetConfig+0xa4>
 8004872:	2b01      	cmp	r3, #1
 8004874:	d00a      	beq.n	800488c <UART_SetConfig+0xb8>
 8004876:	e013      	b.n	80048a0 <UART_SetConfig+0xcc>
 8004878:	231f      	movs	r3, #31
 800487a:	18fb      	adds	r3, r7, r3
 800487c:	2200      	movs	r2, #0
 800487e:	701a      	strb	r2, [r3, #0]
 8004880:	e021      	b.n	80048c6 <UART_SetConfig+0xf2>
 8004882:	231f      	movs	r3, #31
 8004884:	18fb      	adds	r3, r7, r3
 8004886:	2202      	movs	r2, #2
 8004888:	701a      	strb	r2, [r3, #0]
 800488a:	e01c      	b.n	80048c6 <UART_SetConfig+0xf2>
 800488c:	231f      	movs	r3, #31
 800488e:	18fb      	adds	r3, r7, r3
 8004890:	2204      	movs	r2, #4
 8004892:	701a      	strb	r2, [r3, #0]
 8004894:	e017      	b.n	80048c6 <UART_SetConfig+0xf2>
 8004896:	231f      	movs	r3, #31
 8004898:	18fb      	adds	r3, r7, r3
 800489a:	2208      	movs	r2, #8
 800489c:	701a      	strb	r2, [r3, #0]
 800489e:	e012      	b.n	80048c6 <UART_SetConfig+0xf2>
 80048a0:	231f      	movs	r3, #31
 80048a2:	18fb      	adds	r3, r7, r3
 80048a4:	2210      	movs	r2, #16
 80048a6:	701a      	strb	r2, [r3, #0]
 80048a8:	e00d      	b.n	80048c6 <UART_SetConfig+0xf2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a67      	ldr	r2, [pc, #412]	@ (8004a4c <UART_SetConfig+0x278>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d104      	bne.n	80048be <UART_SetConfig+0xea>
 80048b4:	231f      	movs	r3, #31
 80048b6:	18fb      	adds	r3, r7, r3
 80048b8:	2200      	movs	r2, #0
 80048ba:	701a      	strb	r2, [r3, #0]
 80048bc:	e003      	b.n	80048c6 <UART_SetConfig+0xf2>
 80048be:	231f      	movs	r3, #31
 80048c0:	18fb      	adds	r3, r7, r3
 80048c2:	2210      	movs	r2, #16
 80048c4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	69da      	ldr	r2, [r3, #28]
 80048ca:	2380      	movs	r3, #128	@ 0x80
 80048cc:	021b      	lsls	r3, r3, #8
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d15c      	bne.n	800498c <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 80048d2:	231f      	movs	r3, #31
 80048d4:	18fb      	adds	r3, r7, r3
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d015      	beq.n	8004908 <UART_SetConfig+0x134>
 80048dc:	dc18      	bgt.n	8004910 <UART_SetConfig+0x13c>
 80048de:	2b04      	cmp	r3, #4
 80048e0:	d00d      	beq.n	80048fe <UART_SetConfig+0x12a>
 80048e2:	dc15      	bgt.n	8004910 <UART_SetConfig+0x13c>
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <UART_SetConfig+0x11a>
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d005      	beq.n	80048f8 <UART_SetConfig+0x124>
 80048ec:	e010      	b.n	8004910 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048ee:	f7fe fd13 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 80048f2:	0003      	movs	r3, r0
 80048f4:	61bb      	str	r3, [r7, #24]
        break;
 80048f6:	e012      	b.n	800491e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048f8:	4b55      	ldr	r3, [pc, #340]	@ (8004a50 <UART_SetConfig+0x27c>)
 80048fa:	61bb      	str	r3, [r7, #24]
        break;
 80048fc:	e00f      	b.n	800491e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048fe:	f7fe fca9 	bl	8003254 <HAL_RCC_GetSysClockFreq>
 8004902:	0003      	movs	r3, r0
 8004904:	61bb      	str	r3, [r7, #24]
        break;
 8004906:	e00a      	b.n	800491e <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004908:	2380      	movs	r3, #128	@ 0x80
 800490a:	021b      	lsls	r3, r3, #8
 800490c:	61bb      	str	r3, [r7, #24]
        break;
 800490e:	e006      	b.n	800491e <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004914:	231e      	movs	r3, #30
 8004916:	18fb      	adds	r3, r7, r3
 8004918:	2201      	movs	r2, #1
 800491a:	701a      	strb	r2, [r3, #0]
        break;
 800491c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d100      	bne.n	8004926 <UART_SetConfig+0x152>
 8004924:	e07a      	b.n	8004a1c <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	005a      	lsls	r2, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	085b      	lsrs	r3, r3, #1
 8004930:	18d2      	adds	r2, r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	0019      	movs	r1, r3
 8004938:	0010      	movs	r0, r2
 800493a:	f7fb fbe5 	bl	8000108 <__udivsi3>
 800493e:	0003      	movs	r3, r0
 8004940:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	2b0f      	cmp	r3, #15
 8004946:	d91c      	bls.n	8004982 <UART_SetConfig+0x1ae>
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	2380      	movs	r3, #128	@ 0x80
 800494c:	025b      	lsls	r3, r3, #9
 800494e:	429a      	cmp	r2, r3
 8004950:	d217      	bcs.n	8004982 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	b29a      	uxth	r2, r3
 8004956:	200e      	movs	r0, #14
 8004958:	183b      	adds	r3, r7, r0
 800495a:	210f      	movs	r1, #15
 800495c:	438a      	bics	r2, r1
 800495e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	085b      	lsrs	r3, r3, #1
 8004964:	b29b      	uxth	r3, r3
 8004966:	2207      	movs	r2, #7
 8004968:	4013      	ands	r3, r2
 800496a:	b299      	uxth	r1, r3
 800496c:	183b      	adds	r3, r7, r0
 800496e:	183a      	adds	r2, r7, r0
 8004970:	8812      	ldrh	r2, [r2, #0]
 8004972:	430a      	orrs	r2, r1
 8004974:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	183a      	adds	r2, r7, r0
 800497c:	8812      	ldrh	r2, [r2, #0]
 800497e:	60da      	str	r2, [r3, #12]
 8004980:	e04c      	b.n	8004a1c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004982:	231e      	movs	r3, #30
 8004984:	18fb      	adds	r3, r7, r3
 8004986:	2201      	movs	r2, #1
 8004988:	701a      	strb	r2, [r3, #0]
 800498a:	e047      	b.n	8004a1c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 800498c:	231f      	movs	r3, #31
 800498e:	18fb      	adds	r3, r7, r3
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	2b08      	cmp	r3, #8
 8004994:	d015      	beq.n	80049c2 <UART_SetConfig+0x1ee>
 8004996:	dc18      	bgt.n	80049ca <UART_SetConfig+0x1f6>
 8004998:	2b04      	cmp	r3, #4
 800499a:	d00d      	beq.n	80049b8 <UART_SetConfig+0x1e4>
 800499c:	dc15      	bgt.n	80049ca <UART_SetConfig+0x1f6>
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d002      	beq.n	80049a8 <UART_SetConfig+0x1d4>
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d005      	beq.n	80049b2 <UART_SetConfig+0x1de>
 80049a6:	e010      	b.n	80049ca <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049a8:	f7fe fcb6 	bl	8003318 <HAL_RCC_GetPCLK1Freq>
 80049ac:	0003      	movs	r3, r0
 80049ae:	61bb      	str	r3, [r7, #24]
        break;
 80049b0:	e012      	b.n	80049d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049b2:	4b27      	ldr	r3, [pc, #156]	@ (8004a50 <UART_SetConfig+0x27c>)
 80049b4:	61bb      	str	r3, [r7, #24]
        break;
 80049b6:	e00f      	b.n	80049d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049b8:	f7fe fc4c 	bl	8003254 <HAL_RCC_GetSysClockFreq>
 80049bc:	0003      	movs	r3, r0
 80049be:	61bb      	str	r3, [r7, #24]
        break;
 80049c0:	e00a      	b.n	80049d8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049c2:	2380      	movs	r3, #128	@ 0x80
 80049c4:	021b      	lsls	r3, r3, #8
 80049c6:	61bb      	str	r3, [r7, #24]
        break;
 80049c8:	e006      	b.n	80049d8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049ce:	231e      	movs	r3, #30
 80049d0:	18fb      	adds	r3, r7, r3
 80049d2:	2201      	movs	r2, #1
 80049d4:	701a      	strb	r2, [r3, #0]
        break;
 80049d6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d01e      	beq.n	8004a1c <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	085a      	lsrs	r2, r3, #1
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	18d2      	adds	r2, r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	0019      	movs	r1, r3
 80049ee:	0010      	movs	r0, r2
 80049f0:	f7fb fb8a 	bl	8000108 <__udivsi3>
 80049f4:	0003      	movs	r3, r0
 80049f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	2b0f      	cmp	r3, #15
 80049fc:	d90a      	bls.n	8004a14 <UART_SetConfig+0x240>
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	2380      	movs	r3, #128	@ 0x80
 8004a02:	025b      	lsls	r3, r3, #9
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d205      	bcs.n	8004a14 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	60da      	str	r2, [r3, #12]
 8004a12:	e003      	b.n	8004a1c <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8004a14:	231e      	movs	r3, #30
 8004a16:	18fb      	adds	r3, r7, r3
 8004a18:	2201      	movs	r2, #1
 8004a1a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004a28:	231e      	movs	r3, #30
 8004a2a:	18fb      	adds	r3, r7, r3
 8004a2c:	781b      	ldrb	r3, [r3, #0]
}
 8004a2e:	0018      	movs	r0, r3
 8004a30:	46bd      	mov	sp, r7
 8004a32:	b008      	add	sp, #32
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	46c0      	nop			@ (mov r8, r8)
 8004a38:	efff69f3 	.word	0xefff69f3
 8004a3c:	ffffcfff 	.word	0xffffcfff
 8004a40:	fffff4ff 	.word	0xfffff4ff
 8004a44:	40013800 	.word	0x40013800
 8004a48:	40021000 	.word	0x40021000
 8004a4c:	40004400 	.word	0x40004400
 8004a50:	007a1200 	.word	0x007a1200

08004a54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a60:	2208      	movs	r2, #8
 8004a62:	4013      	ands	r3, r2
 8004a64:	d00b      	beq.n	8004a7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	4a4a      	ldr	r2, [pc, #296]	@ (8004b98 <UART_AdvFeatureConfig+0x144>)
 8004a6e:	4013      	ands	r3, r2
 8004a70:	0019      	movs	r1, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a82:	2201      	movs	r2, #1
 8004a84:	4013      	ands	r3, r2
 8004a86:	d00b      	beq.n	8004aa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	4a43      	ldr	r2, [pc, #268]	@ (8004b9c <UART_AdvFeatureConfig+0x148>)
 8004a90:	4013      	ands	r3, r2
 8004a92:	0019      	movs	r1, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	d00b      	beq.n	8004ac2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	4a3b      	ldr	r2, [pc, #236]	@ (8004ba0 <UART_AdvFeatureConfig+0x14c>)
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	0019      	movs	r1, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac6:	2204      	movs	r2, #4
 8004ac8:	4013      	ands	r3, r2
 8004aca:	d00b      	beq.n	8004ae4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	4a34      	ldr	r2, [pc, #208]	@ (8004ba4 <UART_AdvFeatureConfig+0x150>)
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	0019      	movs	r1, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae8:	2210      	movs	r2, #16
 8004aea:	4013      	ands	r3, r2
 8004aec:	d00b      	beq.n	8004b06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	4a2c      	ldr	r2, [pc, #176]	@ (8004ba8 <UART_AdvFeatureConfig+0x154>)
 8004af6:	4013      	ands	r3, r2
 8004af8:	0019      	movs	r1, r3
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	430a      	orrs	r2, r1
 8004b04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	d00b      	beq.n	8004b28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	4a25      	ldr	r2, [pc, #148]	@ (8004bac <UART_AdvFeatureConfig+0x158>)
 8004b18:	4013      	ands	r3, r2
 8004b1a:	0019      	movs	r1, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2c:	2240      	movs	r2, #64	@ 0x40
 8004b2e:	4013      	ands	r3, r2
 8004b30:	d01d      	beq.n	8004b6e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	4a1d      	ldr	r2, [pc, #116]	@ (8004bb0 <UART_AdvFeatureConfig+0x15c>)
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	0019      	movs	r1, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b4e:	2380      	movs	r3, #128	@ 0x80
 8004b50:	035b      	lsls	r3, r3, #13
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d10b      	bne.n	8004b6e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	4a15      	ldr	r2, [pc, #84]	@ (8004bb4 <UART_AdvFeatureConfig+0x160>)
 8004b5e:	4013      	ands	r3, r2
 8004b60:	0019      	movs	r1, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b72:	2280      	movs	r2, #128	@ 0x80
 8004b74:	4013      	ands	r3, r2
 8004b76:	d00b      	beq.n	8004b90 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	4a0e      	ldr	r2, [pc, #56]	@ (8004bb8 <UART_AdvFeatureConfig+0x164>)
 8004b80:	4013      	ands	r3, r2
 8004b82:	0019      	movs	r1, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	430a      	orrs	r2, r1
 8004b8e:	605a      	str	r2, [r3, #4]
  }
}
 8004b90:	46c0      	nop			@ (mov r8, r8)
 8004b92:	46bd      	mov	sp, r7
 8004b94:	b002      	add	sp, #8
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	ffff7fff 	.word	0xffff7fff
 8004b9c:	fffdffff 	.word	0xfffdffff
 8004ba0:	fffeffff 	.word	0xfffeffff
 8004ba4:	fffbffff 	.word	0xfffbffff
 8004ba8:	ffffefff 	.word	0xffffefff
 8004bac:	ffffdfff 	.word	0xffffdfff
 8004bb0:	ffefffff 	.word	0xffefffff
 8004bb4:	ff9fffff 	.word	0xff9fffff
 8004bb8:	fff7ffff 	.word	0xfff7ffff

08004bbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b092      	sub	sp, #72	@ 0x48
 8004bc0:	af02      	add	r7, sp, #8
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2284      	movs	r2, #132	@ 0x84
 8004bc8:	2100      	movs	r1, #0
 8004bca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004bcc:	f7fd faa6 	bl	800211c <HAL_GetTick>
 8004bd0:	0003      	movs	r3, r0
 8004bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2208      	movs	r2, #8
 8004bdc:	4013      	ands	r3, r2
 8004bde:	2b08      	cmp	r3, #8
 8004be0:	d12c      	bne.n	8004c3c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004be4:	2280      	movs	r2, #128	@ 0x80
 8004be6:	0391      	lsls	r1, r2, #14
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	4a46      	ldr	r2, [pc, #280]	@ (8004d04 <UART_CheckIdleState+0x148>)
 8004bec:	9200      	str	r2, [sp, #0]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f000 f88c 	bl	8004d0c <UART_WaitOnFlagUntilTimeout>
 8004bf4:	1e03      	subs	r3, r0, #0
 8004bf6:	d021      	beq.n	8004c3c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bf8:	f3ef 8310 	mrs	r3, PRIMASK
 8004bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004c00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c02:	2301      	movs	r3, #1
 8004c04:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c08:	f383 8810 	msr	PRIMASK, r3
}
 8004c0c:	46c0      	nop			@ (mov r8, r8)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2180      	movs	r1, #128	@ 0x80
 8004c1a:	438a      	bics	r2, r1
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c24:	f383 8810 	msr	PRIMASK, r3
}
 8004c28:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2278      	movs	r2, #120	@ 0x78
 8004c34:	2100      	movs	r1, #0
 8004c36:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e05f      	b.n	8004cfc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2204      	movs	r2, #4
 8004c44:	4013      	ands	r3, r2
 8004c46:	2b04      	cmp	r3, #4
 8004c48:	d146      	bne.n	8004cd8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c4c:	2280      	movs	r2, #128	@ 0x80
 8004c4e:	03d1      	lsls	r1, r2, #15
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	4a2c      	ldr	r2, [pc, #176]	@ (8004d04 <UART_CheckIdleState+0x148>)
 8004c54:	9200      	str	r2, [sp, #0]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f000 f858 	bl	8004d0c <UART_WaitOnFlagUntilTimeout>
 8004c5c:	1e03      	subs	r3, r0, #0
 8004c5e:	d03b      	beq.n	8004cd8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c60:	f3ef 8310 	mrs	r3, PRIMASK
 8004c64:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c66:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c68:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	f383 8810 	msr	PRIMASK, r3
}
 8004c74:	46c0      	nop			@ (mov r8, r8)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4921      	ldr	r1, [pc, #132]	@ (8004d08 <UART_CheckIdleState+0x14c>)
 8004c82:	400a      	ands	r2, r1
 8004c84:	601a      	str	r2, [r3, #0]
 8004c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	f383 8810 	msr	PRIMASK, r3
}
 8004c90:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c92:	f3ef 8310 	mrs	r3, PRIMASK
 8004c96:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c98:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	f383 8810 	msr	PRIMASK, r3
}
 8004ca6:	46c0      	nop			@ (mov r8, r8)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689a      	ldr	r2, [r3, #8]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	438a      	bics	r2, r1
 8004cb6:	609a      	str	r2, [r3, #8]
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	f383 8810 	msr	PRIMASK, r3
}
 8004cc2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2280      	movs	r2, #128	@ 0x80
 8004cc8:	2120      	movs	r1, #32
 8004cca:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2278      	movs	r2, #120	@ 0x78
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e011      	b.n	8004cfc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2280      	movs	r2, #128	@ 0x80
 8004ce2:	2120      	movs	r1, #32
 8004ce4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2278      	movs	r2, #120	@ 0x78
 8004cf6:	2100      	movs	r1, #0
 8004cf8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	0018      	movs	r0, r3
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	b010      	add	sp, #64	@ 0x40
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	01ffffff 	.word	0x01ffffff
 8004d08:	fffffedf 	.word	0xfffffedf

08004d0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	603b      	str	r3, [r7, #0]
 8004d18:	1dfb      	adds	r3, r7, #7
 8004d1a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d1c:	e051      	b.n	8004dc2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	3301      	adds	r3, #1
 8004d22:	d04e      	beq.n	8004dc2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d24:	f7fd f9fa 	bl	800211c <HAL_GetTick>
 8004d28:	0002      	movs	r2, r0
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	69ba      	ldr	r2, [r7, #24]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d302      	bcc.n	8004d3a <UART_WaitOnFlagUntilTimeout+0x2e>
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e051      	b.n	8004de2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2204      	movs	r2, #4
 8004d46:	4013      	ands	r3, r2
 8004d48:	d03b      	beq.n	8004dc2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	2b80      	cmp	r3, #128	@ 0x80
 8004d4e:	d038      	beq.n	8004dc2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2b40      	cmp	r3, #64	@ 0x40
 8004d54:	d035      	beq.n	8004dc2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	2208      	movs	r2, #8
 8004d5e:	4013      	ands	r3, r2
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	d111      	bne.n	8004d88 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2208      	movs	r2, #8
 8004d6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	0018      	movs	r0, r3
 8004d70:	f000 f900 	bl	8004f74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2284      	movs	r2, #132	@ 0x84
 8004d78:	2108      	movs	r1, #8
 8004d7a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2278      	movs	r2, #120	@ 0x78
 8004d80:	2100      	movs	r1, #0
 8004d82:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e02c      	b.n	8004de2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	69da      	ldr	r2, [r3, #28]
 8004d8e:	2380      	movs	r3, #128	@ 0x80
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	401a      	ands	r2, r3
 8004d94:	2380      	movs	r3, #128	@ 0x80
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d112      	bne.n	8004dc2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2280      	movs	r2, #128	@ 0x80
 8004da2:	0112      	lsls	r2, r2, #4
 8004da4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	0018      	movs	r0, r3
 8004daa:	f000 f8e3 	bl	8004f74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2284      	movs	r2, #132	@ 0x84
 8004db2:	2120      	movs	r1, #32
 8004db4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2278      	movs	r2, #120	@ 0x78
 8004dba:	2100      	movs	r1, #0
 8004dbc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e00f      	b.n	8004de2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	69db      	ldr	r3, [r3, #28]
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	68ba      	ldr	r2, [r7, #8]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	425a      	negs	r2, r3
 8004dd2:	4153      	adcs	r3, r2
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	001a      	movs	r2, r3
 8004dd8:	1dfb      	adds	r3, r7, #7
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d09e      	beq.n	8004d1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	0018      	movs	r0, r3
 8004de4:	46bd      	mov	sp, r7
 8004de6:	b004      	add	sp, #16
 8004de8:	bd80      	pop	{r7, pc}
	...

08004dec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b090      	sub	sp, #64	@ 0x40
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	1dbb      	adds	r3, r7, #6
 8004df8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	1dba      	adds	r2, r7, #6
 8004e04:	2158      	movs	r1, #88	@ 0x58
 8004e06:	8812      	ldrh	r2, [r2, #0]
 8004e08:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2284      	movs	r2, #132	@ 0x84
 8004e0e:	2100      	movs	r1, #0
 8004e10:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2280      	movs	r2, #128	@ 0x80
 8004e16:	2122      	movs	r1, #34	@ 0x22
 8004e18:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d028      	beq.n	8004e74 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e26:	4a3e      	ldr	r2, [pc, #248]	@ (8004f20 <UART_Start_Receive_DMA+0x134>)
 8004e28:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e2e:	4a3d      	ldr	r2, [pc, #244]	@ (8004f24 <UART_Start_Receive_DMA+0x138>)
 8004e30:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e36:	4a3c      	ldr	r2, [pc, #240]	@ (8004f28 <UART_Start_Receive_DMA+0x13c>)
 8004e38:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e3e:	2200      	movs	r2, #0
 8004e40:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	3324      	adds	r3, #36	@ 0x24
 8004e4c:	0019      	movs	r1, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e52:	001a      	movs	r2, r3
 8004e54:	1dbb      	adds	r3, r7, #6
 8004e56:	881b      	ldrh	r3, [r3, #0]
 8004e58:	f7fd fab4 	bl	80023c4 <HAL_DMA_Start_IT>
 8004e5c:	1e03      	subs	r3, r0, #0
 8004e5e:	d009      	beq.n	8004e74 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2284      	movs	r2, #132	@ 0x84
 8004e64:	2110      	movs	r1, #16
 8004e66:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2280      	movs	r2, #128	@ 0x80
 8004e6c:	2120      	movs	r1, #32
 8004e6e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e050      	b.n	8004f16 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d019      	beq.n	8004eb0 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e7c:	f3ef 8310 	mrs	r3, PRIMASK
 8004e80:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e86:	2301      	movs	r3, #1
 8004e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e8c:	f383 8810 	msr	PRIMASK, r3
}
 8004e90:	46c0      	nop			@ (mov r8, r8)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2180      	movs	r1, #128	@ 0x80
 8004e9e:	0049      	lsls	r1, r1, #1
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	601a      	str	r2, [r3, #0]
 8004ea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ea6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eaa:	f383 8810 	msr	PRIMASK, r3
}
 8004eae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8004eb4:	613b      	str	r3, [r7, #16]
  return(result);
 8004eb6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004eba:	2301      	movs	r3, #1
 8004ebc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f383 8810 	msr	PRIMASK, r3
}
 8004ec4:	46c0      	nop			@ (mov r8, r8)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689a      	ldr	r2, [r3, #8]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2101      	movs	r1, #1
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	609a      	str	r2, [r3, #8]
 8004ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	f383 8810 	msr	PRIMASK, r3
}
 8004ee0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ee6:	61fb      	str	r3, [r7, #28]
  return(result);
 8004ee8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eea:	637b      	str	r3, [r7, #52]	@ 0x34
 8004eec:	2301      	movs	r3, #1
 8004eee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	f383 8810 	msr	PRIMASK, r3
}
 8004ef6:	46c0      	nop			@ (mov r8, r8)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689a      	ldr	r2, [r3, #8]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2140      	movs	r1, #64	@ 0x40
 8004f04:	430a      	orrs	r2, r1
 8004f06:	609a      	str	r2, [r3, #8]
 8004f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f0a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0e:	f383 8810 	msr	PRIMASK, r3
}
 8004f12:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8004f14:	2300      	movs	r3, #0
}
 8004f16:	0018      	movs	r0, r3
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	b010      	add	sp, #64	@ 0x40
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	46c0      	nop			@ (mov r8, r8)
 8004f20:	0800503d 	.word	0x0800503d
 8004f24:	08005169 	.word	0x08005169
 8004f28:	080051ab 	.word	0x080051ab

08004f2c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f34:	f3ef 8310 	mrs	r3, PRIMASK
 8004f38:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f3a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004f3c:	617b      	str	r3, [r7, #20]
 8004f3e:	2301      	movs	r3, #1
 8004f40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f383 8810 	msr	PRIMASK, r3
}
 8004f48:	46c0      	nop			@ (mov r8, r8)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	21c0      	movs	r1, #192	@ 0xc0
 8004f56:	438a      	bics	r2, r1
 8004f58:	601a      	str	r2, [r3, #0]
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	f383 8810 	msr	PRIMASK, r3
}
 8004f64:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004f6c:	46c0      	nop			@ (mov r8, r8)
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	b006      	add	sp, #24
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b08e      	sub	sp, #56	@ 0x38
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f7c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f80:	617b      	str	r3, [r7, #20]
  return(result);
 8004f82:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f84:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f86:	2301      	movs	r3, #1
 8004f88:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	f383 8810 	msr	PRIMASK, r3
}
 8004f90:	46c0      	nop			@ (mov r8, r8)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4926      	ldr	r1, [pc, #152]	@ (8005038 <UART_EndRxTransfer+0xc4>)
 8004f9e:	400a      	ands	r2, r1
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fa4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	f383 8810 	msr	PRIMASK, r3
}
 8004fac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fae:	f3ef 8310 	mrs	r3, PRIMASK
 8004fb2:	623b      	str	r3, [r7, #32]
  return(result);
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb6:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fb8:	2301      	movs	r3, #1
 8004fba:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbe:	f383 8810 	msr	PRIMASK, r3
}
 8004fc2:	46c0      	nop			@ (mov r8, r8)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689a      	ldr	r2, [r3, #8]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2101      	movs	r1, #1
 8004fd0:	438a      	bics	r2, r1
 8004fd2:	609a      	str	r2, [r3, #8]
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fda:	f383 8810 	msr	PRIMASK, r3
}
 8004fde:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d118      	bne.n	800501a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fe8:	f3ef 8310 	mrs	r3, PRIMASK
 8004fec:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fee:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f383 8810 	msr	PRIMASK, r3
}
 8004ffc:	46c0      	nop			@ (mov r8, r8)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2110      	movs	r1, #16
 800500a:	438a      	bics	r2, r1
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005010:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	f383 8810 	msr	PRIMASK, r3
}
 8005018:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2280      	movs	r2, #128	@ 0x80
 800501e:	2120      	movs	r1, #32
 8005020:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2200      	movs	r2, #0
 8005026:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800502e:	46c0      	nop			@ (mov r8, r8)
 8005030:	46bd      	mov	sp, r7
 8005032:	b00e      	add	sp, #56	@ 0x38
 8005034:	bd80      	pop	{r7, pc}
 8005036:	46c0      	nop			@ (mov r8, r8)
 8005038:	fffffedf 	.word	0xfffffedf

0800503c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b094      	sub	sp, #80	@ 0x50
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005048:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	2b20      	cmp	r3, #32
 8005050:	d06f      	beq.n	8005132 <UART_DMAReceiveCplt+0xf6>
  {
    huart->RxXferCount = 0U;
 8005052:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005054:	225a      	movs	r2, #90	@ 0x5a
 8005056:	2100      	movs	r1, #0
 8005058:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800505a:	f3ef 8310 	mrs	r3, PRIMASK
 800505e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005060:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005062:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005064:	2301      	movs	r3, #1
 8005066:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	f383 8810 	msr	PRIMASK, r3
}
 800506e:	46c0      	nop			@ (mov r8, r8)
 8005070:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	493a      	ldr	r1, [pc, #232]	@ (8005164 <UART_DMAReceiveCplt+0x128>)
 800507c:	400a      	ands	r2, r1
 800507e:	601a      	str	r2, [r3, #0]
 8005080:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005082:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005084:	6a3b      	ldr	r3, [r7, #32]
 8005086:	f383 8810 	msr	PRIMASK, r3
}
 800508a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800508c:	f3ef 8310 	mrs	r3, PRIMASK
 8005090:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005094:	647b      	str	r3, [r7, #68]	@ 0x44
 8005096:	2301      	movs	r3, #1
 8005098:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800509a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800509c:	f383 8810 	msr	PRIMASK, r3
}
 80050a0:	46c0      	nop			@ (mov r8, r8)
 80050a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689a      	ldr	r2, [r3, #8]
 80050a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2101      	movs	r1, #1
 80050ae:	438a      	bics	r2, r1
 80050b0:	609a      	str	r2, [r3, #8]
 80050b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050b8:	f383 8810 	msr	PRIMASK, r3
}
 80050bc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050be:	f3ef 8310 	mrs	r3, PRIMASK
 80050c2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80050c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80050c8:	2301      	movs	r3, #1
 80050ca:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050ce:	f383 8810 	msr	PRIMASK, r3
}
 80050d2:	46c0      	nop			@ (mov r8, r8)
 80050d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689a      	ldr	r2, [r3, #8]
 80050da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2140      	movs	r1, #64	@ 0x40
 80050e0:	438a      	bics	r2, r1
 80050e2:	609a      	str	r2, [r3, #8]
 80050e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ea:	f383 8810 	msr	PRIMASK, r3
}
 80050ee:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80050f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050f2:	2280      	movs	r2, #128	@ 0x80
 80050f4:	2120      	movs	r1, #32
 80050f6:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d118      	bne.n	8005132 <UART_DMAReceiveCplt+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005100:	f3ef 8310 	mrs	r3, PRIMASK
 8005104:	60fb      	str	r3, [r7, #12]
  return(result);
 8005106:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005108:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800510a:	2301      	movs	r3, #1
 800510c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f383 8810 	msr	PRIMASK, r3
}
 8005114:	46c0      	nop			@ (mov r8, r8)
 8005116:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2110      	movs	r1, #16
 8005122:	438a      	bics	r2, r1
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005128:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f383 8810 	msr	PRIMASK, r3
}
 8005130:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005132:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005134:	2200      	movs	r2, #0
 8005136:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005138:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800513a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800513c:	2b01      	cmp	r3, #1
 800513e:	d108      	bne.n	8005152 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005140:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005142:	2258      	movs	r2, #88	@ 0x58
 8005144:	5a9a      	ldrh	r2, [r3, r2]
 8005146:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005148:	0011      	movs	r1, r2
 800514a:	0018      	movs	r0, r3
 800514c:	f7ff fb36 	bl	80047bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005150:	e003      	b.n	800515a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005152:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005154:	0018      	movs	r0, r3
 8005156:	f7fc fd0b 	bl	8001b70 <HAL_UART_RxCpltCallback>
}
 800515a:	46c0      	nop			@ (mov r8, r8)
 800515c:	46bd      	mov	sp, r7
 800515e:	b014      	add	sp, #80	@ 0x50
 8005160:	bd80      	pop	{r7, pc}
 8005162:	46c0      	nop			@ (mov r8, r8)
 8005164:	fffffeff 	.word	0xfffffeff

08005168 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005174:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2201      	movs	r2, #1
 800517a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005180:	2b01      	cmp	r3, #1
 8005182:	d10a      	bne.n	800519a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2258      	movs	r2, #88	@ 0x58
 8005188:	5a9b      	ldrh	r3, [r3, r2]
 800518a:	085b      	lsrs	r3, r3, #1
 800518c:	b29a      	uxth	r2, r3
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	0011      	movs	r1, r2
 8005192:	0018      	movs	r0, r3
 8005194:	f7ff fb12 	bl	80047bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005198:	e003      	b.n	80051a2 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	0018      	movs	r0, r3
 800519e:	f7ff fafd 	bl	800479c <HAL_UART_RxHalfCpltCallback>
}
 80051a2:	46c0      	nop			@ (mov r8, r8)
 80051a4:	46bd      	mov	sp, r7
 80051a6:	b004      	add	sp, #16
 80051a8:	bd80      	pop	{r7, pc}

080051aa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b086      	sub	sp, #24
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80051bc:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2280      	movs	r2, #128	@ 0x80
 80051c2:	589b      	ldr	r3, [r3, r2]
 80051c4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	2280      	movs	r2, #128	@ 0x80
 80051ce:	4013      	ands	r3, r2
 80051d0:	2b80      	cmp	r3, #128	@ 0x80
 80051d2:	d10a      	bne.n	80051ea <UART_DMAError+0x40>
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	2b21      	cmp	r3, #33	@ 0x21
 80051d8:	d107      	bne.n	80051ea <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2252      	movs	r2, #82	@ 0x52
 80051de:	2100      	movs	r1, #0
 80051e0:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	0018      	movs	r0, r3
 80051e6:	f7ff fea1 	bl	8004f2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	2240      	movs	r2, #64	@ 0x40
 80051f2:	4013      	ands	r3, r2
 80051f4:	2b40      	cmp	r3, #64	@ 0x40
 80051f6:	d10a      	bne.n	800520e <UART_DMAError+0x64>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2b22      	cmp	r3, #34	@ 0x22
 80051fc:	d107      	bne.n	800520e <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	225a      	movs	r2, #90	@ 0x5a
 8005202:	2100      	movs	r1, #0
 8005204:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	0018      	movs	r0, r3
 800520a:	f7ff feb3 	bl	8004f74 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2284      	movs	r2, #132	@ 0x84
 8005212:	589b      	ldr	r3, [r3, r2]
 8005214:	2210      	movs	r2, #16
 8005216:	431a      	orrs	r2, r3
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	2184      	movs	r1, #132	@ 0x84
 800521c:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	0018      	movs	r0, r3
 8005222:	f7ff fac3 	bl	80047ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005226:	46c0      	nop			@ (mov r8, r8)
 8005228:	46bd      	mov	sp, r7
 800522a:	b006      	add	sp, #24
 800522c:	bd80      	pop	{r7, pc}

0800522e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b084      	sub	sp, #16
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	225a      	movs	r2, #90	@ 0x5a
 8005240:	2100      	movs	r1, #0
 8005242:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2252      	movs	r2, #82	@ 0x52
 8005248:	2100      	movs	r1, #0
 800524a:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	0018      	movs	r0, r3
 8005250:	f7ff faac 	bl	80047ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005254:	46c0      	nop			@ (mov r8, r8)
 8005256:	46bd      	mov	sp, r7
 8005258:	b004      	add	sp, #16
 800525a:	bd80      	pop	{r7, pc}

0800525c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005264:	f3ef 8310 	mrs	r3, PRIMASK
 8005268:	60bb      	str	r3, [r7, #8]
  return(result);
 800526a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800526c:	617b      	str	r3, [r7, #20]
 800526e:	2301      	movs	r3, #1
 8005270:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f383 8810 	msr	PRIMASK, r3
}
 8005278:	46c0      	nop			@ (mov r8, r8)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2140      	movs	r1, #64	@ 0x40
 8005286:	438a      	bics	r2, r1
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f383 8810 	msr	PRIMASK, r3
}
 8005294:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2220      	movs	r2, #32
 800529a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	0018      	movs	r0, r3
 80052a6:	f7ff fa71 	bl	800478c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052aa:	46c0      	nop			@ (mov r8, r8)
 80052ac:	46bd      	mov	sp, r7
 80052ae:	b006      	add	sp, #24
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <memset>:
 80052b2:	0003      	movs	r3, r0
 80052b4:	1882      	adds	r2, r0, r2
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d100      	bne.n	80052bc <memset+0xa>
 80052ba:	4770      	bx	lr
 80052bc:	7019      	strb	r1, [r3, #0]
 80052be:	3301      	adds	r3, #1
 80052c0:	e7f9      	b.n	80052b6 <memset+0x4>
	...

080052c4 <__libc_init_array>:
 80052c4:	b570      	push	{r4, r5, r6, lr}
 80052c6:	2600      	movs	r6, #0
 80052c8:	4c0c      	ldr	r4, [pc, #48]	@ (80052fc <__libc_init_array+0x38>)
 80052ca:	4d0d      	ldr	r5, [pc, #52]	@ (8005300 <__libc_init_array+0x3c>)
 80052cc:	1b64      	subs	r4, r4, r5
 80052ce:	10a4      	asrs	r4, r4, #2
 80052d0:	42a6      	cmp	r6, r4
 80052d2:	d109      	bne.n	80052e8 <__libc_init_array+0x24>
 80052d4:	2600      	movs	r6, #0
 80052d6:	f000 f819 	bl	800530c <_init>
 80052da:	4c0a      	ldr	r4, [pc, #40]	@ (8005304 <__libc_init_array+0x40>)
 80052dc:	4d0a      	ldr	r5, [pc, #40]	@ (8005308 <__libc_init_array+0x44>)
 80052de:	1b64      	subs	r4, r4, r5
 80052e0:	10a4      	asrs	r4, r4, #2
 80052e2:	42a6      	cmp	r6, r4
 80052e4:	d105      	bne.n	80052f2 <__libc_init_array+0x2e>
 80052e6:	bd70      	pop	{r4, r5, r6, pc}
 80052e8:	00b3      	lsls	r3, r6, #2
 80052ea:	58eb      	ldr	r3, [r5, r3]
 80052ec:	4798      	blx	r3
 80052ee:	3601      	adds	r6, #1
 80052f0:	e7ee      	b.n	80052d0 <__libc_init_array+0xc>
 80052f2:	00b3      	lsls	r3, r6, #2
 80052f4:	58eb      	ldr	r3, [r5, r3]
 80052f6:	4798      	blx	r3
 80052f8:	3601      	adds	r6, #1
 80052fa:	e7f2      	b.n	80052e2 <__libc_init_array+0x1e>
 80052fc:	080053d8 	.word	0x080053d8
 8005300:	080053d8 	.word	0x080053d8
 8005304:	080053dc 	.word	0x080053dc
 8005308:	080053d8 	.word	0x080053d8

0800530c <_init>:
 800530c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530e:	46c0      	nop			@ (mov r8, r8)
 8005310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005312:	bc08      	pop	{r3}
 8005314:	469e      	mov	lr, r3
 8005316:	4770      	bx	lr

08005318 <_fini>:
 8005318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800531a:	46c0      	nop			@ (mov r8, r8)
 800531c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800531e:	bc08      	pop	{r3}
 8005320:	469e      	mov	lr, r3
 8005322:	4770      	bx	lr
